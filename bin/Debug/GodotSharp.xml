<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GodotSharp</name>
    </assembly>
    <members>
        <member name="T:GodotEngine.AStar">
            <summary>
            A* (A star) is a computer algorithm that is widely used in pathfinding and graph traversal, the process of plotting an efficiently directed path between multiple points. It enjoys widespread use due to its performance and accuracy. Godot's A* implementation make use of vectors as points.
            You must add points manually with [method AStar.add_point] and create segments manually with [method AStar.connect_points]. So you can test if there is a path between two points with the [method AStar.are_points_connected] function, get the list of existing ids in the found path with [method AStar.get_id_path], or the points list with [method AStar.get_point_path].
            </summary>
        </member>
        <member name="M:GodotEngine.AStar.add_point(System.Int32,GodotEngine.Vector3,System.Single)">
            <summary>
            Add a new point at the given position [code]pos[/code] with the given identifier [code]id[/code]. The [code]weight_scale[/code] has to be 1 or larger.
            </summary>
        </member>
        <member name="M:GodotEngine.AStar.get_point_pos(System.Int32)">
            <summary>
            Returns the position of point with given id.
            </summary>
        </member>
        <member name="M:GodotEngine.AStar.get_point_weight_scale(System.Int32)">
            <summary>
            Returns the weight scale of point with given id.
            </summary>
        </member>
        <member name="M:GodotEngine.AStar.remove_point(System.Int32)">
            <summary>
            Removes the point with given id.
            </summary>
        </member>
        <member name="M:GodotEngine.AStar.has_point(System.Int32)">
            <summary>
            Returns if the point with given id exists on AStar;
            </summary>
        </member>
        <member name="M:GodotEngine.AStar.connect_points(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Create a segment between points [code]id[/code] and [code]to_id[/code].
            </summary>
        </member>
        <member name="M:GodotEngine.AStar.disconnect_points(System.Int32,System.Int32)">
            <summary>
            Deletes a segment between points [code]id[/code] and [code]to_id[/code].
            </summary>
        </member>
        <member name="M:GodotEngine.AStar.are_points_connected(System.Int32,System.Int32)">
            <summary>
            Returns if there is a connection/segment between points [code]id[/code] and [code]from_id[/code]
            </summary>
        </member>
        <member name="M:GodotEngine.AStar.clear">
            <summary>
            Clear all the points and segments from AStar instance.
            </summary>
        </member>
        <member name="M:GodotEngine.AStar.get_closest_point(GodotEngine.Vector3)">
            <summary>
            Returns the id of closest point of given point.  -1 is returned if there are no points on AStar.
            </summary>
        </member>
        <member name="M:GodotEngine.AStar.get_closest_pos_in_segment(GodotEngine.Vector3)">
            <summary>
            Returns the position of closest point that has segments.
            </summary>
        </member>
        <member name="M:GodotEngine.AStar.get_point_path(System.Int32,System.Int32)">
            <summary>
            Returns an array with the points of path found by AStar between two given points.
            </summary>
        </member>
        <member name="M:GodotEngine.AStar.get_id_path(System.Int32,System.Int32)">
            <summary>
            Returns an array with the point ids of path found by AStar between two given points.
            </summary>
        </member>
        <member name="T:GodotEngine.AcceptDialog">
            <summary>
            This dialog is useful for small notifications to the user about an event. It can only be accepted or closed, with the same result.
            </summary>
        </member>
        <member name="M:GodotEngine.AcceptDialog.get_ok">
            <summary>
            Return the OK Button.
            </summary>
        </member>
        <member name="M:GodotEngine.AcceptDialog.get_label">
            <summary>
            Return the label used for built-in text.
            </summary>
        </member>
        <member name="M:GodotEngine.AcceptDialog.set_hide_on_ok(System.Boolean)">
            <summary>
            Set whether the dialog is hidden when accepted (default true).
            </summary>
        </member>
        <member name="M:GodotEngine.AcceptDialog.get_hide_on_ok">
            <summary>
            Return true if the dialog will be hidden when accepted (default true).
            </summary>
        </member>
        <member name="M:GodotEngine.AcceptDialog.add_button(System.String,System.Boolean,System.String)">
            <summary>
            Add custom button to the dialog and return the created button.
            The button titled with [i]text[/i] and the [i]action[/i] will be passed to [custom_action] signal when it is pressed.
            </summary>
        </member>
        <member name="M:GodotEngine.AcceptDialog.add_cancel(System.String)">
            <summary>
            Add custom cancel button to the dialog and return the created button.
            </summary>
        </member>
        <member name="M:GodotEngine.AcceptDialog.set_text(System.String)">
            <summary>
            Set the built-in label text.
            </summary>
        </member>
        <member name="M:GodotEngine.AcceptDialog.get_text">
            <summary>
            Return the built-in label text.
            </summary>
        </member>
        <member name="T:GodotEngine.AnimatedSprite">
            <summary>
            Sprite node that can use multiple textures for animation.
            </summary>
        </member>
        <member name="M:GodotEngine.AnimatedSprite.set_sprite_frames(GodotEngine.SpriteFrames)">
            <summary>
            Set the [SpriteFrames] resource, which contains all frames.
            </summary>
        </member>
        <member name="M:GodotEngine.AnimatedSprite.get_sprite_frames">
            <summary>
            Get the [SpriteFrames] resource, which contains all frames.
            </summary>
        </member>
        <member name="M:GodotEngine.AnimatedSprite.set_animation(System.String)">
            <summary>
            Set the current animation of the node and reinits the frame counter of the animation.
            </summary>
        </member>
        <member name="M:GodotEngine.AnimatedSprite.get_animation">
            <summary>
            Return the name of the current animation set to the node.
            </summary>
        </member>
        <member name="M:GodotEngine.AnimatedSprite.play(System.String)">
            <summary>
            Play the animation set in parameter. If no parameter is provided, the current animation is played.
            </summary>
        </member>
        <member name="M:GodotEngine.AnimatedSprite.stop">
            <summary>
            Stop the current animation (does not reset the frame counter).
            </summary>
        </member>
        <member name="M:GodotEngine.AnimatedSprite.is_playing">
            <summary>
            Return true if an animation if currently being played.
            </summary>
        </member>
        <member name="M:GodotEngine.AnimatedSprite.set_centered(System.Boolean)">
            <summary>
            When turned on, offset at (0,0) is the center of the sprite, when off, the top-left corner is.
            </summary>
        </member>
        <member name="M:GodotEngine.AnimatedSprite.is_centered">
            <summary>
            Return true when centered. See [method set_centered].
            </summary>
        </member>
        <member name="M:GodotEngine.AnimatedSprite.set_offset(GodotEngine.Vector2)">
            <summary>
            Set the offset of the sprite in the node origin. Position varies depending on whether it is centered or not.
            </summary>
        </member>
        <member name="M:GodotEngine.AnimatedSprite.get_offset">
            <summary>
            Return the offset of the sprite in the node origin.
            </summary>
        </member>
        <member name="M:GodotEngine.AnimatedSprite.set_flip_h(System.Boolean)">
            <summary>
            If true, sprite is flipped horizontally.
            </summary>
        </member>
        <member name="M:GodotEngine.AnimatedSprite.is_flipped_h">
            <summary>
            Return true if sprite is flipped horizontally.
            </summary>
        </member>
        <member name="M:GodotEngine.AnimatedSprite.set_flip_v(System.Boolean)">
            <summary>
            If true, sprite is flipped vertically.
            </summary>
        </member>
        <member name="M:GodotEngine.AnimatedSprite.is_flipped_v">
            <summary>
            Return true if sprite is flipped vertically.
            </summary>
        </member>
        <member name="M:GodotEngine.AnimatedSprite.set_frame(System.Int32)">
            <summary>
            Set the visible sprite frame index (from the list of frames inside the [SpriteFrames] resource).
            </summary>
        </member>
        <member name="M:GodotEngine.AnimatedSprite.get_frame">
            <summary>
            Return the visible frame index.
            </summary>
        </member>
        <member name="M:GodotEngine.AnimatedSprite3D.set_sprite_frames(GodotEngine.SpriteFrames)">
            <summary>
            Set the [SpriteFrames] resource, which contains all frames.
            </summary>
        </member>
        <member name="M:GodotEngine.AnimatedSprite3D.get_sprite_frames">
            <summary>
            Get the [SpriteFrames] resource, which contains all frames.
            </summary>
        </member>
        <member name="M:GodotEngine.AnimatedSprite3D.set_animation(System.String)">
            <summary>
            Set the current animation of the node and reinits the frame counter of the animation.
            </summary>
        </member>
        <member name="M:GodotEngine.AnimatedSprite3D.get_animation">
            <summary>
            Return the name of the current animation set to the node.
            </summary>
        </member>
        <member name="M:GodotEngine.AnimatedSprite3D.play(System.String)">
            <summary>
            Play the animation set in parameter. If no parameter is provided, the current animation is played.
            </summary>
        </member>
        <member name="M:GodotEngine.AnimatedSprite3D.stop">
            <summary>
            Stop the current animation (does not reset the frame counter).
            </summary>
        </member>
        <member name="M:GodotEngine.AnimatedSprite3D.is_playing">
            <summary>
            Return true if an animation if currently being played.
            </summary>
        </member>
        <member name="M:GodotEngine.AnimatedSprite3D.set_frame(System.Int32)">
            <summary>
            Set the visible sprite frame index (from the list of frames inside the [SpriteFrames] resource).
            </summary>
        </member>
        <member name="M:GodotEngine.AnimatedSprite3D.get_frame">
            <summary>
            Return the visible frame index.
            </summary>
        </member>
        <member name="T:GodotEngine.Animation">
            <summary>
            An Animation resource contains data used to animate everything in the engine. Animations are divided into tracks, and each track must be linked to a node. The state of that node can be changed through time, by adding timed keys (events) to the track.
            Animations are just data containers, and must be added to odes such as an [AnimationPlayer] or [AnimationTreePlayer] to be played back.
            </summary>
        </member>
        <member name="F:GodotEngine.Animation.TYPE_VALUE">
            <summary>
            Value tracks set values in node properties, but only those which can be Interpolated.
            </summary>
        </member>
        <member name="F:GodotEngine.Animation.TYPE_TRANSFORM">
            <summary>
            Transform tracks are used to change node local transforms or skeleton pose bones. Transitions are Interpolated.
            </summary>
        </member>
        <member name="F:GodotEngine.Animation.TYPE_METHOD">
            <summary>
            Method tracks call functions with given arguments per key.
            </summary>
        </member>
        <member name="F:GodotEngine.Animation.INTERPOLATION_NEAREST">
            <summary>
            No interpolation (nearest value).
            </summary>
        </member>
        <member name="F:GodotEngine.Animation.INTERPOLATION_LINEAR">
            <summary>
            Linear interpolation.
            </summary>
        </member>
        <member name="F:GodotEngine.Animation.INTERPOLATION_CUBIC">
            <summary>
            Cubic interpolation.
            </summary>
        </member>
        <member name="M:GodotEngine.Animation.add_track(System.Int32,System.Int32)">
            <summary>
            Add a track to the Animation. The track type must be specified as any of the values in the TYPE_* enumeration.
            </summary>
        </member>
        <member name="M:GodotEngine.Animation.remove_track(System.Int32)">
            <summary>
            Remove a track by specifying the track index.
            </summary>
        </member>
        <member name="M:GodotEngine.Animation.get_track_count">
            <summary>
            Return the amount of tracks in the animation.
            </summary>
        </member>
        <member name="M:GodotEngine.Animation.track_get_type(System.Int32)">
            <summary>
            Get the type of a track.
            </summary>
        </member>
        <member name="M:GodotEngine.Animation.track_get_path(System.Int32)">
            <summary>
            Get the path of a track. for more information on the path format, see [method track_set_path]
            </summary>
        </member>
        <member name="M:GodotEngine.Animation.track_set_path(System.Int32,GodotEngine.NodePath)">
            <summary>
            Set the path of a track. Paths must be valid scene-tree paths to a node, and must be specified starting from the parent node of the node that will reproduce the animation. Tracks that control properties or bones must append their name after the path, separated by ":". Example: "character/skeleton:ankle" or "character/mesh:transform/local"
            </summary>
        </member>
        <member name="M:GodotEngine.Animation.find_track(GodotEngine.NodePath)">
            <summary>
            Return the index of the specified track. If the track is not found, return -1.
            </summary>
        </member>
        <member name="M:GodotEngine.Animation.track_move_up(System.Int32)">
            <summary>
            Move a track up.
            </summary>
        </member>
        <member name="M:GodotEngine.Animation.track_move_down(System.Int32)">
            <summary>
            Move a track down.
            </summary>
        </member>
        <member name="M:GodotEngine.Animation.track_set_imported(System.Int32,System.Boolean)">
            <summary>
            Set the given track as imported or not.
            </summary>
        </member>
        <member name="M:GodotEngine.Animation.track_is_imported(System.Int32)">
            <summary>
            Return true if the given track is imported. Else, return false.
            </summary>
        </member>
        <member name="M:GodotEngine.Animation.transform_track_insert_key(System.Int32,System.Single,GodotEngine.Vector3,GodotEngine.Quat,GodotEngine.Vector3)">
            <summary>
            Insert a transform key for a transform track.
            </summary>
        </member>
        <member name="M:GodotEngine.Animation.track_insert_key(System.Int32,System.Single,System.Object,System.Single)">
            <summary>
            Insert a generic key in a given track.
            </summary>
        </member>
        <member name="M:GodotEngine.Animation.track_remove_key(System.Int32,System.Int32)">
            <summary>
            Remove a key by index in a given track.
            </summary>
        </member>
        <member name="M:GodotEngine.Animation.track_remove_key_at_pos(System.Int32,System.Single)">
            <summary>
            Remove a key by position (seconds) in a given track.
            </summary>
        </member>
        <member name="M:GodotEngine.Animation.track_set_key_value(System.Int32,System.Int32,System.Object)">
            <summary>
            Set the value of an existing key.
            </summary>
        </member>
        <member name="M:GodotEngine.Animation.track_set_key_transition(System.Int32,System.Int32,System.Single)">
            <summary>
            Set the transition curve (easing) for a specific key (see built-in math function "ease").
            </summary>
        </member>
        <member name="M:GodotEngine.Animation.track_get_key_transition(System.Int32,System.Int32)">
            <summary>
            Return the transition curve (easing) for a specific key (see built-in math function "ease").
            </summary>
        </member>
        <member name="M:GodotEngine.Animation.track_get_key_count(System.Int32)">
            <summary>
            Return the amount of keys in a given track.
            </summary>
        </member>
        <member name="M:GodotEngine.Animation.track_get_key_value(System.Int32,System.Int32)">
            <summary>
            Return the value of a given key in a given track.
            </summary>
        </member>
        <member name="M:GodotEngine.Animation.track_get_key_time(System.Int32,System.Int32)">
            <summary>
            Return the time at which the key is located.
            </summary>
        </member>
        <member name="M:GodotEngine.Animation.track_find_key(System.Int32,System.Single,System.Boolean)">
            <summary>
            Find the key index by time in a given track. Optionally, only find it if the exact time is given.
            </summary>
        </member>
        <member name="M:GodotEngine.Animation.track_set_interpolation_type(System.Int32,System.Int32)">
            <summary>
            Set the interpolation type of a given track, from the INTERPOLATION_* enum.
            </summary>
        </member>
        <member name="M:GodotEngine.Animation.track_get_interpolation_type(System.Int32)">
            <summary>
            Return the interpolation type of a given track, from the INTERPOLATION_* enum.
            </summary>
        </member>
        <member name="M:GodotEngine.Animation.transform_track_interpolate(System.Int32,System.Single)">
            <summary>
            Return the interpolated value of a transform track at a given time (in seconds). An array consisting of 3 elements: position ([Vector3]), rotation ([Quat]) and scale ([Vector3]).
            </summary>
        </member>
        <member name="M:GodotEngine.Animation.value_track_get_key_indices(System.Int32,System.Single,System.Single)">
            <summary>
            Return all the key indices of a value track, given a position and delta time.
            </summary>
        </member>
        <member name="M:GodotEngine.Animation.method_track_get_key_indices(System.Int32,System.Single,System.Single)">
            <summary>
            Return all the key indices of a method track, given a position and delta time.
            </summary>
        </member>
        <member name="M:GodotEngine.Animation.method_track_get_name(System.Int32,System.Int32)">
            <summary>
            Return the method name of a method track.
            </summary>
        </member>
        <member name="M:GodotEngine.Animation.method_track_get_params(System.Int32,System.Int32)">
            <summary>
            Return the arguments values to be called on a method track for a given key in a given track.
            </summary>
        </member>
        <member name="M:GodotEngine.Animation.set_length(System.Single)">
            <summary>
            Set the total length of the animation (in seconds). Note that length is not delimited by the last key, as this one may be before or after the end to ensure correct interpolation and looping.
            </summary>
        </member>
        <member name="M:GodotEngine.Animation.get_length">
            <summary>
            Return the total length of the animation (in seconds).
            </summary>
        </member>
        <member name="M:GodotEngine.Animation.set_loop(System.Boolean)">
            <summary>
            Set a flag indicating that the animation must loop. This is uses for correct interpolation of animation cycles, and for hinting the player that it must restart the animation.
            </summary>
        </member>
        <member name="M:GodotEngine.Animation.has_loop">
            <summary>
            Return whether the animation has the loop flag set.
            </summary>
        </member>
        <member name="M:GodotEngine.Animation.set_step(System.Single)">
            <summary>
            Set the animation step value.
            </summary>
        </member>
        <member name="M:GodotEngine.Animation.get_step">
            <summary>
            Get the animation step value.
            </summary>
        </member>
        <member name="M:GodotEngine.Animation.clear">
            <summary>
            Clear the animation (clear all tracks and reset all).
            </summary>
        </member>
        <member name="T:GodotEngine.AnimationPlayer">
            <summary>
            An animation player is used for general purpose playback of [Animation] resources. It contains a dictionary of animations (referenced by name) and custom blend times between their transitions. Additionally, animations can be played and blended in different channels.
            </summary>
        </member>
        <member name="F:GodotEngine.AnimationPlayer.ANIMATION_PROCESS_FIXED">
            <summary>
            Process animation on fixed process. This is specially useful when animating kinematic bodies.
            </summary>
        </member>
        <member name="F:GodotEngine.AnimationPlayer.ANIMATION_PROCESS_IDLE">
            <summary>
            Process animation on idle process.
            </summary>
        </member>
        <member name="M:GodotEngine.AnimationPlayer.add_animation(System.String,GodotEngine.Animation)">
            <summary>
            Add an animation resource to the player, which will be later referenced by the "name" argument.
            </summary>
        </member>
        <member name="M:GodotEngine.AnimationPlayer.remove_animation(System.String)">
            <summary>
            Remove an animation from the player (by supplying the same name used to add it).
            </summary>
        </member>
        <member name="M:GodotEngine.AnimationPlayer.rename_animation(System.String,System.String)">
            <summary>
            Rename an existing animation.
            </summary>
        </member>
        <member name="M:GodotEngine.AnimationPlayer.has_animation(System.String)">
            <summary>
            Request whether an [Animation] name exist within the player.
            </summary>
        </member>
        <member name="M:GodotEngine.AnimationPlayer.get_animation(System.String)">
            <summary>
            Get an [Animation] resource by requesting a name.
            </summary>
        </member>
        <member name="M:GodotEngine.AnimationPlayer.get_animation_list">
            <summary>
            Get the list of names of the animations stored in the player.
            </summary>
        </member>
        <member name="M:GodotEngine.AnimationPlayer.set_blend_time(System.String,System.String,System.Single)">
            <summary>
            Specify a blend time (in seconds) between two animations, referenced by their names.
            </summary>
        </member>
        <member name="M:GodotEngine.AnimationPlayer.get_blend_time(System.String,System.String)">
            <summary>
            Get the blend time between two animations, referenced by their names.
            </summary>
        </member>
        <member name="M:GodotEngine.AnimationPlayer.set_default_blend_time(System.Single)">
            <summary>
            Set the default blend time between animations.
            </summary>
        </member>
        <member name="M:GodotEngine.AnimationPlayer.get_default_blend_time">
            <summary>
            Return the default blend time between animations.
            </summary>
        </member>
        <member name="M:GodotEngine.AnimationPlayer.play(System.String,System.Single,System.Single,System.Boolean)">
            <summary>
            Play a given animation by the animation name. Custom speed and blend times can be set. If custom speed is negative (-1), 'from_end' being true can play the animation backwards.
            </summary>
        </member>
        <member name="M:GodotEngine.AnimationPlayer.play_backwards(System.String,System.Single)">
            <summary>
            Play a given animation by the animation name in reverse.
            </summary>
        </member>
        <member name="M:GodotEngine.AnimationPlayer.stop(System.Boolean)">
            <summary>
            Stop the currently playing animation.
            </summary>
        </member>
        <member name="M:GodotEngine.AnimationPlayer.stop_all">
            <summary>
            Stop playback of animations (deprecated).
            </summary>
        </member>
        <member name="M:GodotEngine.AnimationPlayer.is_playing">
            <summary>
            Return whether an animation is playing.
            </summary>
        </member>
        <member name="M:GodotEngine.AnimationPlayer.set_current_animation(System.String)">
            <summary>
            Set the current animation (even if no playback occurs). Using set_current_animation() and set_active() are similar to calling play().
            </summary>
        </member>
        <member name="M:GodotEngine.AnimationPlayer.get_current_animation">
            <summary>
            Return the name of the animation being played.
            </summary>
        </member>
        <member name="M:GodotEngine.AnimationPlayer.queue(System.String)">
            <summary>
            Queue an animation for playback once the current one is done.
            </summary>
        </member>
        <member name="M:GodotEngine.AnimationPlayer.clear_queue">
            <summary>
            If animations are queued to play, clear them.
            </summary>
        </member>
        <member name="M:GodotEngine.AnimationPlayer.set_active(System.Boolean)">
            <summary>
            Set the player as active (playing). If false, it will do nothing.
            </summary>
        </member>
        <member name="M:GodotEngine.AnimationPlayer.is_active">
            <summary>
            Return true if the player is active.
            </summary>
        </member>
        <member name="M:GodotEngine.AnimationPlayer.set_speed_scale(System.Single)">
            <summary>
            Set a speed scaling ratio in a given animation channel (or channel 0 if none is provided). Default ratio is [i]1[/i] (no scaling).
            </summary>
        </member>
        <member name="M:GodotEngine.AnimationPlayer.get_speed_scale">
            <summary>
            Get the speed scaling ratio in a given animation channel (or channel 0 if none is provided). Default ratio is [i]1[/i] (no scaling).
            </summary>
        </member>
        <member name="M:GodotEngine.AnimationPlayer.set_autoplay(System.String)">
            <summary>
            Set the name of the animation that will be automatically played when the scene is loaded.
            </summary>
        </member>
        <member name="M:GodotEngine.AnimationPlayer.get_autoplay">
            <summary>
            Return the name of the animation that will be automatically played when the scene is loaded.
            </summary>
        </member>
        <member name="M:GodotEngine.AnimationPlayer.set_root(GodotEngine.NodePath)">
            <summary>
            AnimationPlayer resolves animation track paths from this node (which is relative to itself), by default root is "..", but it can be changed.
            </summary>
        </member>
        <member name="M:GodotEngine.AnimationPlayer.get_root">
            <summary>
            Return path to root node (see [method set_root]).
            </summary>
        </member>
        <member name="M:GodotEngine.AnimationPlayer.seek(System.Single,System.Boolean)">
            <summary>
            Seek the animation to a given position in time (in seconds). If 'update' is true, the animation will be updated too, otherwise it will be updated at process time.
            </summary>
        </member>
        <member name="M:GodotEngine.AnimationPlayer.get_pos">
            <summary>
            Return the playback position (in seconds) in an animation channel (or channel 0 if none is provided).
            </summary>
        </member>
        <member name="M:GodotEngine.AnimationPlayer.find_animation(GodotEngine.Animation)">
            <summary>
            Find an animation name by resource.
            </summary>
        </member>
        <member name="M:GodotEngine.AnimationPlayer.clear_caches">
            <summary>
            The animation player creates caches for faster access to the nodes it will animate. However, if a specific node is removed, it may not notice it, so clear_caches will force the player to search for the nodes again.
            </summary>
        </member>
        <member name="M:GodotEngine.AnimationPlayer.set_animation_process_mode(System.Int32)">
            <summary>
            Set the mode in which the animation player processes. By default, it processes on idle time (framerate dependent), but using fixed time works well for animating static collision bodies in 2D and 3D. See enum ANIMATION_PROCESS_*.
            </summary>
        </member>
        <member name="M:GodotEngine.AnimationPlayer.get_animation_process_mode">
            <summary>
            Return the mode in which the animation player processes. See [method set_animation_process_mode].
            </summary>
        </member>
        <member name="M:GodotEngine.AnimationPlayer.get_current_animation_pos">
            <summary>
            Get the position (in seconds) of the currently being played animation.
            </summary>
        </member>
        <member name="M:GodotEngine.AnimationPlayer.get_current_animation_length">
            <summary>
            Get the length (in seconds) of the currently being played animation.
            </summary>
        </member>
        <member name="M:GodotEngine.AnimationPlayer.advance(System.Single)">
            <summary>
            Used to skip ahead or skip back in an animation. Delta is the time in seconds to skip.
            </summary>
        </member>
        <member name="T:GodotEngine.AnimationTreePlayer">
            <summary>
            Animation Player that uses a node graph for the blending. This kind of player is very useful when animating character or other skeleton based rigs, because it can combine several animations to form a desired pose.
            </summary>
        </member>
        <member name="M:GodotEngine.AnimationTreePlayer.add_node(System.Int32,System.String)">
            <summary>
            Add a node of a given type in the graph with given id.
            </summary>
        </member>
        <member name="M:GodotEngine.AnimationTreePlayer.node_exists(System.String)">
            <summary>
            Check if a node exists (by name).
            </summary>
        </member>
        <member name="M:GodotEngine.AnimationTreePlayer.node_rename(System.String,System.String)">
            <summary>
            Rename a node in the graph.
            </summary>
        </member>
        <member name="M:GodotEngine.AnimationTreePlayer.node_get_type(System.String)">
            <summary>
            Get the node type, will return from NODE_* enum.
            </summary>
        </member>
        <member name="M:GodotEngine.AnimationTreePlayer.node_get_input_count(System.String)">
            <summary>
            Return the input count for a given node. Different types of nodes have different amount of inputs.
            </summary>
        </member>
        <member name="M:GodotEngine.AnimationTreePlayer.node_get_input_source(System.String,System.Int32)">
            <summary>
            Return the input source for a given node input.
            </summary>
        </member>
        <member name="M:GodotEngine.AnimationTreePlayer.animation_node_set_animation(System.String,GodotEngine.Animation)">
            <summary>
            Set the animation for an animation node.
            </summary>
        </member>
        <member name="T:GodotEngine.Area">
            <summary>
            General purpose area detection for 3D physics. Areas can be used for detection of objects that enter/exit them, as well as overriding space parameters (changing gravity, damping, etc). For this, use any space override different from AREA_SPACE_OVERRIDE_DISABLE and point gravity at the center of mass.
            </summary>
        </member>
        <member name="M:GodotEngine.Area.set_space_override_mode(System.Int32)">
            <summary>
            Set the space override mode. This mode controls how an area affects gravity and damp.
            AREA_SPACE_OVERRIDE_DISABLED: This area does not affect gravity/damp. These are generally areas that exist only to detect collisions, and objects entering or exiting them.
            AREA_SPACE_OVERRIDE_COMBINE: This area adds its gravity/damp values to whatever has been calculated so far. This way, many overlapping areas can combine their physics to make interesting effects.
            AREA_SPACE_OVERRIDE_COMBINE_REPLACE: This area adds its gravity/damp values to whatever has been calculated so far. Then stops taking into account the rest of the areas, even the default one.
            AREA_SPACE_OVERRIDE_REPLACE: This area replaces any gravity/damp, even the default one, and stops taking into account the rest of the areas.
            AREA_SPACE_OVERRIDE_REPLACE_COMBINE: This area replaces any gravity/damp calculated so far, but keeps calculating the rest of the areas, down to the default one.
            </summary>
        </member>
        <member name="M:GodotEngine.Area.get_space_override_mode">
            <summary>
            Return the space override mode.
            </summary>
        </member>
        <member name="M:GodotEngine.Area.set_gravity_is_point(System.Boolean)">
            <summary>
            When overriding space parameters, this method sets whether this area has a center of gravity. To set/get the location of the center of gravity, use [method set_gravity_vector]/[method get_gravity_vector].
            </summary>
        </member>
        <member name="M:GodotEngine.Area.is_gravity_a_point">
            <summary>
            Return whether gravity is a point. A point gravity will attract objects towards it, as opposed to a gravity vector, which moves them in a given direction.
            </summary>
        </member>
        <member name="M:GodotEngine.Area.set_gravity_distance_scale(System.Single)">
            <summary>
            Set the falloff factor for point gravity. The greater this value is, the faster the strength of gravity decreases with the square of distance.
            </summary>
        </member>
        <member name="M:GodotEngine.Area.get_gravity_distance_scale">
            <summary>
            Return the falloff factor for point gravity.
            </summary>
        </member>
        <member name="M:GodotEngine.Area.set_gravity_vector(GodotEngine.Vector3)">
            <summary>
            Set the gravity vector. This vector does not have to be normalized.
            If gravity is a point (see [method is_gravity_a_point]), this will be the attraction center.
            </summary>
        </member>
        <member name="M:GodotEngine.Area.get_gravity_vector">
            <summary>
            Return the gravity vector. If gravity is a point (see [method is_gravity_a_point]), this will be the attraction center.
            </summary>
        </member>
        <member name="M:GodotEngine.Area.set_gravity(System.Single)">
            <summary>
            Set the gravity intensity. This is useful to alter the force of gravity without altering its direction.
            This value multiplies the gravity vector, whether it is the given vector ([method set_gravity_vector]), or a calculated one (when using a center of gravity).
            </summary>
        </member>
        <member name="M:GodotEngine.Area.get_gravity">
            <summary>
            Return the gravity intensity.
            </summary>
        </member>
        <member name="M:GodotEngine.Area.set_angular_damp(System.Single)">
            <summary>
            Set the rate at which objects stop spinning in this area, if there are not any other forces making it spin. The value is a fraction of its current speed, lost per second. Thus, a value of 1.0 should mean stopping immediately, and 0.0 means the object never stops.
            In practice, as the fraction of speed lost gets smaller with each frame, a value of 1.0 does not mean the object will stop in exactly one second. Only when the physics calculations are done at 1 frame per second, it does stop in a second.
            </summary>
        </member>
        <member name="M:GodotEngine.Area.get_angular_damp">
            <summary>
            Return the angular damp rate.
            </summary>
        </member>
        <member name="M:GodotEngine.Area.set_linear_damp(System.Single)">
            <summary>
            Set the rate at which objects stop moving in this area, if there are not any other forces moving it. The value is a fraction of its current speed, lost per second. Thus, a value of 1.0 should mean stopping immediately, and 0.0 means the object never stops.
            In practice, as the fraction of speed lost gets smaller with each frame, a value of 1.0 does not mean the object will stop in exactly one second. Only when the physics calculations are done at 1 frame per second, it does stop in a second.
            </summary>
        </member>
        <member name="M:GodotEngine.Area.get_linear_damp">
            <summary>
            Return the linear damp rate.
            </summary>
        </member>
        <member name="M:GodotEngine.Area.set_priority(System.Single)">
            <summary>
            Set the order in which the area is processed. Greater values mean the area gets processed first. This is useful for areas which have an space override different from AREA_SPACE_OVERRIDE_DISABLED or AREA_SPACE_OVERRIDE_COMBINE, as they replace values, and are thus order-dependent.
            Areas with the same priority value get evaluated in an unpredictable order, and should be differentiated if evaluation order is to be important.
            </summary>
        </member>
        <member name="M:GodotEngine.Area.get_priority">
            <summary>
            Return the processing order of this area.
            </summary>
        </member>
        <member name="M:GodotEngine.Area.set_collision_mask(System.Int32)">
            <summary>
            Set the physics layers this area can scan for collisions.
            </summary>
        </member>
        <member name="M:GodotEngine.Area.get_collision_mask">
            <summary>
            Return the physics layers this area can scan for collisions.
            </summary>
        </member>
        <member name="M:GodotEngine.Area.set_collision_layer(System.Int32)">
            <summary>
            Set the physics layers this area is in.
            Collidable objects can exist in any of 32 different layers. These layers are not visual, but more of a tagging system instead. A collidable can use these layers/tags to select with which objects it can collide, using [method set_collision_mask].
            A contact is detected if object A is in any of the layers that object B scans, or object B is in any layer scanned by object A.
            </summary>
        </member>
        <member name="M:GodotEngine.Area.get_collision_layer">
            <summary>
            Return the physics layer this area is in.
            </summary>
        </member>
        <member name="M:GodotEngine.Area.set_collision_mask_bit(System.Int32,System.Boolean)">
            <summary>
            Set/clear individual bits on the collision mask. This makes selecting the areas scanned easier.
            </summary>
        </member>
        <member name="M:GodotEngine.Area.get_collision_mask_bit(System.Int32)">
            <summary>
            Return an individual bit on the collision mask.
            </summary>
        </member>
        <member name="M:GodotEngine.Area.set_collision_layer_bit(System.Int32,System.Boolean)">
            <summary>
            Set/clear individual bits on the layer mask. This makes getting an area in/out of only one layer easier.
            </summary>
        </member>
        <member name="M:GodotEngine.Area.get_collision_layer_bit(System.Int32)">
            <summary>
            Return an individual bit on the layer mask.
            </summary>
        </member>
        <member name="M:GodotEngine.Area.set_monitorable(System.Boolean)">
            <summary>
            Set whether this area can be detected by other, monitoring, areas. Only areas need to be marked as monitorable. Bodies are always so.
            </summary>
        </member>
        <member name="M:GodotEngine.Area.is_monitorable">
            <summary>
            Return whether this area can be detected by other, monitoring, areas.
            </summary>
        </member>
        <member name="M:GodotEngine.Area.set_monitoring(System.Boolean)">
            <summary>
            Set whether this area can detect bodies/areas entering/exiting it.
            </summary>
        </member>
        <member name="M:GodotEngine.Area.is_monitoring">
            <summary>
            Return whether this area detects bodies/areas entering/exiting it.
            </summary>
        </member>
        <member name="M:GodotEngine.Area.get_overlapping_bodies">
            <summary>
            Return a list of the bodies ([PhysicsBody]) that are totally or partially inside this area.
            </summary>
        </member>
        <member name="M:GodotEngine.Area.get_overlapping_areas">
            <summary>
            Return a list of the areas that are totally or partially inside this area.
            </summary>
        </member>
        <member name="T:GodotEngine.Area2D">
            <summary>
            General purpose area detection for 2D physics. Areas can be used for detection of objects that enter/exit them, as well as overriding space parameters (changing gravity, damping, etc). For this, use any space override different from AREA_SPACE_OVERRIDE_DISABLE and point gravity at the center of mass.
            </summary>
        </member>
        <member name="M:GodotEngine.Area2D.set_space_override_mode(System.Int32)">
            <summary>
            Set the space override mode. This mode controls how an area affects gravity and damp.
            AREA_SPACE_OVERRIDE_DISABLED: This area does not affect gravity/damp. These are generally areas that exist only to detect collisions, and objects entering or exiting them.
            AREA_SPACE_OVERRIDE_COMBINE: This area adds its gravity/damp values to whatever has been calculated so far. This way, many overlapping areas can combine their physics to make interesting effects.
            AREA_SPACE_OVERRIDE_COMBINE_REPLACE: This area adds its gravity/damp values to whatever has been calculated so far. Then stops taking into account the rest of the areas, even the default one.
            AREA_SPACE_OVERRIDE_REPLACE: This area replaces any gravity/damp, even the default one, and stops taking into account the rest of the areas.
            AREA_SPACE_OVERRIDE_REPLACE_COMBINE: This area replaces any gravity/damp calculated so far, but keeps calculating the rest of the areas, down to the default one.
            </summary>
        </member>
        <member name="M:GodotEngine.Area2D.get_space_override_mode">
            <summary>
            Return the space override mode.
            </summary>
        </member>
        <member name="M:GodotEngine.Area2D.set_gravity_is_point(System.Boolean)">
            <summary>
            When overriding space parameters, this method sets whether this area has a center of gravity. To set/get the location of the center of gravity, use [method set_gravity_vector]/[method get_gravity_vector].
            </summary>
        </member>
        <member name="M:GodotEngine.Area2D.is_gravity_a_point">
            <summary>
            Return whether gravity is a point. A point gravity will attract objects towards it, as opposed to a gravity vector, which moves them in a given direction.
            </summary>
        </member>
        <member name="M:GodotEngine.Area2D.set_gravity_distance_scale(System.Single)">
            <summary>
            Set the falloff factor for point gravity. The greater this value is, the faster the strength of gravity decreases with the square of distance.
            </summary>
        </member>
        <member name="M:GodotEngine.Area2D.get_gravity_distance_scale">
            <summary>
            Return the falloff factor for point gravity.
            </summary>
        </member>
        <member name="M:GodotEngine.Area2D.set_gravity_vector(GodotEngine.Vector2)">
            <summary>
            Set the gravity vector. This vector does not have to be normalized.
            If gravity is a point (see [method is_gravity_a_point]), this will be the attraction center.
            </summary>
        </member>
        <member name="M:GodotEngine.Area2D.get_gravity_vector">
            <summary>
            Return the gravity vector. If gravity is a point (see [method is_gravity_a_point]), this will be the attraction center.
            </summary>
        </member>
        <member name="M:GodotEngine.Area2D.set_gravity(System.Single)">
            <summary>
            Set the gravity intensity. This is useful to alter the force of gravity without altering its direction.
            This value multiplies the gravity vector, whether it is the given vector ([method set_gravity_vector]), or a calculated one (when using a center of gravity).
            </summary>
        </member>
        <member name="M:GodotEngine.Area2D.get_gravity">
            <summary>
            Return the gravity intensity.
            </summary>
        </member>
        <member name="M:GodotEngine.Area2D.set_linear_damp(System.Single)">
            <summary>
            Set the rate at which objects stop moving in this area, if there are not any other forces moving it. The value is a fraction of its current speed, lost per second. Thus, a value of 1.0 should mean stopping immediately, and 0.0 means the object never stops.
            In practice, as the fraction of speed lost gets smaller with each frame, a value of 1.0 does not mean the object will stop in exactly one second. Only when the physics calculations are done at 1 frame per second, it does stop in a second.
            </summary>
        </member>
        <member name="M:GodotEngine.Area2D.get_linear_damp">
            <summary>
            Return the linear damp rate.
            </summary>
        </member>
        <member name="M:GodotEngine.Area2D.set_angular_damp(System.Single)">
            <summary>
            Set the rate at which objects stop spinning in this area, if there are not any other forces making it spin. The value is a fraction of its current speed, lost per second. Thus, a value of 1.0 should mean stopping immediately, and 0.0 means the object never stops.
            In practice, as the fraction of speed lost gets smaller with each frame, a value of 1.0 does not mean the object will stop in exactly one second. Only when the physics calculations are done at 1 frame per second, it does stop in a second.
            </summary>
        </member>
        <member name="M:GodotEngine.Area2D.get_angular_damp">
            <summary>
            Return the angular damp rate.
            </summary>
        </member>
        <member name="M:GodotEngine.Area2D.set_priority(System.Single)">
            <summary>
            Set the order in which the area is processed. Greater values mean the area gets processed first. This is useful for areas which have an space override different from AREA_SPACE_OVERRIDE_DISABLED or AREA_SPACE_OVERRIDE_COMBINE, as they replace values, and are thus order-dependent.
            Areas with the same priority value get evaluated in an unpredictable order, and should be differentiated if evaluation order is to be important.
            </summary>
        </member>
        <member name="M:GodotEngine.Area2D.get_priority">
            <summary>
            Return the processing order of this area.
            </summary>
        </member>
        <member name="M:GodotEngine.Area2D.set_collision_mask(System.Int32)">
            <summary>
            Set the physics layers this area can scan for collisions.
            </summary>
        </member>
        <member name="M:GodotEngine.Area2D.get_collision_mask">
            <summary>
            Return the physics layers this area can scan for collisions.
            </summary>
        </member>
        <member name="M:GodotEngine.Area2D.set_collision_layer(System.Int32)">
            <summary>
            Set the physics layers this area is in.
            Collidable objects can exist in any of 32 different layers. These layers are not visual, but more of a tagging system instead. A collidable can use these layers/tags to select with which objects it can collide, using [method set_collision_mask].
            A contact is detected if object A is in any of the layers that object B scans, or object B is in any layer scanned by object A.
            </summary>
        </member>
        <member name="M:GodotEngine.Area2D.get_collision_layer">
            <summary>
            Return the physics layer this area is in.
            </summary>
        </member>
        <member name="M:GodotEngine.Area2D.set_collision_mask_bit(System.Int32,System.Boolean)">
            <summary>
            Set/clear individual bits on the collision mask. This makes selecting the areas scanned easier.
            </summary>
        </member>
        <member name="M:GodotEngine.Area2D.get_collision_mask_bit(System.Int32)">
            <summary>
            Return an individual bit on the collision mask.
            </summary>
        </member>
        <member name="M:GodotEngine.Area2D.set_collision_layer_bit(System.Int32,System.Boolean)">
            <summary>
            Set/clear individual bits on the layer mask. This makes getting an area in/out of only one layer easier.
            </summary>
        </member>
        <member name="M:GodotEngine.Area2D.get_collision_layer_bit(System.Int32)">
            <summary>
            Return an individual bit on the layer mask.
            </summary>
        </member>
        <member name="M:GodotEngine.Area2D.set_monitoring(System.Boolean)">
            <summary>
            Set whether this area can detect bodies/areas entering/exiting it.
            </summary>
        </member>
        <member name="M:GodotEngine.Area2D.is_monitoring">
            <summary>
            Return whether this area detects bodies/areas entering/exiting it.
            </summary>
        </member>
        <member name="M:GodotEngine.Area2D.set_monitorable(System.Boolean)">
            <summary>
            Set whether this area can be detected by other, monitoring, areas. Only areas need to be marked as monitorable. Bodies are always so.
            </summary>
        </member>
        <member name="M:GodotEngine.Area2D.is_monitorable">
            <summary>
            Return whether this area can be detected by other, monitoring, areas.
            </summary>
        </member>
        <member name="M:GodotEngine.Area2D.get_overlapping_bodies">
            <summary>
            Return a list of the bodies ([PhysicsBody2D]) that are totally or partially inside this area.
            </summary>
        </member>
        <member name="M:GodotEngine.Area2D.get_overlapping_areas">
            <summary>
            Return a list of the areas that are totally or partially inside this area.
            </summary>
        </member>
        <member name="F:GodotEngine.ArrayMesh.NO_INDEX_ARRAY">
            <summary>
            Default value used for index_array_len when no indices are present.
            </summary>
        </member>
        <member name="F:GodotEngine.ArrayMesh.ARRAY_WEIGHTS_SIZE">
            <summary>
            Amount of weights/bone indices per vertex (always 4).
            </summary>
        </member>
        <member name="F:GodotEngine.ArrayMesh.ARRAY_VERTEX">
            <summary>
            Vertex array (array of [Vector3] vertices).
            </summary>
        </member>
        <member name="F:GodotEngine.ArrayMesh.ARRAY_NORMAL">
            <summary>
            Normal array (array of [Vector3] normals).
            </summary>
        </member>
        <member name="F:GodotEngine.ArrayMesh.ARRAY_TANGENT">
            <summary>
            Tangent array, array of groups of 4 floats. first 3 floats determine the tangent, and the last the binormal direction as -1 or 1.
            </summary>
        </member>
        <member name="F:GodotEngine.ArrayMesh.ARRAY_COLOR">
            <summary>
            Vertex array (array of [Color] colors).
            </summary>
        </member>
        <member name="F:GodotEngine.ArrayMesh.ARRAY_TEX_UV">
            <summary>
            UV array (array of [Vector3] UVs or float array of groups of 2 floats (u,v)).
            </summary>
        </member>
        <member name="F:GodotEngine.ArrayMesh.ARRAY_TEX_UV2">
            <summary>
            Second UV array (array of [Vector3] UVs or float array of groups of 2 floats (u,v)).
            </summary>
        </member>
        <member name="F:GodotEngine.ArrayMesh.ARRAY_BONES">
            <summary>
            Array of bone indices, as a float array. Each element in groups of 4 floats.
            </summary>
        </member>
        <member name="F:GodotEngine.ArrayMesh.ARRAY_WEIGHTS">
            <summary>
            Array of bone weights, as a float array. Each element in groups of 4 floats.
            </summary>
        </member>
        <member name="F:GodotEngine.ArrayMesh.ARRAY_INDEX">
            <summary>
            Array of integers, used as indices referencing vertices. No index can be beyond the vertex array size.
            </summary>
        </member>
        <member name="F:GodotEngine.ArrayMesh.ARRAY_FORMAT_VERTEX">
            <summary>
            Array format will include vertices (mandatory).
            </summary>
        </member>
        <member name="F:GodotEngine.ArrayMesh.ARRAY_FORMAT_NORMAL">
            <summary>
            Array format will include normals
            </summary>
        </member>
        <member name="F:GodotEngine.ArrayMesh.ARRAY_FORMAT_TANGENT">
            <summary>
            Array format will include tangents
            </summary>
        </member>
        <member name="F:GodotEngine.ArrayMesh.ARRAY_FORMAT_COLOR">
            <summary>
            Array format will include a color array.
            </summary>
        </member>
        <member name="F:GodotEngine.ArrayMesh.ARRAY_FORMAT_TEX_UV">
            <summary>
            Array format will include UVs.
            </summary>
        </member>
        <member name="F:GodotEngine.ArrayMesh.ARRAY_FORMAT_TEX_UV2">
            <summary>
            Array format will include another set of UVs.
            </summary>
        </member>
        <member name="F:GodotEngine.ArrayMesh.ARRAY_FORMAT_BONES">
            <summary>
            Array format will include bone indices.
            </summary>
        </member>
        <member name="F:GodotEngine.ArrayMesh.ARRAY_FORMAT_WEIGHTS">
            <summary>
            Array format will include bone weights.
            </summary>
        </member>
        <member name="F:GodotEngine.ArrayMesh.ARRAY_FORMAT_INDEX">
            <summary>
            Index array will be used.
            </summary>
        </member>
        <member name="M:GodotEngine.ArrayMesh.add_surface_from_arrays(System.Int32,System.Object[],System.Object[],System.Int32)">
            <summary>
            Create a new surface ([method get_surface_count] that will become surf_idx for this.
            Surfaces are created to be rendered using a "primitive", which may be PRIMITIVE_POINTS, PRIMITIVE_LINES, PRIMITIVE_LINE_STRIP, PRIMITIVE_LINE_LOOP, PRIMITIVE_TRIANGLES, PRIMITIVE_TRIANGLE_STRIP, PRIMITIVE_TRIANGLE_FAN. (As a note, when using indices, it is recommended to only use just points, lines or triangles).
            <param name="blend_shapes">If the param is null, then the default value is new object[] {}</param>
            </summary>
        </member>
        <member name="M:GodotEngine.ArrayMesh.get_surface_count">
            <summary>
            Return the amount of surfaces that the [ArrayMesh] holds.
            </summary>
        </member>
        <member name="M:GodotEngine.ArrayMesh.surface_remove(System.Int32)">
            <summary>
            Remove a surface at position surf_idx, shifting greater surfaces one surf_idx slot down.
            </summary>
        </member>
        <member name="M:GodotEngine.ArrayMesh.surface_get_array_len(System.Int32)">
            <summary>
            Return the length in vertices of the vertex array in the requested surface (see [method add_surface]).
            </summary>
        </member>
        <member name="M:GodotEngine.ArrayMesh.surface_get_array_index_len(System.Int32)">
            <summary>
            Return the length in indices of the index array in the requested surface (see [method add_surface]).
            </summary>
        </member>
        <member name="M:GodotEngine.ArrayMesh.surface_get_format(System.Int32)">
            <summary>
            Return the format mask of the requested surface (see [method add_surface]).
            </summary>
        </member>
        <member name="M:GodotEngine.ArrayMesh.surface_get_primitive_type(System.Int32)">
            <summary>
            Return the primitive type of the requested surface (see [method add_surface]).
            </summary>
        </member>
        <member name="M:GodotEngine.ArrayMesh.surface_get_material(System.Int32)">
            <summary>
            Return a [Material] in a given surface. Surface is rendered using this material.
            </summary>
        </member>
        <member name="M:GodotEngine.ArrayMesh.surface_set_name(System.Int32,System.String)">
            <summary>
            Set a [Material] for a given surface. Surface will be rendered using this material.
            </summary>
        </member>
        <member name="T:GodotEngine.AudioServer">
            <summary>
            AudioServer is a low level server interface for audio access. It is in charge of creating sample data (playable audio) as well as its playback via a voice interface.
            </summary>
        </member>
        <member name="T:GodotEngine.AudioStream">
            <summary>
            Base class for audio streams. Audio streams are used for music playback, or other types of streamed sounds that don't fit or require more flexibility than a [Sample].
            </summary>
        </member>
        <member name="T:GodotEngine.AudioStreamOGGVorbis">
            <summary>
            OGG Vorbis audio stream driver.
            </summary>
        </member>
        <member name="T:GodotEngine.BackBufferCopy">
            <summary>
            Node for back-buffering the currently displayed screen. The region defined in the BackBufferCopy node is bufferized with the content of the screen it covers, or the entire screen according to the copy mode set. Accessing this buffer is done with the texscreen() shader instruction.
            </summary>
        </member>
        <member name="F:GodotEngine.BackBufferCopy.COPY_MODE_DISABLED">
            <summary>
            Disables the buffering mode. This means the BackBufferCopy node will directly use the portion of screen it covers.
            </summary>
        </member>
        <member name="F:GodotEngine.BackBufferCopy.COPY_MODE_RECT">
            <summary>
            Sets the copy mode to a region.
            </summary>
        </member>
        <member name="F:GodotEngine.BackBufferCopy.COPY_MODE_VIEWPORT">
            <summary>
            Sets the copy mode to the entire screen.
            </summary>
        </member>
        <member name="M:GodotEngine.BackBufferCopy.set_rect(GodotEngine.Rect2)">
            <summary>
            Defines the area covered by the BackBufferCopy.
            </summary>
        </member>
        <member name="M:GodotEngine.BackBufferCopy.get_rect">
            <summary>
            Return the area covered by the BackBufferCopy.
            </summary>
        </member>
        <member name="M:GodotEngine.BackBufferCopy.set_copy_mode(System.Int32)">
            <summary>
            Set the copy mode of the BackBufferCopy (refer to constants section).
            </summary>
        </member>
        <member name="M:GodotEngine.BackBufferCopy.get_copy_mode">
            <summary>
            Return the copy mode currently applied to the BackBufferCopy (refer to constants section).
            </summary>
        </member>
        <member name="T:GodotEngine.BaseButton">
            <summary>
            BaseButton is the abstract base class for buttons, so it shouldn't be used directly (It doesn't display anything). Other types of buttons inherit from it.
            </summary>
        </member>
        <member name="F:GodotEngine.BaseButton.DRAW_NORMAL">
            <summary>
            The normal state (i.e. not pressed, not hovered, not toggled and enabled) of buttons.
            </summary>
        </member>
        <member name="F:GodotEngine.BaseButton.DRAW_PRESSED">
            <summary>
            The state of buttons are pressed.
            </summary>
        </member>
        <member name="F:GodotEngine.BaseButton.DRAW_HOVER">
            <summary>
            The state of buttons are hovered.
            </summary>
        </member>
        <member name="F:GodotEngine.BaseButton.DRAW_DISABLED">
            <summary>
            The state of buttons are disabled.
            </summary>
        </member>
        <member name="F:GodotEngine.BaseButton.ACTION_MODE_BUTTON_PRESS">
            <summary>
            Require just a press to consider the button clicked.
            </summary>
        </member>
        <member name="F:GodotEngine.BaseButton.ACTION_MODE_BUTTON_RELEASE">
            <summary>
            Require a press and a subsequent release before considering the button clicked.
            </summary>
        </member>
        <member name="M:GodotEngine.BaseButton.set_pressed(System.Boolean)">
            <summary>
            Set the button to pressed state (only if toggle_mode is active).
            </summary>
        </member>
        <member name="M:GodotEngine.BaseButton.is_pressed">
            <summary>
            If toggle_mode is active, return whether the button is toggled. If toggle_mode is not active, return whether the button is pressed down.
            </summary>
        </member>
        <member name="M:GodotEngine.BaseButton.is_hovered">
            <summary>
            Return true if mouse entered the button before it exit.
            </summary>
        </member>
        <member name="M:GodotEngine.BaseButton.set_toggle_mode(System.Boolean)">
            <summary>
            Set the button toggle_mode property. Toggle mode makes the button flip state between pressed and unpressed each time its area is clicked.
            </summary>
        </member>
        <member name="M:GodotEngine.BaseButton.is_toggle_mode">
            <summary>
            Return the toggle_mode property (see [method set_toggle_mode]).
            </summary>
        </member>
        <member name="M:GodotEngine.BaseButton.set_disabled(System.Boolean)">
            <summary>
            Set the button into disabled state. When a button is disabled, it can't be clicked or toggled.
            </summary>
        </member>
        <member name="M:GodotEngine.BaseButton.is_disabled">
            <summary>
            Return whether the button is in disabled state (see [method set_disabled]).
            </summary>
        </member>
        <member name="M:GodotEngine.BaseButton.set_action_mode(System.Int32)">
            <summary>
            Set the current mode of action, determining when the button is considered clicked (see the ACTION_MODE_* constants).
            </summary>
        </member>
        <member name="M:GodotEngine.BaseButton.get_action_mode">
            <summary>
            Return the current mode of action (see [method set_action_mode]) (one of the ACTION_MODE_* constants).
            </summary>
        </member>
        <member name="M:GodotEngine.BaseButton.get_draw_mode">
            <summary>
            Return the visual state used to draw the button. This is useful mainly when implementing your own draw code by either overriding _draw() or connecting to "draw" signal. The visual state of the button is defined by the DRAW_* enum.
            </summary>
        </member>
        <member name="M:GodotEngine.BaseButton.set_enabled_focus_mode(System.Int32)">
            <summary>
            Sets the focus access mode to use when switching between enabled/disabled (see [method Control.set_focus_mode] and [method set_disabled]).
            </summary>
        </member>
        <member name="M:GodotEngine.BaseButton.get_enabled_focus_mode">
            <summary>
            Returns focus access mode used when switching between enabled/disabled (see [method Control.set_focus_mode] and [method set_disabled]).
            </summary>
        </member>
        <member name="M:GodotEngine.BitmapFont.set_height(System.Single)">
            <summary>
            Set the total font height (ascent plus descent) in pixels.
            </summary>
        </member>
        <member name="M:GodotEngine.BitmapFont.set_ascent(System.Single)">
            <summary>
            Set the font ascent (number of pixels above the baseline).
            </summary>
        </member>
        <member name="M:GodotEngine.BitmapFont.add_kerning_pair(System.Int32,System.Int32,System.Int32)">
            <summary>
            Add a kerning pair to the [BitmapFont] as a difference. Kerning pairs are special cases where a typeface advance is determined by the next character.
            </summary>
        </member>
        <member name="M:GodotEngine.BitmapFont.get_kerning_pair(System.Int32,System.Int32)">
            <summary>
            Return a kerning pair as a difference.
            </summary>
        </member>
        <member name="M:GodotEngine.BitmapFont.add_texture(GodotEngine.Texture)">
            <summary>
            Add a texture to the [BitmapFont].
            </summary>
        </member>
        <member name="M:GodotEngine.BitmapFont.add_char(System.Int32,System.Int32,GodotEngine.Rect2,System.Nullable{GodotEngine.Vector2},System.Single)">
            <summary>
            Add a character to the font, where [i]character[/i] is the unicode value, [i]texture[/i] is the texture index, [i]rect[/i] is the region in the texture (in pixels!), [i]align[/i] is the (optional) alignment for the character and [i]advance[/i] is the (optional) advance.
            <param name="align">If the param is null, then the default value is new Vector2(0, 0)</param>
            </summary>
        </member>
        <member name="M:GodotEngine.BitmapFont.get_char_size(System.Int32,System.Int32)">
            <summary>
            Return the size of a character, optionally taking kerning into account if the next character is provided.
            </summary>
        </member>
        <member name="M:GodotEngine.BitmapFont.clear">
            <summary>
            Clear all the font data.
            </summary>
        </member>
        <member name="T:GodotEngine.BoneAttachment">
            <summary>
            This node must be the child of a [Skeleton] node. You can then select a bone for this node to attach to. The BoneAttachment node will copy the transform of the selected bone.
            </summary>
        </member>
        <member name="T:GodotEngine.BoxContainer">
            <summary>
            Base class for Box containers. It arranges children controls vertically or horizontally, and rearranges them automatically when their minimum size changes.
            </summary>
        </member>
        <member name="F:GodotEngine.BoxContainer.ALIGN_BEGIN">
            <summary>
            Align children with beginning of the container.
            </summary>
        </member>
        <member name="F:GodotEngine.BoxContainer.ALIGN_CENTER">
            <summary>
            Align children with center of the container.
            </summary>
        </member>
        <member name="F:GodotEngine.BoxContainer.ALIGN_END">
            <summary>
            Align children with end of the container.
            </summary>
        </member>
        <member name="M:GodotEngine.BoxContainer.add_spacer(System.Boolean)">
            <summary>
            Add a control to the box as a spacer.
            If [i]begin[/i] is true the spacer control will be inserted in front of other children.
            </summary>
        </member>
        <member name="M:GodotEngine.BoxContainer.get_alignment">
            <summary>
            Return the alignment of children in the container.
            </summary>
        </member>
        <member name="M:GodotEngine.BoxContainer.set_alignment(System.Int32)">
            <summary>
            Set the alignment of children in the container(Must be one of ALIGN_BEGIN, ALIGN_CENTER or ALIGN_END).
            </summary>
        </member>
        <member name="T:GodotEngine.BoxShape">
            <summary>
            Box shape resource, which can be set into a [PhysicsBody] or area.
            </summary>
        </member>
        <member name="M:GodotEngine.BoxShape.set_extents(GodotEngine.Vector3)">
            <summary>
            Set the half extents for the shape.
            </summary>
        </member>
        <member name="M:GodotEngine.BoxShape.get_extents">
            <summary>
            Return the half extents of the shape.
            </summary>
        </member>
        <member name="T:GodotEngine.Button">
            <summary>
            Button is the standard themed button. It can contain text and an icon, and will display them according to the current [Theme].
            </summary>
        </member>
        <member name="F:GodotEngine.Button.ALIGN_LEFT">
            <summary>
            Align the text to the left.
            </summary>
        </member>
        <member name="F:GodotEngine.Button.ALIGN_CENTER">
            <summary>
            Center the text.
            </summary>
        </member>
        <member name="F:GodotEngine.Button.ALIGN_RIGHT">
            <summary>
            Align the text to the right.
            </summary>
        </member>
        <member name="M:GodotEngine.Button.set_text(System.String)">
            <summary>
            Set the button text, which will be displayed inside the button area.
            </summary>
        </member>
        <member name="M:GodotEngine.Button.get_text">
            <summary>
            Return the button text.
            </summary>
        </member>
        <member name="M:GodotEngine.Button.set_button_icon(GodotEngine.Texture)">
            <summary>
            Set the icon that will be displayed next to the text inside the button area.
            </summary>
        </member>
        <member name="M:GodotEngine.Button.get_button_icon">
            <summary>
            Return the button icon.
            </summary>
        </member>
        <member name="M:GodotEngine.Button.set_flat(System.Boolean)">
            <summary>
            Set the [i]flat[/i] property of a Button. Flat buttons don't display decoration unless hovered or pressed.
            </summary>
        </member>
        <member name="M:GodotEngine.Button.set_clip_text(System.Boolean)">
            <summary>
            Set the [i]clip_text[/i] property of a Button. When this property is enabled, text that is too large to fit the button is clipped, when disabled (default) the Button will always be wide enough to hold the text.
            </summary>
        </member>
        <member name="M:GodotEngine.Button.get_clip_text">
            <summary>
            Return the state of the [i]clip_text[/i] property (see [method set_clip_text])
            </summary>
        </member>
        <member name="M:GodotEngine.Button.set_text_align(System.Int32)">
            <summary>
            Set the text alignment policy, using one of the ALIGN_* constants.
            </summary>
        </member>
        <member name="M:GodotEngine.Button.get_text_align">
            <summary>
            Return the text alignment policy.
            </summary>
        </member>
        <member name="M:GodotEngine.Button.is_flat">
            <summary>
            Return the state of the [i]flat[/i] property (see [method set_flat]).
            </summary>
        </member>
        <member name="T:GodotEngine.ButtonGroup">
            <summary>
            Group of [Button]. All direct and indirect children buttons become radios. Only one allows being pressed.
            </summary>
        </member>
        <member name="M:GodotEngine.ButtonGroup.get_pressed_button">
            <summary>
            Return the pressed button.
            </summary>
        </member>
        <member name="T:GodotEngine.Camera">
            <summary>
            Camera is a special node that displays what is visible from its current location. Cameras register themselves in the nearest [Viewport] node (when ascending the tree). Only one camera can be active per viewport. If no viewport is available ascending the tree, the Camera will register in the global viewport. In other words, a Camera just provides [i]3D[/i] display capabilities to a [Viewport], and, without one, a scene registered in that [Viewport] (or higher viewports) can't be displayed.
            </summary>
        </member>
        <member name="F:GodotEngine.Camera.PROJECTION_PERSPECTIVE">
            <summary>
            Perspective Projection (object's size on the screen becomes smaller when far away).
            </summary>
        </member>
        <member name="F:GodotEngine.Camera.PROJECTION_ORTHOGONAL">
            <summary>
            Orthogonal Projection (objects remain the same size on the screen no matter how far away they are).
            </summary>
        </member>
        <member name="M:GodotEngine.Camera.project_ray_normal(GodotEngine.Vector2)">
            <summary>
            Return a normal vector in worldspace, that is the result of projecting a point on the [Viewport] rectangle by the camera projection. This is useful for casting rays in the form of (origin,normal) for object intersection or picking.
            </summary>
        </member>
        <member name="M:GodotEngine.Camera.project_ray_origin(GodotEngine.Vector2)">
            <summary>
            Return a 3D position in worldspace, that is the result of projecting a point on the [Viewport] rectangle by the camera projection. This is useful for casting rays in the form of (origin,normal) for object intersection or picking.
            </summary>
        </member>
        <member name="M:GodotEngine.Camera.unproject_position(GodotEngine.Vector3)">
            <summary>
            Return how a 3D point in worldspace maps to a 2D coordinate in the [Viewport] rectangle.
            </summary>
        </member>
        <member name="M:GodotEngine.Camera.set_perspective(System.Single,System.Single,System.Single)">
            <summary>
            Set the camera projection to perspective mode, by specifying a [i]FOV[/i] Y angle in degrees (FOV means Field of View), and the [i]near[/i] and [i]far[/i] clip planes in worldspace units.
            </summary>
        </member>
        <member name="M:GodotEngine.Camera.set_orthogonal(System.Single,System.Single,System.Single)">
            <summary>
            Set the camera projection to orthogonal mode, by specifying a width and the [i]near[/i] and [i]far[/i] clip planes in worldspace units. (As a hint, 2D games often use this projection, with values specified in pixels)
            </summary>
        </member>
        <member name="M:GodotEngine.Camera.make_current">
            <summary>
            Make this camera the current Camera for the [Viewport] (see class description). If the Camera Node is outside the scene tree, it will attempt to become current once it's added.
            </summary>
        </member>
        <member name="M:GodotEngine.Camera.is_current">
            <summary>
            Return whether the Camera is the current one in the [Viewport], or plans to become current (if outside the scene tree).
            </summary>
        </member>
        <member name="M:GodotEngine.Camera.get_camera_transform">
            <summary>
            Get the camera transform. Subclassed cameras (such as CharacterCamera) may provide different transforms than the [Node] transform.
            </summary>
        </member>
        <member name="T:GodotEngine.Camera2D">
            <summary>
            Camera node for 2D scenes. It forces the screen (current layer) to scroll following this node. This makes it easier (and faster) to program scrollable scenes than manually changing the position of [CanvasItem] based nodes.
            This node is intended to be a simple helper get get things going quickly and it may happen often that more functionality is desired to change how the camera works. To make your own custom camera node, simply inherit from [Node2D] and change the transform of the canvas by calling get_viewport().set_canvas_transform(m) in [Viewport].
            </summary>
        </member>
        <member name="M:GodotEngine.Camera2D.set_offset(GodotEngine.Vector2)">
            <summary>
            Set the scroll offset. Useful for looking around or camera shake animations.
            </summary>
        </member>
        <member name="M:GodotEngine.Camera2D.get_offset">
            <summary>
            Return the scroll offset.
            </summary>
        </member>
        <member name="M:GodotEngine.Camera2D.make_current">
            <summary>
            Make this the current 2D camera for the scene (viewport and layer), in case there's many cameras in the scene.
            </summary>
        </member>
        <member name="M:GodotEngine.Camera2D.is_current">
            <summary>
            Return true of this is the current camera (see [method make_current]).
            </summary>
        </member>
        <member name="M:GodotEngine.Camera2D.set_limit(System.Int32,System.Int32)">
            <summary>
            Set the scrolling limit in pixels.
            </summary>
        </member>
        <member name="M:GodotEngine.Camera2D.get_limit(System.Int32)">
            <summary>
            Return the scrolling limit in pixels.
            </summary>
        </member>
        <member name="M:GodotEngine.Camera2D.set_limit_smoothing_enabled(System.Boolean)">
            <summary>
            Smooth camera when reaching camera limits.
            This requires camera smoothing being enabled to have a noticeable effect.
            </summary>
        </member>
        <member name="M:GodotEngine.Camera2D.set_drag_margin(System.Int32,System.Single)">
            <summary>
            Set the margins needed to drag the camera (relative to the screen size). Margin uses the MARGIN_* enum. Drag margins of 0,0,0,0 will keep the camera at the center of the screen, while drag margins of 1,1,1,1 will only move when the camera is at the edges.
            </summary>
        </member>
        <member name="M:GodotEngine.Camera2D.get_drag_margin(System.Int32)">
            <summary>
            Return the margins needed to drag the camera (see [method set_drag_margin]).
            </summary>
        </member>
        <member name="M:GodotEngine.Camera2D.get_camera_pos">
            <summary>
            Return the camera position.
            </summary>
        </member>
        <member name="M:GodotEngine.Camera2D.force_update_scroll">
            <summary>
            Force the camera to update scroll immediately.
            </summary>
        </member>
        <member name="M:GodotEngine.Camera2D.reset_smoothing">
            <summary>
            Set the camera's position immediately to its current smoothing destination.
            This has no effect if smoothing is disabled.
            </summary>
        </member>
        <member name="M:GodotEngine.Camera2D.align">
            <summary>
            Align the camera to the tracked node
            </summary>
        </member>
        <member name="T:GodotEngine.CanvasItem">
            <summary>
            Base class of anything 2D. Canvas items are laid out in a tree and children inherit and extend the transform of their parent. CanvasItem is extended by [Control], for anything GUI related, and by [Node2D] for anything 2D engine related.
            Any CanvasItem can draw. For this, the "update" function must be called, then NOTIFICATION_DRAW will be received on idle time to request redraw. Because of this, canvas items don't need to be redraw on every frame, improving the performance significantly. Several functions for drawing on the CanvasItem are provided (see draw_* functions). They can only be used inside the notification, signal or _draw() overrides function, though.
            Canvas items are draw in tree order. By default, children are on top of their parents so a root CanvasItem will be drawn behind everything (this can be changed per item though).
            Canvas items can also be hidden (hiding also their subtree). They provide many means for changing standard parameters such as opacity (for it and the subtree) and self opacity, blend mode.
            Ultimately, a transform notification can be requested, which will notify the node that its global position changed in case the parent tree changed.
            </summary>
        </member>
        <member name="F:GodotEngine.CanvasItem.BLEND_MODE_MIX">
            <summary>
            Mix blending mode. Colors are assumed to be independent of the alpha (opacity) value.
            </summary>
        </member>
        <member name="F:GodotEngine.CanvasItem.BLEND_MODE_ADD">
            <summary>
            Additive blending mode.
            </summary>
        </member>
        <member name="F:GodotEngine.CanvasItem.BLEND_MODE_SUB">
            <summary>
            Subtractive blending mode.
            </summary>
        </member>
        <member name="F:GodotEngine.CanvasItem.BLEND_MODE_MUL">
            <summary>
            Multiplicative blending mode.
            </summary>
        </member>
        <member name="F:GodotEngine.CanvasItem.BLEND_MODE_PREMULT_ALPHA">
            <summary>
            Mix blending mode. Colors are assumed to be premultiplied by the alpha (opacity) value.
            </summary>
        </member>
        <member name="F:GodotEngine.CanvasItem.NOTIFICATION_DRAW">
            <summary>
            CanvasItem is requested to draw.
            </summary>
        </member>
        <member name="F:GodotEngine.CanvasItem.NOTIFICATION_VISIBILITY_CHANGED">
            <summary>
            Canvas item visibility has changed.
            </summary>
        </member>
        <member name="F:GodotEngine.CanvasItem.NOTIFICATION_ENTER_CANVAS">
            <summary>
            Canvas item has entered the canvas.
            </summary>
        </member>
        <member name="F:GodotEngine.CanvasItem.NOTIFICATION_EXIT_CANVAS">
            <summary>
            Canvas item has exited the canvas.
            </summary>
        </member>
        <member name="F:GodotEngine.CanvasItem.NOTIFICATION_TRANSFORM_CHANGED">
            <summary>
            Canvas item transform has changed. Only received if requested.
            </summary>
        </member>
        <member name="M:GodotEngine.CanvasItem.edit_set_state(System.Object)">
            <summary>
            Set the transform state of this CanvasItem. For [Node2D], this is an [Array] with (in order) a [Vector2] for position, a float for rotation (radians) and another [Vector2] for scale. For [Control] this is a [Rect2] with the position and size.
            </summary>
        </member>
        <member name="M:GodotEngine.CanvasItem.edit_get_state">
            <summary>
            Used for editing, returns an opaque value representing the transform state.
            </summary>
        </member>
        <member name="M:GodotEngine.CanvasItem.edit_rotate(System.Single)">
            <summary>
            Used for editing, handle rotation.
            </summary>
        </member>
        <member name="M:GodotEngine.CanvasItem.get_item_rect">
            <summary>
            Return a rect containing the editable boundaries of the item.
            </summary>
        </member>
        <member name="M:GodotEngine.CanvasItem.get_item_and_children_rect">
            <summary>
            Get a [Rect2] with the boundaries of this item and its children.
            </summary>
        </member>
        <member name="M:GodotEngine.CanvasItem.get_canvas_item">
            <summary>
            Return the canvas item RID used by [VisualServer] for this item.
            </summary>
        </member>
        <member name="M:GodotEngine.CanvasItem.set_visible(System.Boolean)">
            <summary>
            Set whether this item should be visible or not.
            Note that a hidden CanvasItem will make all children hidden too, so no matter what is set here this item won't be shown if its parent or grandparents nodes are hidden.
            </summary>
        </member>
        <member name="M:GodotEngine.CanvasItem.is_visible">
            <summary>
            Return true if this CanvasItem is visible. It may be invisible because itself or a parent canvas item is hidden.
            </summary>
        </member>
        <member name="M:GodotEngine.CanvasItem.show">
            <summary>
            Show the CanvasItem currently hidden.
            </summary>
        </member>
        <member name="M:GodotEngine.CanvasItem.hide">
            <summary>
            Hide the CanvasItem currently visible.
            </summary>
        </member>
        <member name="M:GodotEngine.CanvasItem.update">
            <summary>
            Queue the CanvasItem for update. [code]NOTIFICATION_DRAW[/code] will be called on idle time to request redraw.
            </summary>
        </member>
        <member name="M:GodotEngine.CanvasItem.set_as_toplevel(System.Boolean)">
            <summary>
            Set as top level. This means that it will not inherit transform from parent canvas items.
            </summary>
        </member>
        <member name="M:GodotEngine.CanvasItem.is_set_as_toplevel">
            <summary>
            Return if set as toplevel. See [method set_as_toplevel].
            </summary>
        </member>
        <member name="M:GodotEngine.CanvasItem.set_light_mask(System.Int32)">
            <summary>
            Set the ligtht mask number of this item.
            </summary>
        </member>
        <member name="M:GodotEngine.CanvasItem.get_light_mask">
            <summary>
            Get this item's light mask number.
            </summary>
        </member>
        <member name="M:GodotEngine.CanvasItem.set_modulate(GodotEngine.Color)">
            <summary>
            Set the modulate of the CanvasItem. This [i]affects[/i] the modulation of children items.
            </summary>
        </member>
        <member name="M:GodotEngine.CanvasItem.get_modulate">
            <summary>
            Get the modulate of the CanvasItem, which affects children items too.
            </summary>
        </member>
        <member name="M:GodotEngine.CanvasItem.set_self_modulate(GodotEngine.Color)">
            <summary>
            Set the self-modulate of the CanvasItem. This does not affect the modulation of children items.
            </summary>
        </member>
        <member name="M:GodotEngine.CanvasItem.get_self_modulate">
            <summary>
            Get the self-modulate of the CanvasItem.
            </summary>
        </member>
        <member name="M:GodotEngine.CanvasItem.set_draw_behind_parent(System.Boolean)">
            <summary>
            Set whether the canvas item is drawn behind its parent.
            </summary>
        </member>
        <member name="M:GodotEngine.CanvasItem.is_draw_behind_parent_enabled">
            <summary>
            Return whether the item is drawn behind its parent.
            </summary>
        </member>
        <member name="M:GodotEngine.CanvasItem.draw_line(GodotEngine.Vector2,GodotEngine.Vector2,GodotEngine.Color,System.Single,System.Boolean)">
            <summary>
            Draw a line from a 2D point to another, with a given color and width. It can be optionally antialiased.
            </summary>
        </member>
        <member name="M:GodotEngine.CanvasItem.draw_rect(GodotEngine.Rect2,GodotEngine.Color,System.Boolean)">
            <summary>
            Draw a colored rectangle.
            </summary>
        </member>
        <member name="M:GodotEngine.CanvasItem.draw_circle(GodotEngine.Vector2,System.Single,GodotEngine.Color)">
            <summary>
            Draw a colored circle.
            </summary>
        </member>
        <member name="M:GodotEngine.CanvasItem.draw_texture(GodotEngine.Texture,GodotEngine.Vector2,System.Nullable{GodotEngine.Color},GodotEngine.Texture)">
            <summary>
            Draw a texture at a given position.
            <param name="modulate">If the param is null, then the default value is new Color(1, 1, 1, 1)</param>
            </summary>
        </member>
        <member name="M:GodotEngine.CanvasItem.draw_texture_rect(GodotEngine.Texture,GodotEngine.Rect2,System.Boolean,System.Nullable{GodotEngine.Color},System.Boolean,GodotEngine.Texture)">
            <summary>
            Draw a textured rectangle at a given position, optionally modulated by a color. Transpose swaps the x and y coordinates when reading the texture.
            <param name="modulate">If the param is null, then the default value is new Color(1, 1, 1, 1)</param>
            </summary>
        </member>
        <member name="M:GodotEngine.CanvasItem.draw_texture_rect_region(GodotEngine.Texture,GodotEngine.Rect2,GodotEngine.Rect2,System.Nullable{GodotEngine.Color},System.Boolean,GodotEngine.Texture,System.Boolean)">
            <summary>
            Draw a textured rectangle region at a given position, optionally modulated by a color. Transpose swaps the x and y coordinates when reading the texture.
            <param name="modulate">If the param is null, then the default value is new Color(1, 1, 1, 1)</param>
            </summary>
        </member>
        <member name="M:GodotEngine.CanvasItem.draw_style_box(GodotEngine.StyleBox,GodotEngine.Rect2)">
            <summary>
            Draw a styled rectangle.
            </summary>
        </member>
        <member name="M:GodotEngine.CanvasItem.draw_primitive(GodotEngine.Vector2[],GodotEngine.Color[],GodotEngine.Vector2[],GodotEngine.Texture,System.Single,GodotEngine.Texture)">
            <summary>
            Draw a custom primitive, 1 point for a point, 2 points for a line, 3 points for a triangle and 4 points for a quad.
            </summary>
        </member>
        <member name="M:GodotEngine.CanvasItem.draw_polygon(GodotEngine.Vector2[],GodotEngine.Color[],GodotEngine.Vector2[],GodotEngine.Texture,GodotEngine.Texture)">
            <summary>
            Draw a polygon of any amount of points, convex or concave.
            <param name="uvs">If the param is null, then the default value is new Vector2[] {}</param>
            </summary>
        </member>
        <member name="M:GodotEngine.CanvasItem.draw_colored_polygon(GodotEngine.Vector2[],GodotEngine.Color,GodotEngine.Vector2[],GodotEngine.Texture,GodotEngine.Texture)">
            <summary>
            Draw a colored polygon of any amount of points, convex or concave.
            <param name="uvs">If the param is null, then the default value is new Vector2[] {}</param>
            </summary>
        </member>
        <member name="M:GodotEngine.CanvasItem.draw_string(GodotEngine.Font,GodotEngine.Vector2,System.String,System.Nullable{GodotEngine.Color},System.Int32)">
            <summary>
            Draw a string using a custom font.
            <param name="modulate">If the param is null, then the default value is new Color(1, 1, 1, 1)</param>
            </summary>
        </member>
        <member name="M:GodotEngine.CanvasItem.draw_char(GodotEngine.Font,GodotEngine.Vector2,System.String,System.String,System.Nullable{GodotEngine.Color})">
            <summary>
            Draw a string character using a custom font. Returns the advance, depending on the char width and kerning with an optional next char.
            <param name="modulate">If the param is null, then the default value is new Color(1, 1, 1, 1)</param>
            </summary>
        </member>
        <member name="M:GodotEngine.CanvasItem.draw_set_transform(GodotEngine.Vector2,System.Single,GodotEngine.Vector2)">
            <summary>
            Set a custom transform for drawing. Anything drawn afterwards will be transformed by this.
            </summary>
        </member>
        <member name="M:GodotEngine.CanvasItem.get_transform">
            <summary>
            Get the transform matrix of this item.
            </summary>
        </member>
        <member name="M:GodotEngine.CanvasItem.get_global_transform">
            <summary>
            Get the global transform matrix of this item.
            </summary>
        </member>
        <member name="M:GodotEngine.CanvasItem.get_global_transform_with_canvas">
            <summary>
            Get the global transform matrix of this item in relation to the canvas.
            </summary>
        </member>
        <member name="M:GodotEngine.CanvasItem.get_viewport_transform">
            <summary>
            Get this item's transform in relation to the viewport.
            </summary>
        </member>
        <member name="M:GodotEngine.CanvasItem.get_viewport_rect">
            <summary>
            Get the viewport's boundaries as a [Rect2].
            </summary>
        </member>
        <member name="M:GodotEngine.CanvasItem.get_canvas_transform">
            <summary>
            Get the transform matrix of this item's canvas.
            </summary>
        </member>
        <member name="M:GodotEngine.CanvasItem.get_local_mouse_pos">
            <summary>
            Get the mouse position relative to this item's position.
            </summary>
        </member>
        <member name="M:GodotEngine.CanvasItem.get_global_mouse_position">
            <summary>
            Get the global position of the mouse.
            </summary>
        </member>
        <member name="M:GodotEngine.CanvasItem.get_canvas">
            <summary>
            Return the [RID] of the [World2D] canvas where this item is in.
            </summary>
        </member>
        <member name="M:GodotEngine.CanvasItem.get_world_2d">
            <summary>
            Get the [World2D] where this item is in.
            </summary>
        </member>
        <member name="M:GodotEngine.CanvasItem.set_material(GodotEngine.Material)">
            <summary>
            Set the material of this item.
            </summary>
        </member>
        <member name="M:GodotEngine.CanvasItem.get_material">
            <summary>
            Get the material of this item.
            </summary>
        </member>
        <member name="M:GodotEngine.CanvasItem.set_use_parent_material(System.Boolean)">
            <summary>
            Set whether or not this item should use its parent's material.
            </summary>
        </member>
        <member name="M:GodotEngine.CanvasItem.get_use_parent_material">
            <summary>
            Get whether this item uses its parent's material.
            </summary>
        </member>
        <member name="T:GodotEngine.CanvasLayer">
            <summary>
            Canvas Item layer. [CanvasItem] nodes that are direct or indirect children of a [CanvasLayer] will be drawn in that layer. The layer is a numeric index that defines the draw order. The default 2D scene renders with index 0, so a [CanvasLayer] with index -1 will be drawn below, and one with index 1 will be drawn above. This is very useful for HUDs (in layer 1+ or above), or backgrounds (in layer -1 or below).
            </summary>
        </member>
        <member name="M:GodotEngine.CanvasLayer.set_layer(System.Int32)">
            <summary>
            Set the layer index, determines the draw order, a lower value will be below a higher one.
            </summary>
        </member>
        <member name="M:GodotEngine.CanvasLayer.get_layer">
            <summary>
            Return the layer index, determines the draw order, a lower value will be below a higher one.
            </summary>
        </member>
        <member name="M:GodotEngine.CanvasLayer.set_transform(GodotEngine.Transform2D)">
            <summary>
            Set the base transform for this layer.
            </summary>
        </member>
        <member name="M:GodotEngine.CanvasLayer.get_transform">
            <summary>
            Return the base transform for this layer.
            </summary>
        </member>
        <member name="M:GodotEngine.CanvasLayer.set_offset(GodotEngine.Vector2)">
            <summary>
            Set the base offset for this layer (helper).
            </summary>
        </member>
        <member name="M:GodotEngine.CanvasLayer.get_offset">
            <summary>
            Return the base offset for this layer (helper).
            </summary>
        </member>
        <member name="M:GodotEngine.CanvasLayer.set_rotation(System.Single)">
            <summary>
            Set the base rotation for this layer in radians (helper).
            </summary>
        </member>
        <member name="M:GodotEngine.CanvasLayer.get_rotation">
            <summary>
            Return the base rotation for this layer in radians (helper).
            </summary>
        </member>
        <member name="M:GodotEngine.CanvasLayer.set_rotationd(System.Single)">
            <summary>
            Set the base rotation for this layer in degrees (helper).
            </summary>
        </member>
        <member name="M:GodotEngine.CanvasLayer.get_rotationd">
            <summary>
            Return the base rotation for this layer in degrees.
            </summary>
        </member>
        <member name="M:GodotEngine.CanvasLayer.set_scale(GodotEngine.Vector2)">
            <summary>
            Set the base scale for this layer (helper).
            </summary>
        </member>
        <member name="M:GodotEngine.CanvasLayer.get_scale">
            <summary>
            Return the base scale for this layer (helper).
            </summary>
        </member>
        <member name="M:GodotEngine.CanvasLayer.get_world_2d">
            <summary>
            Return the [World2D] used by this layer.
            </summary>
        </member>
        <member name="T:GodotEngine.CanvasModulate">
            <summary>
            CanvasModulate tints the canvas elements using its assigned color
            </summary>
        </member>
        <member name="M:GodotEngine.CanvasModulate.set_color(GodotEngine.Color)">
            <summary>
            Sets the canvas tint color
            </summary>
        </member>
        <member name="M:GodotEngine.CanvasModulate.get_color">
            <summary>
            Gets the canvas tint color
            </summary>
        </member>
        <member name="T:GodotEngine.CapsuleShape">
            <summary>
            Capsule shape resource, which can be set into a [PhysicsBody] or area.
            </summary>
        </member>
        <member name="M:GodotEngine.CapsuleShape.set_radius(System.Single)">
            <summary>
            Set the capsule radius.
            </summary>
        </member>
        <member name="M:GodotEngine.CapsuleShape.get_radius">
            <summary>
            Return the capsule radius.
            </summary>
        </member>
        <member name="M:GodotEngine.CapsuleShape.set_height(System.Single)">
            <summary>
            Set the capsule height.
            </summary>
        </member>
        <member name="M:GodotEngine.CapsuleShape.get_height">
            <summary>
            Return the capsule height.
            </summary>
        </member>
        <member name="T:GodotEngine.CapsuleShape2D">
            <summary>
            Capsule 2D shape resource for physics. A capsule (or sometimes called "pill") is like a line grown in all directions. It has a radius and a height, and is often useful for modeling biped characters.
            </summary>
        </member>
        <member name="M:GodotEngine.CapsuleShape2D.set_radius(System.Single)">
            <summary>
            Set the radius of the [CapsuleShape2D].
            </summary>
        </member>
        <member name="M:GodotEngine.CapsuleShape2D.get_radius">
            <summary>
            Return the radius of the [CapsuleShape2D].
            </summary>
        </member>
        <member name="M:GodotEngine.CapsuleShape2D.set_height(System.Single)">
            <summary>
            Set the height of the [CapsuleShape2D].
            </summary>
        </member>
        <member name="M:GodotEngine.CapsuleShape2D.get_height">
            <summary>
            Return the height of the [CapsuleShape2D].
            </summary>
        </member>
        <member name="T:GodotEngine.CenterContainer">
            <summary>
            CenterContainer Keeps children controls centered. This container keeps all children to their minimum size, in the center.
            </summary>
        </member>
        <member name="M:GodotEngine.CenterContainer.set_use_top_left(System.Boolean)">
            <summary>
            This function will anchor the container children to the top left corner of the the container boundaries, moving all its children to that position, (the children new center will be the top left corner of the container).
            </summary>
        </member>
        <member name="M:GodotEngine.CenterContainer.is_using_top_left">
            <summary>
            Should put children to the top left corner instead of center of the container.
            </summary>
        </member>
        <member name="T:GodotEngine.CheckBox">
            <summary>
            A checkbox allows the user to make a binary choice (choosing only one of two posible options), for example Answer 'yes' or 'no'.
            </summary>
        </member>
        <member name="T:GodotEngine.CheckButton">
            <summary>
            CheckButton is a toggle button displayed as a check field.
            </summary>
        </member>
        <member name="T:GodotEngine.CircleShape2D">
            <summary>
            Circular Shape for 2D Physics. This shape is useful for modeling balls or small characters and its collision detection with everything else is very fast.
            </summary>
        </member>
        <member name="M:GodotEngine.CircleShape2D.set_radius(System.Single)">
            <summary>
            Set the radius of the circle shape.
            </summary>
        </member>
        <member name="M:GodotEngine.CircleShape2D.get_radius">
            <summary>
            Return the radius of the circle shape.
            </summary>
        </member>
        <member name="M:GodotEngine.CollisionObject.create_shape_owner(GodotEngine.Object)">
            <summary>
            Creates new holder for the shapes. Argument is a [CollisionShape] node. It will return owner_id which usually you will want to save for later use.
            </summary>
        </member>
        <member name="M:GodotEngine.CollisionObject.get_shape_owners">
            <summary>
            Shape owner is a node which is holding concrete shape resources. This method will return an array which is holding an integer numbers that are representing unique ID of each owner. You can use those ids when you are using others shape_owner methods.
            </summary>
        </member>
        <member name="M:GodotEngine.CollisionObject.shape_owner_get_transform(System.Int32)">
            <summary>
            Will return [Transform] of an owner node.
            </summary>
        </member>
        <member name="M:GodotEngine.CollisionObject.shape_owner_get_shape_count(System.Int32)">
            <summary>
            Returns number of shapes to which given owner is associated to.
            </summary>
        </member>
        <member name="M:GodotEngine.CollisionObject.shape_owner_get_shape(System.Int32,System.Int32)">
            <summary>
            Will return a [Shape]. First argument owner_id is an integer that can be obtained from [method get_shape_owners]. Shape_id is a position of the shape inside owner; it's a value in range from 0 to [method shape_owner_get_shape_count].
            </summary>
        </member>
        <member name="M:GodotEngine.CollisionObject.shape_owner_remove_shape(System.Int32,System.Int32)">
            <summary>
            Removes related shape from the owner.
            </summary>
        </member>
        <member name="M:GodotEngine.CollisionObject.shape_owner_clear_shapes(System.Int32)">
            <summary>
            Will remove all the shapes associated with given owner.
            </summary>
        </member>
        <member name="T:GodotEngine.CollisionObject2D">
            <summary>
            CollisionObject2D is the base class for 2D physics collisionables. They can hold any number of 2D collision shapes. Usually, they are edited by placing [CollisionShape2D] and/or [CollisionPolygon2D] nodes as children. Such nodes are for reference and not present outside the editor, so code should use the regular shape API.
            </summary>
        </member>
        <member name="M:GodotEngine.CollisionObject2D.get_rid">
            <summary>
            Return the RID of this object.
            </summary>
        </member>
        <member name="M:GodotEngine.CollisionObject2D.set_pickable(System.Boolean)">
            <summary>
            Set whether this object is pickable. A pickable object can detect the mouse pointer enter/leave it and, if the mouse is inside it, report input events.
            </summary>
        </member>
        <member name="M:GodotEngine.CollisionObject2D.is_pickable">
            <summary>
            Return whether this object is pickable.
            </summary>
        </member>
        <member name="M:GodotEngine.CollisionObject2D.create_shape_owner(GodotEngine.Object)">
            <summary>
            Creates new holder for the shapes. Argument is a [CollisionShape2D] node. It will return owner_id which usually you will want to save for later use.
            </summary>
        </member>
        <member name="M:GodotEngine.CollisionObject2D.get_shape_owners">
            <summary>
            Shape owner is a node which is holding concrete shape resources. This method will return an array which is holding an integer numbers that are representing unique ID of each owner. You can use those ids when you are using others shape_owner methods.
            </summary>
        </member>
        <member name="M:GodotEngine.CollisionObject2D.shape_owner_get_transform(System.Int32)">
            <summary>
            Will return [Transform2D] of an owner node.
            </summary>
        </member>
        <member name="M:GodotEngine.CollisionObject2D.shape_owner_get_shape_count(System.Int32)">
            <summary>
            Returns number of shapes to which given owner is associated to.
            </summary>
        </member>
        <member name="M:GodotEngine.CollisionObject2D.shape_owner_get_shape(System.Int32,System.Int32)">
            <summary>
            Will return a [Shape2D]. First argument owner_id is an integer that can be obtained from [method get_shape_owners]. Shape_id is a position of the shape inside owner; it's a value in range from 0 to [method shape_owner_get_shape_count].
            </summary>
        </member>
        <member name="M:GodotEngine.CollisionObject2D.shape_owner_remove_shape(System.Int32,System.Int32)">
            <summary>
            Removes related shape from the owner.
            </summary>
        </member>
        <member name="M:GodotEngine.CollisionObject2D.shape_owner_clear_shapes(System.Int32)">
            <summary>
            Will remove all the shapes associated with given owner.
            </summary>
        </member>
        <member name="T:GodotEngine.CollisionPolygon2D">
            <summary>
            Editor-only class. This is not present when running the game. It's used in the editor to properly edit and position collision shapes in [CollisionObject2D]. This is not accessible from regular code. This class is for editing custom shape polygons.
            </summary>
        </member>
        <member name="M:GodotEngine.CollisionPolygon2D.set_polygon(GodotEngine.Vector2[])">
            <summary>
            Set the array of points forming the polygon.
            When editing the point list via the editor, depending on [method get_build_mode], it has to be a list of points (for [code]build_mode==0[/code]), or a list of lines (for [code]build_mode==1[/code]). In the second case, the even elements of the array define the start point of the line, and the odd elements the end point.
            </summary>
        </member>
        <member name="M:GodotEngine.CollisionPolygon2D.get_polygon">
            <summary>
            Return the list of points that define the polygon.
            </summary>
        </member>
        <member name="M:GodotEngine.CollisionPolygon2D.set_build_mode(System.Int32)">
            <summary>
            Set whether the polygon is to be a [ConvexPolygonShape2D] ([code]build_mode==0[/code]), or a [ConcavePolygonShape2D] ([code]build_mode==1[/code]).
            </summary>
        </member>
        <member name="M:GodotEngine.CollisionPolygon2D.get_build_mode">
            <summary>
            Return whether the polygon is a [ConvexPolygonShape2D] ([code]build_mode==0[/code]), or a [ConcavePolygonShape2D] ([code]build_mode==1[/code]).
            </summary>
        </member>
        <member name="T:GodotEngine.CollisionShape2D">
            <summary>
            Editor-only class. This is not present when running the game. It's used in the editor to properly edit and position collision shapes in [CollisionObject2D]. This is not accessible from regular code.
            </summary>
        </member>
        <member name="M:GodotEngine.CollisionShape2D.get_shape">
            <summary>
            Return this shape's [Shape2D].
            </summary>
        </member>
        <member name="T:GodotEngine.ColorPicker">
            <summary>
            This is a simple color picker [Control]. It's useful for selecting a color from an RGB/RGBA colorspace.
            </summary>
        </member>
        <member name="M:GodotEngine.ColorPicker.set_pick_color(GodotEngine.Color)">
            <summary>
            Select the current color.
            </summary>
        </member>
        <member name="M:GodotEngine.ColorPicker.get_pick_color">
            <summary>
            Gets the current color.
            </summary>
        </member>
        <member name="M:GodotEngine.ColorPicker.set_raw_mode(System.Boolean)">
            <summary>
            Set whether this color picker is using raw mode or not, see [method is_raw_mode].
            </summary>
        </member>
        <member name="M:GodotEngine.ColorPicker.is_raw_mode">
            <summary>
            Returns whether this color picker is in raw mode or not, raw mode will allow the color R, G, B component values to go beyond 1, you have to consider that the max value for color components is 1, going beyond that value will not have effect in the color, but can be used for special operations that require it (like tinting without darkening or rendering sprites in HDR).
            </summary>
        </member>
        <member name="M:GodotEngine.ColorPicker.set_edit_alpha(System.Boolean)">
            <summary>
            Set true if you want the color to have an alpha channel (transparency), or false if you want a solid color.
            </summary>
        </member>
        <member name="M:GodotEngine.ColorPicker.is_editing_alpha">
            <summary>
            Returns whether the color has transparency or not.
            </summary>
        </member>
        <member name="M:GodotEngine.ColorPicker.add_preset(GodotEngine.Color)">
            <summary>
            Adds the current selected to color to a list of colors (presets), the presets will be displayed in the color picker and the user will be able to select them, notice that the presets list is only for this color picker.
            </summary>
        </member>
        <member name="T:GodotEngine.ColorPickerButton">
            <summary>
            Encapsulates a [ColorPicker] making it accesible by pressing a button, pressing the button will toggle the [ColorPicker] visibility
            </summary>
        </member>
        <member name="M:GodotEngine.ColorPickerButton.set_edit_alpha(System.Boolean)">
            <summary>
            See [method ColorPicker.set_edit_alpha]
            </summary>
        </member>
        <member name="M:GodotEngine.ColorPickerButton.is_editing_alpha">
            <summary>
            See [method ColorPicker.is_edit_alpha]
            </summary>
        </member>
        <member name="T:GodotEngine.ConcavePolygonShape">
            <summary>
            Concave polygon shape resource, which can be set into a [PhysicsBody] or area. This shape is created by feeding a list of triangles.
            </summary>
        </member>
        <member name="M:GodotEngine.ConcavePolygonShape.set_faces(GodotEngine.Vector3[])">
            <summary>
            Set the faces (an array of triangles).
            </summary>
        </member>
        <member name="M:GodotEngine.ConcavePolygonShape.get_faces">
            <summary>
            Return the faces (an array of triangles).
            </summary>
        </member>
        <member name="T:GodotEngine.ConcavePolygonShape2D">
            <summary>
            Concave polygon 2D shape resource for physics. It is made out of segments and is very optimal for complex polygonal concave collisions. It is really not advised to use for [RigidBody2D] nodes. A CollisionPolygon2D in convex decomposition mode (solids) or several convex objects are advised for that instead. Otherwise, a concave polygon 2D shape is better for static collisions.
            The main difference between a [ConvexPolygonShape2D] and a [ConcavePolygonShape2D] is that a concave polygon assumes it is concave and uses a more complex method of collision detection, and a convex one forces itself to be convex in order to speed up collision detection.
            </summary>
        </member>
        <member name="M:GodotEngine.ConcavePolygonShape2D.set_segments(GodotEngine.Vector2[])">
            <summary>
            Set the array of segments.
            </summary>
        </member>
        <member name="M:GodotEngine.ConcavePolygonShape2D.get_segments">
            <summary>
            Return the array of segments.
            </summary>
        </member>
        <member name="T:GodotEngine.ConfigFile">
            <summary>
            This helper class can be used to store [Variant] values on the filesystem using an INI-style formatting. The stored values as referenced by a section and a key. The stored data can be saved to or parsed from a file, though ConfigFile objects can also be used directly with accessing the filesystem.
            The following example shows how to parse a INI-style file from the system, read its contents and store new values in it:
            [codeblock]
            var config = ConfigFile.new()
            var err = config.load("user://settings.cfg")
            if err == OK: # if not, something went wrong with the file loading
            # Look for the display/width pair, and default to 1024 if missing
            var screen_width = get_value("display", "width", 1024)
            # Store a variable if and only it hasn't been defined yet
            if not config.has_section_key("audio", "mute"):
            config.set_value("audio", "mute", false)
            # Save the changes by overwriting the previous file
            config.save("user://settings.cfg")
            [/codeblock]
            </summary>
        </member>
        <member name="M:GodotEngine.ConfigFile.set_value(System.String,System.String,System.Object)">
            <summary>
            Assign a value to the specified key of the the specified section. If the section and/or the key do not exist, they are created. Passing a [code]NULL[/code] value deletes the specified key if it exists (and deletes the section if it ends up empty once the key has been removed).
            </summary>
        </member>
        <member name="M:GodotEngine.ConfigFile.get_value(System.String,System.String,System.Object)">
            <summary>
            Return the current value for the specified section and key. If the section and/or the key do not exist, the method returns the value of the optional [i]default[/i] argument (and thus [code]NULL[/code] if not specified).
            </summary>
        </member>
        <member name="M:GodotEngine.ConfigFile.has_section(System.String)">
            <summary>
            Check if the specified section exists.
            </summary>
        </member>
        <member name="M:GodotEngine.ConfigFile.has_section_key(System.String,System.String)">
            <summary>
            Check if the specified section-key pair exists.
            </summary>
        </member>
        <member name="M:GodotEngine.ConfigFile.get_sections">
            <summary>
            Return an array of all defined section identifiers.
            </summary>
        </member>
        <member name="M:GodotEngine.ConfigFile.get_section_keys(System.String)">
            <summary>
            Return an array of all defined key identifiers in the specified section.
            </summary>
        </member>
        <member name="M:GodotEngine.ConfigFile.load(System.String)">
            <summary>
            Load the config file specified as a parameter. The file's contents are parsed and loaded in the ConfigFile object from which the method was called. The return value is one of the OK, FAILED or ERR_* constants listed in [@Global Scope] (if the load was successful, it returns OK).
            </summary>
        </member>
        <member name="M:GodotEngine.ConfigFile.save(System.String)">
            <summary>
            Save the contents of the ConfigFile object to the file specified as a parameter. The output file uses an INI-style structure.
            The return value is one of the OK, FAILED or ERR_* constants listed in [@Global Scope] (if the save was successful, it returns OK).
            </summary>
        </member>
        <member name="T:GodotEngine.ConfirmationDialog">
            <summary>
            Dialog for confirmation of actions. This dialog inherits from [AcceptDialog], but has by default an OK and Cancel button (in host OS order).
            </summary>
        </member>
        <member name="M:GodotEngine.ConfirmationDialog.get_cancel">
            <summary>
            Return the cancel button.
            </summary>
        </member>
        <member name="T:GodotEngine.Container">
            <summary>
            Base node for containers. A [Container] contains other controls and automatically arranges them in a certain way.
            A Control can inherit this to create custom container classes.
            </summary>
        </member>
        <member name="F:GodotEngine.Container.NOTIFICATION_SORT_CHILDREN">
            <summary>
            Notification for when sorting the children, it must be obeyed immediately.
            </summary>
        </member>
        <member name="M:GodotEngine.Container.queue_sort">
            <summary>
            Queue resort of the contained children. This is called automatically anyway, but can be called upon request.
            </summary>
        </member>
        <member name="M:GodotEngine.Container.fit_child_in_rect(GodotEngine.Control,GodotEngine.Rect2)">
            <summary>
            Fit a child control in a given rect. This is mainly a helper for creating custom container classes.
            </summary>
        </member>
        <member name="T:GodotEngine.Control">
            <summary>
            Control is the base class Node for all the GUI components. Every GUI component inherits from it, directly or indirectly. In this way, sections of the scene tree made of contiguous control nodes, become user interfaces.
            Controls are relative to the parent position and size by using anchors and margins. This ensures that they can adapt easily in most situation to changing dialog and screen sizes. When more flexibility is desired, [Container] derived nodes can be used.
            Anchors work by defining which margin do they follow, and a value relative to it. Allowed anchoring modes are ANCHOR_BEGIN, where the margin is relative to the top or left margins of the parent (in pixels), ANCHOR_END for the right and bottom margins of the parent and ANCHOR_RATIO, which is a ratio from 0 to 1 in the parent range.
            Input device events are first sent to the root controls via the [method Node._input], which distribute it through the tree, then delivers them to the adequate one (under cursor or keyboard focus based) by calling [method MainLoop._input_event]. There is no need to enable input processing on controls to receive such events. To ensure that no one else will receive the event (not even [method Node._unhandled_input]), the control can accept it by calling [method accept_event].
            Only one control can hold the keyboard focus (receiving keyboard events), for that the control must define the focus mode with [method set_focus_mode]. Focus is lost when another control gains it, or the current focus owner is hidden.
            It is sometimes desired for a control to ignore mouse/pointer events. This is often the case when placing other controls on top of a button, in such cases. Calling [method set_ignore_mouse] enables this function.
            Finally, controls are skinned according to a [Theme]. Setting a [Theme] on a control will propagate all the skinning down the tree. Optionally, skinning can be overridden per each control by calling the add_*_override functions, or from the editor.
            </summary>
        </member>
        <member name="F:GodotEngine.Control.ANCHOR_BEGIN">
            <summary>
            X is relative to MARGIN_LEFT, Y is relative to MARGIN_TOP.
            </summary>
        </member>
        <member name="F:GodotEngine.Control.ANCHOR_END">
            <summary>
            X is relative to -MARGIN_RIGHT, Y is relative to -MARGIN_BOTTOM.
            </summary>
        </member>
        <member name="F:GodotEngine.Control.FOCUS_NONE">
            <summary>
            Control can't acquire focus.
            </summary>
        </member>
        <member name="F:GodotEngine.Control.FOCUS_CLICK">
            <summary>
            Control can acquire focus only if clicked.
            </summary>
        </member>
        <member name="F:GodotEngine.Control.FOCUS_ALL">
            <summary>
            Control can acquire focus if clicked, or by pressing TAB/Directionals in the keyboard from another Control.
            </summary>
        </member>
        <member name="F:GodotEngine.Control.NOTIFICATION_RESIZED">
            <summary>
            Control changed size (get_size() reports the new size).
            </summary>
        </member>
        <member name="F:GodotEngine.Control.NOTIFICATION_MOUSE_ENTER">
            <summary>
            Mouse pointer entered the area of the Control.
            </summary>
        </member>
        <member name="F:GodotEngine.Control.NOTIFICATION_MOUSE_EXIT">
            <summary>
            Mouse pointer exited the area of the Control.
            </summary>
        </member>
        <member name="F:GodotEngine.Control.NOTIFICATION_FOCUS_ENTER">
            <summary>
            Control gained focus.
            </summary>
        </member>
        <member name="F:GodotEngine.Control.NOTIFICATION_FOCUS_EXIT">
            <summary>
            Control lost focus.
            </summary>
        </member>
        <member name="F:GodotEngine.Control.NOTIFICATION_THEME_CHANGED">
            <summary>
            Theme changed. Redrawing is desired.
            </summary>
        </member>
        <member name="F:GodotEngine.Control.NOTIFICATION_MODAL_CLOSE">
            <summary>
            Modal control was closed.
            </summary>
        </member>
        <member name="M:GodotEngine.Control.accept_event">
            <summary>
            Handles the event, no other control will receive it and it will not be sent to nodes waiting on [method Node._unhandled_input] or [method Node._unhandled_key_input].
            </summary>
        </member>
        <member name="M:GodotEngine.Control.get_minimum_size">
            <summary>
            Return the minimum size this Control can shrink to. A control will never be displayed or resized smaller than its minimum size.
            </summary>
        </member>
        <member name="M:GodotEngine.Control.set_anchor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Change the anchor (ANCHOR_BEGIN, ANCHOR_END, ANCHOR_RATIO) type for a margin (MARGIN_LEFT, MARGIN_TOP, MARGIN_RIGHT, MARGIN_BOTTOM). Changing the anchor mode converts the current margin offset from the previous anchor mode to the new one, so margin offsets ([method set_margin]) must be done after setting anchors, or at the same time ([method set_anchor_and_margin])
            Additionally, [code]keep_margin[/code] controls whether margins should be left the same, or changed to keep the same position and size on-screen.
            </summary>
        </member>
        <member name="M:GodotEngine.Control.get_anchor(System.Int32)">
            <summary>
            Return the anchor type (ANCHOR_BEGIN, ANCHOR_END, ANCHOR_RATIO) for a given margin (MARGIN_LEFT, MARGIN_TOP, MARGIN_RIGHT, MARGIN_BOTTOM).
            </summary>
        </member>
        <member name="M:GodotEngine.Control.set_margin(System.Int32,System.Single)">
            <summary>
            Set a margin offset. Margin can be one of (MARGIN_LEFT, MARGIN_TOP, MARGIN_RIGHT, MARGIN_BOTTOM). Offset value being set depends on the anchor mode.
            </summary>
        </member>
        <member name="M:GodotEngine.Control.set_anchor_and_margin(System.Int32,System.Int32,System.Single)">
            <summary>
            Change the anchor (ANCHOR_BEGIN, ANCHOR_END, ANCHOR_RATIO) type for a margin (MARGIN_LEFT, MARGIN_TOP, MARGIN_RIGHT, MARGIN_BOTTOM), and also set its offset. This is a helper (see [method set_anchor] and [method set_margin]).
            </summary>
        </member>
        <member name="M:GodotEngine.Control.set_begin(GodotEngine.Vector2)">
            <summary>
            Sets MARGIN_LEFT and MARGIN_TOP at the same time. This is a helper (see [method set_margin]).
            </summary>
        </member>
        <member name="M:GodotEngine.Control.set_end(GodotEngine.Vector2)">
            <summary>
            Sets MARGIN_RIGHT and MARGIN_BOTTOM at the same time. This is a helper (see [method set_margin]).
            </summary>
        </member>
        <member name="M:GodotEngine.Control.set_position(GodotEngine.Vector2)">
            <summary>
            Move the Control to a new position, relative to the top-left corner of the parent Control, changing all margins if needed and without changing current anchor mode. This is a helper (see [method set_margin]).
            </summary>
        </member>
        <member name="M:GodotEngine.Control.set_size(GodotEngine.Vector2)">
            <summary>
            Changes MARGIN_RIGHT and MARGIN_BOTTOM to fit a given size. This is a helper (see [method set_margin]).
            </summary>
        </member>
        <member name="M:GodotEngine.Control.set_global_position(GodotEngine.Vector2)">
            <summary>
            Move the Control to a new position, relative to the top-left corner of the [i]window[/i] Control, and without changing current anchor mode. (see [method set_margin]).
            </summary>
        </member>
        <member name="M:GodotEngine.Control.set_rotation(System.Single)">
            <summary>
            Set the rotation (in radians).
            </summary>
        </member>
        <member name="M:GodotEngine.Control.set_rotation_deg(System.Single)">
            <summary>
            Set the rotation (in degrees).
            </summary>
        </member>
        <member name="M:GodotEngine.Control.get_margin(System.Int32)">
            <summary>
            Return a margin offset. Margin can be one of (MARGIN_LEFT, MARGIN_TOP, MARGIN_RIGHT, MARGIN_BOTTOM). Offset value being returned depends on the anchor mode.
            </summary>
        </member>
        <member name="M:GodotEngine.Control.get_end">
            <summary>
            Returns MARGIN_LEFT and MARGIN_TOP at the same time. This is a helper (see [method set_margin]).
            </summary>
        </member>
        <member name="M:GodotEngine.Control.get_position">
            <summary>
            Returns the Control position, relative to the top-left corner of the parent Control and independent of the anchor mode.
            </summary>
        </member>
        <member name="M:GodotEngine.Control.get_size">
            <summary>
            Returns the size of the Control, computed from all margins, however the size returned will [b]never be smaller than the minimum size reported by[/b] [method get_minimum_size]. This means that even if end position of the Control rectangle is smaller than the begin position, the Control will still display and interact correctly. (see description, [method get_minimum_size], [method set_margin], [method set_anchor]).
            </summary>
        </member>
        <member name="M:GodotEngine.Control.get_rotation">
            <summary>
            Return the rotation (in radians)
            </summary>
        </member>
        <member name="M:GodotEngine.Control.get_rotation_deg">
            <summary>
            Return the rotation (in degrees)
            </summary>
        </member>
        <member name="M:GodotEngine.Control.get_global_position">
            <summary>
            Returns the Control position, relative to the top-left corner of the parent Control and independent of the anchor mode.
            </summary>
        </member>
        <member name="M:GodotEngine.Control.get_rect">
            <summary>
            Return position and size of the Control, relative to the top-left corner of the parent Control. This is a helper (see [method get_position], [method get_size]).
            </summary>
        </member>
        <member name="M:GodotEngine.Control.get_global_rect">
            <summary>
            Return position and size of the Control, relative to the top-left corner of the [i]window[/i] Control. This is a helper (see [method get_global_position], [method get_size]).
            </summary>
        </member>
        <member name="M:GodotEngine.Control.set_area_as_parent_rect(System.Int32)">
            <summary>
            Change all margins and anchors, so this Control always takes up the same area as the parent Control. This is a helper (see [method set_anchor], [method set_margin]).
            </summary>
        </member>
        <member name="M:GodotEngine.Control.show_modal(System.Boolean)">
            <summary>
            Display a Control as modal. Control must be a subwindow. Modal controls capture the input signals until closed or the area outside them is accessed. When a modal control loses focus, or the ESC key is pressed, they automatically hide. Modal controls are used extensively for popup dialogs and menus.
            </summary>
        </member>
        <member name="M:GodotEngine.Control.set_focus_mode(System.Int32)">
            <summary>
            Set the focus access mode for the control (FOCUS_NONE, FOCUS_CLICK, FOCUS_ALL). Only one Control can be focused at the same time, and it will receive keyboard signals.
            </summary>
        </member>
        <member name="M:GodotEngine.Control.get_focus_mode">
            <summary>
            Returns the focus access mode for the control (FOCUS_NONE, FOCUS_CLICK, FOCUS_ALL) (see [method set_focus_mode]).
            </summary>
        </member>
        <member name="M:GodotEngine.Control.has_focus">
            <summary>
            Return whether the Control is the current focused control (see [method set_focus_mode]).
            </summary>
        </member>
        <member name="M:GodotEngine.Control.grab_focus">
            <summary>
            Steal the focus from another control and become the focused control (see [method set_focus_mode]).
            </summary>
        </member>
        <member name="M:GodotEngine.Control.release_focus">
            <summary>
            Give up the focus, no other control will be able to receive keyboard input.
            </summary>
        </member>
        <member name="M:GodotEngine.Control.get_focus_owner">
            <summary>
            Return which control is owning the keyboard focus, or null if no one.
            </summary>
        </member>
        <member name="M:GodotEngine.Control.set_h_size_flags(System.Int32)">
            <summary>
            Hint for containers, set horizontal positioning flags.
            </summary>
        </member>
        <member name="M:GodotEngine.Control.get_h_size_flags">
            <summary>
            Hint for containers, return horizontal positioning flags.
            </summary>
        </member>
        <member name="M:GodotEngine.Control.set_stretch_ratio(System.Single)">
            <summary>
            Hint for containers, set the stretch ratio. This value is relative to other stretch ratio, so if this control has 2 and another has 1, this one will be twice as big.
            </summary>
        </member>
        <member name="M:GodotEngine.Control.get_stretch_ratio">
            <summary>
            Hint for containers, return the stretch ratio. This value is relative to other stretch ratio, so if this control has 2 and another has 1, this one will be twice as big.
            </summary>
        </member>
        <member name="M:GodotEngine.Control.set_v_size_flags(System.Int32)">
            <summary>
            Hint for containers, set vertical positioning flags.
            </summary>
        </member>
        <member name="M:GodotEngine.Control.get_v_size_flags">
            <summary>
            Hint for containers, return vertical positioning flags.
            </summary>
        </member>
        <member name="M:GodotEngine.Control.set_theme(GodotEngine.Theme)">
            <summary>
            Override whole the [Theme] for this Control and all its children controls.
            </summary>
        </member>
        <member name="M:GodotEngine.Control.get_theme">
            <summary>
            Return a [Theme] override, if one exists (see [method set_theme]).
            </summary>
        </member>
        <member name="M:GodotEngine.Control.add_icon_override(System.String,GodotEngine.Texture)">
            <summary>
            Override a single icon ([Texture]) in the theme of this Control. If texture is empty, override is cleared.
            </summary>
        </member>
        <member name="M:GodotEngine.Control.add_style_override(System.String,GodotEngine.StyleBox)">
            <summary>
            Override a single stylebox ([Stylebox]) in the theme of this Control. If stylebox is empty, override is cleared.
            </summary>
        </member>
        <member name="M:GodotEngine.Control.add_font_override(System.String,GodotEngine.Font)">
            <summary>
            Override a single font (font) in the theme of this Control. If font is empty, override is cleared.
            </summary>
        </member>
        <member name="M:GodotEngine.Control.add_constant_override(System.String,System.Int32)">
            <summary>
            Override a single constant (integer) in the theme of this Control. If constant equals Theme.INVALID_CONSTANT, override is cleared.
            </summary>
        </member>
        <member name="M:GodotEngine.Control.set_tooltip(System.String)">
            <summary>
            Set a tooltip, which will appear when the cursor is resting over this control.
            </summary>
        </member>
        <member name="M:GodotEngine.Control.get_tooltip(System.Nullable{GodotEngine.Vector2})">
            <summary>
            Return the tooltip, which will appear when the cursor is resting over this control.
            <param name="atpos">If the param is null, then the default value is new Vector2(0, 0)</param>
            </summary>
        </member>
        <member name="M:GodotEngine.Control.set_default_cursor_shape(System.Int32)">
            <summary>
            Set the default cursor shape for this control. See enum CURSOR_* for the list of shapes.
            </summary>
        </member>
        <member name="M:GodotEngine.Control.get_default_cursor_shape">
            <summary>
            Return the default cursor shape for this control. See enum CURSOR_* for the list of shapes.
            </summary>
        </member>
        <member name="M:GodotEngine.Control.get_cursor_shape(System.Nullable{GodotEngine.Vector2})">
            <summary>
            Return the cursor shape at a certain position in the control.
            <param name="pos">If the param is null, then the default value is new Vector2(0, 0)</param>
            </summary>
        </member>
        <member name="M:GodotEngine.Control.set_focus_neighbour(System.Int32,GodotEngine.NodePath)">
            <summary>
            Force a neighbour for moving the input focus to. When pressing TAB or directional/joypad directions focus is moved to the next control in that direction. However, the neighbour to move to can be forced with this function.
            </summary>
        </member>
        <member name="M:GodotEngine.Control.get_focus_neighbour(System.Int32)">
            <summary>
            Return the forced neighbour for moving the input focus to. When pressing TAB or directional/joypad directions focus is moved to the next control in that direction. However, the neighbour to move to can be forced with this function.
            </summary>
        </member>
        <member name="M:GodotEngine.Control.set_mouse_filter(System.Int32)">
            <summary>
            Set when the control is ignoring mouse events (even touchpad events send mouse events). (see the MOUSE_FILTER_* constants)
            </summary>
        </member>
        <member name="M:GodotEngine.Control.get_mouse_filter">
            <summary>
            Return when the control is ignoring mouse events (even touchpad events send mouse events).
            </summary>
        </member>
        <member name="T:GodotEngine.ConvexPolygonShape">
            <summary>
            Convex polygon shape resource, which can be set into a [PhysicsBody] or area.
            </summary>
        </member>
        <member name="T:GodotEngine.ConvexPolygonShape2D">
            <summary>
            Convex Polygon Shape for 2D physics. A convex polygon, whatever its shape, is internally decomposed into as many convex polygons as needed to ensure all collision checks against it are always done on convex polygons (which are faster to check).
            The main difference between a [ConvexPolygonShape2D] and a [ConcavePolygonShape2D] is that a concave polygon assumes it is concave and uses a more complex method of collision detection, and a convex one forces itself to be convex in order to speed up collision detection.
            </summary>
        </member>
        <member name="M:GodotEngine.ConvexPolygonShape2D.set_point_cloud(GodotEngine.Vector2[])">
            <summary>
            Currently, this method does nothing.
            </summary>
        </member>
        <member name="M:GodotEngine.ConvexPolygonShape2D.set_points(GodotEngine.Vector2[])">
            <summary>
            Set a list of points in either clockwise or counter clockwise order, forming a convex polygon.
            </summary>
        </member>
        <member name="M:GodotEngine.ConvexPolygonShape2D.get_points">
            <summary>
            Return a list of points in either clockwise or counter clockwise order, forming a convex polygon.
            </summary>
        </member>
        <member name="T:GodotEngine.Curve2D">
            <summary>
            This class describes a Bezier curve in 2D space. It is mainly used to give a shape to a [Path2D], but can be manually sampled for other purposes.
            It keeps a cache of precalculated points along the curve, to speed further calculations up.
            </summary>
        </member>
        <member name="M:GodotEngine.Curve2D.get_point_count">
            <summary>
            Returns the number of points describing the curve.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:GodotEngine.Curve2D.add_point(GodotEngine.Vector2,System.Nullable{GodotEngine.Vector2},System.Nullable{GodotEngine.Vector2},System.Int32)" -->
        <member name="M:GodotEngine.Curve2D.set_point_pos(System.Int32,GodotEngine.Vector2)">
            <summary>
            Sets the position for the vertex "idx". If the index is out of bounds, the function sends an error to the console.
            </summary>
        </member>
        <member name="M:GodotEngine.Curve2D.get_point_pos(System.Int32)">
            <summary>
            Returns the position of the vertex "idx". If the index is out of bounds, the function sends an error to the console, and returns (0, 0).
            </summary>
        </member>
        <member name="M:GodotEngine.Curve2D.set_point_in(System.Int32,GodotEngine.Vector2)">
            <summary>
            Sets the position of the control point leading to the vertex "idx". If the index is out of bounds, the function sends an error to the console.
            </summary>
        </member>
        <member name="M:GodotEngine.Curve2D.get_point_in(System.Int32)">
            <summary>
            Returns the position of the control point leading to the vertex "idx". If the index is out of bounds, the function sends an error to the console, and returns (0, 0).
            </summary>
        </member>
        <member name="M:GodotEngine.Curve2D.set_point_out(System.Int32,GodotEngine.Vector2)">
            <summary>
            Sets the position of the control point leading out of the vertex "idx". If the index is out of bounds, the function sends an error to the console.
            </summary>
        </member>
        <member name="M:GodotEngine.Curve2D.get_point_out(System.Int32)">
            <summary>
            Returns the position of the control point leading out of the vertex "idx". If the index is out of bounds, the function sends an error to the console, and returns (0, 0).
            </summary>
        </member>
        <member name="M:GodotEngine.Curve2D.remove_point(System.Int32)">
            <summary>
            Deletes the point "idx" from the curve. Sends an error to the console if "idx" is out of bounds.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:GodotEngine.Curve2D.interpolate(System.Int32,System.Single)" -->
        <member name="M:GodotEngine.Curve2D.interpolatef(System.Single)">
            <summary>
            Returns the position at the vertex "fofs". It calls [method interpolate] using the integer part of fofs as "idx", and its fractional part as "t".
            </summary>
        </member>
        <member name="M:GodotEngine.Curve2D.set_bake_interval(System.Single)">
            <summary>
            Sets the distance in pixels between two adjacent cached points. Changing it forces the cache to be recomputed the next time a xxx_baked_xxx function is called. The less distance, the more points the cache will have, and the more memory it will consume, so use with care.
            </summary>
        </member>
        <member name="M:GodotEngine.Curve2D.get_bake_interval">
            <summary>
            Returns the distance between two adjacent cached points.
            </summary>
        </member>
        <member name="M:GodotEngine.Curve2D.get_baked_length">
            <summary>
            Returns the total length of the curve, based on the cached points. Given enough density (see [method set_bake_interval]), it should be approximate enough.
            </summary>
        </member>
        <member name="M:GodotEngine.Curve2D.interpolate_baked(System.Single,System.Boolean)">
            <summary>
            Returns a point within the curve at position "offset", where "offset" is measured as a pixel distance along the curve.
            To do that, it finds the two cached points where the "offset" lies between, then interpolates the values. This interpolation is cubic if "cubic" is set to true, or linear if set to false.
            Cubic interpolation tends to follow the curves better, but linear is faster (and often, precise enough).
            </summary>
        </member>
        <member name="M:GodotEngine.Curve2D.get_baked_points">
            <summary>
            Returns the cache of points as a [PoolVector2Array].
            </summary>
        </member>
        <member name="T:GodotEngine.Curve3D">
            <summary>
            This class describes a Bezier curve in 3D space. It is mainly used to give a shape to a [Path], but can be manually sampled for other purposes.
            It keeps a cache of precalculated points along the curve, to speed further calculations up.
            </summary>
        </member>
        <member name="M:GodotEngine.Curve3D.get_point_count">
            <summary>
            Returns the number of points describing the curve.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:GodotEngine.Curve3D.add_point(GodotEngine.Vector3,System.Nullable{GodotEngine.Vector3},System.Nullable{GodotEngine.Vector3},System.Int32)" -->
        <member name="M:GodotEngine.Curve3D.set_point_pos(System.Int32,GodotEngine.Vector3)">
            <summary>
            Sets the position for the vertex "idx". If the index is out of bounds, the function sends an error to the console.
            </summary>
        </member>
        <member name="M:GodotEngine.Curve3D.get_point_pos(System.Int32)">
            <summary>
            Returns the position of the vertex "idx". If the index is out of bounds, the function sends an error to the console, and returns (0, 0, 0).
            </summary>
        </member>
        <member name="M:GodotEngine.Curve3D.set_point_tilt(System.Int32,System.Single)">
            <summary>
            Sets the tilt angle in radians for the point "idx". If the index is out of bounds, the function sends an error to the console.
            The tilt controls the rotation along the look-at axis an object traveling the path would have. In the case of a curve controlling a [PathFollow], this tilt is an offset over the natural tilt the PathFollow calculates.
            </summary>
        </member>
        <member name="M:GodotEngine.Curve3D.get_point_tilt(System.Int32)">
            <summary>
            Returns the tilt angle in radians for the point "idx". If the index is out of bounds, the function sends an error to the console, and returns 0.
            </summary>
        </member>
        <member name="M:GodotEngine.Curve3D.set_point_in(System.Int32,GodotEngine.Vector3)">
            <summary>
            Sets the position of the control point leading to the vertex "idx". If the index is out of bounds, the function sends an error to the console.
            </summary>
        </member>
        <member name="M:GodotEngine.Curve3D.get_point_in(System.Int32)">
            <summary>
            Returns the position of the control point leading to the vertex "idx". If the index is out of bounds, the function sends an error to the console, and returns (0, 0, 0).
            </summary>
        </member>
        <member name="M:GodotEngine.Curve3D.set_point_out(System.Int32,GodotEngine.Vector3)">
            <summary>
            Sets the position of the control point leading out of the vertex "idx". If the index is out of bounds, the function sends an error to the console.
            </summary>
        </member>
        <member name="M:GodotEngine.Curve3D.get_point_out(System.Int32)">
            <summary>
            Returns the position of the control point leading out of the vertex "idx". If the index is out of bounds, the function sends an error to the console, and returns (0, 0, 0).
            </summary>
        </member>
        <member name="M:GodotEngine.Curve3D.remove_point(System.Int32)">
            <summary>
            Deletes the point "idx" from the curve. Sends an error to the console if "idx" is out of bounds.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:GodotEngine.Curve3D.interpolate(System.Int32,System.Single)" -->
        <member name="M:GodotEngine.Curve3D.interpolatef(System.Single)">
            <summary>
            Returns the position at the vertex "fofs". It calls [method interpolate] using the integer part of fofs as "idx", and its fractional part as "t".
            </summary>
        </member>
        <member name="M:GodotEngine.Curve3D.set_bake_interval(System.Single)">
            <summary>
            Sets the distance in 3D units between two adjacent cached points. Changing it forces the cache to be recomputed the next time a xxx_baked_xxx function is called. The less distance, the more points the cache will have, and the more memory it will consume, so use with care.
            </summary>
        </member>
        <member name="M:GodotEngine.Curve3D.get_bake_interval">
            <summary>
            Returns the distance between two adjacent cached points.
            </summary>
        </member>
        <member name="M:GodotEngine.Curve3D.get_baked_length">
            <summary>
            Returns the total length of the curve, based on the cached points. Given enough density (see [method set_bake_interval]), it should be approximate enough.
            </summary>
        </member>
        <member name="M:GodotEngine.Curve3D.interpolate_baked(System.Single,System.Boolean)">
            <summary>
            Returns a point within the curve at position "offset", where "offset" is measured as a distance in 3D units along the curve.
            To do that, it finds the two cached points where the "offset" lies between, then interpolates the values. This interpolation is cubic if "cubic" is set to true, or linear if set to false.
            Cubic interpolation tends to follow the curves better, but linear is faster (and often, precise enough).
            </summary>
        </member>
        <member name="M:GodotEngine.Curve3D.get_baked_points">
            <summary>
            Returns the cache of points as a [PoolVector3Array].
            </summary>
        </member>
        <member name="M:GodotEngine.Curve3D.get_baked_tilts">
            <summary>
            Returns the cache of tilts as a [RealArray].
            </summary>
        </member>
        <member name="T:GodotEngine.DampedSpringJoint2D">
            <summary>
            Damped spring constraint for 2D physics. This resembles a spring joint that always wants to go back to a given length.
            </summary>
        </member>
        <member name="M:GodotEngine.DampedSpringJoint2D.set_length(System.Single)">
            <summary>
            Set the maximum length of the spring joint.
            </summary>
        </member>
        <member name="M:GodotEngine.DampedSpringJoint2D.get_length">
            <summary>
            Return the maximum length of the spring joint.
            </summary>
        </member>
        <member name="M:GodotEngine.DampedSpringJoint2D.set_rest_length(System.Single)">
            <summary>
            Set the resting length of the spring joint. The joint will always try to go to back this length when pulled apart.
            </summary>
        </member>
        <member name="M:GodotEngine.DampedSpringJoint2D.get_rest_length">
            <summary>
            Return the resting length of the spring joint. The joint will always try to go to back this length when pulled apart.
            </summary>
        </member>
        <member name="M:GodotEngine.DampedSpringJoint2D.set_stiffness(System.Single)">
            <summary>
            Set the stiffness of the spring joint. The joint applies a force equal to the stiffness times the distance from its resting length.
            </summary>
        </member>
        <member name="M:GodotEngine.DampedSpringJoint2D.get_stiffness">
            <summary>
            Return the stiffness of the spring joint. The joint applies a force equal to the stiffness times the distance from its resting length.
            </summary>
        </member>
        <member name="M:GodotEngine.DampedSpringJoint2D.set_damping(System.Single)">
            <summary>
            Set the damping ratio of the spring joint. A value of 0 indicates an undamped spring, while 1 causes the system to reach equilibrium as fast as possible (critical damping).
            </summary>
        </member>
        <member name="M:GodotEngine.DampedSpringJoint2D.get_damping">
            <summary>
            Return the damping ratio of the spring joint. A value of 0 indicates an undamped spring, while 1 causes the system to reach equilibrium as fast as possible (critical damping).
            </summary>
        </member>
        <member name="T:GodotEngine.DirectionalLight">
            <summary>
            A DirectionalLight is a type of [Light] node that emits light constantly in one direction (the negative z axis of the node). It is used lights with strong intensity that are located far away from the scene to model sunlight or moonlight. The worldspace location of the DirectionalLight transform (origin) is ignored, only the basis is used do determine light direction.
            </summary>
        </member>
        <member name="T:GodotEngine.FileDialog">
            <summary>
            FileDialog is a preset dialog used to choose files and directories in the filesystem. It supports filter masks.
            </summary>
        </member>
        <member name="F:GodotEngine.FileDialog.MODE_OPEN_FILE">
            <summary>
            The dialog allows the selection of one, and only one file.
            </summary>
        </member>
        <member name="F:GodotEngine.FileDialog.MODE_OPEN_FILES">
            <summary>
            The dialog allows the selection of multiple files.
            </summary>
        </member>
        <member name="F:GodotEngine.FileDialog.MODE_OPEN_DIR">
            <summary>
            The dialog functions as a folder selector, disallowing the selection of any file.
            </summary>
        </member>
        <member name="F:GodotEngine.FileDialog.MODE_OPEN_ANY">
            <summary>
            The dialog allows the selection of a file or a directory.
            </summary>
        </member>
        <member name="F:GodotEngine.FileDialog.MODE_SAVE_FILE">
            <summary>
            The dialog will warn when a file exists.
            </summary>
        </member>
        <member name="F:GodotEngine.FileDialog.ACCESS_RESOURCES">
            <summary>
            The dialog allows the selection of file and directory.
            </summary>
        </member>
        <member name="F:GodotEngine.FileDialog.ACCESS_USERDATA">
            <summary>
            The dialog allows ascess files under [Resource] path(res://) .
            </summary>
        </member>
        <member name="F:GodotEngine.FileDialog.ACCESS_FILESYSTEM">
            <summary>
            The dialog allows ascess files in whole file system.
            </summary>
        </member>
        <member name="M:GodotEngine.FileDialog.clear_filters">
            <summary>
            Clear all the added filters in the dialog.
            </summary>
        </member>
        <member name="M:GodotEngine.FileDialog.add_filter(System.String)">
            <summary>
            Add a custom filter. Filter format is: "mask ; description", example (C++): dialog->add_filter("*.png ; PNG Images");
            </summary>
        </member>
        <member name="M:GodotEngine.FileDialog.get_current_dir">
            <summary>
            Get the current working directory of the file dialog.
            </summary>
        </member>
        <member name="M:GodotEngine.FileDialog.get_current_file">
            <summary>
            Get the current selected file of the file dialog (empty if none).
            </summary>
        </member>
        <member name="M:GodotEngine.FileDialog.get_current_path">
            <summary>
            Get the current selected path (directory and file) of the file dialog (empty if none).
            </summary>
        </member>
        <member name="M:GodotEngine.FileDialog.set_current_dir(System.String)">
            <summary>
            Set the current working directory of the file dialog.
            </summary>
        </member>
        <member name="M:GodotEngine.FileDialog.set_current_file(System.String)">
            <summary>
            Set the current selected file name of the file dialog.
            </summary>
        </member>
        <member name="M:GodotEngine.FileDialog.set_current_path(System.String)">
            <summary>
            Set the current selected file path of the file dialog.
            </summary>
        </member>
        <member name="M:GodotEngine.FileDialog.set_mode(System.Int32)">
            <summary>
            Set the file dialog mode from the MODE_* enum.
            </summary>
        </member>
        <member name="M:GodotEngine.FileDialog.get_mode">
            <summary>
            Get the file dialog mode from the MODE_* enum.
            </summary>
        </member>
        <member name="M:GodotEngine.FileDialog.get_vbox">
            <summary>
            Return the vertical box container of the dialog, custom controls can be added to it.
            </summary>
        </member>
        <member name="M:GodotEngine.FileDialog.set_access(System.Int32)">
            <summary>
            Set the file access permission of the dialog(Must be one of [ACCESS_RESOURCES], [ACCESS_USERDATA] or [ACCESS_FILESYSTEM]).
            </summary>
        </member>
        <member name="M:GodotEngine.FileDialog.get_access">
            <summary>
            Return the file access permission of the dialog.
            </summary>
        </member>
        <member name="M:GodotEngine.FileDialog.set_show_hidden_files(System.Boolean)">
            <summary>
            Set the dialog should show hidden files.
            </summary>
        </member>
        <member name="M:GodotEngine.FileDialog.is_showing_hidden_files">
            <summary>
            Return true if the diaog allows show hidden files.
            </summary>
        </member>
        <member name="M:GodotEngine.FileDialog.invalidate">
            <summary>
            Invalidate and update the current dialog content list.
            </summary>
        </member>
        <member name="T:GodotEngine.Font">
            <summary>
            Font contains an unicode compatible character set, as well as the ability to draw it with variable width, ascent, descent and kerning. For creating fonts from TTF files (or other font formats), see the editor support for fonts. TODO check wikipedia for graph of ascent/baseline/descent/height/etc.
            </summary>
        </member>
        <member name="M:GodotEngine.Font.draw(GodotEngine.RID,GodotEngine.Vector2,System.String,System.Nullable{GodotEngine.Color},System.Int32)">
            <summary>
            Draw "string" into a canvas item using the font at a given "pos" position, with "modulate" color, and optionally clipping the width. "pos" specifies the baseline, not the top. To draw from the top, [i]ascent[/i] must be added to the Y axis.
            <param name="modulate">If the param is null, then the default value is new Color(1, 1, 1, 1)</param>
            </summary>
        </member>
        <member name="M:GodotEngine.Font.get_ascent">
            <summary>
            Return the font ascent (number of pixels above the baseline).
            </summary>
        </member>
        <member name="M:GodotEngine.Font.get_descent">
            <summary>
            Return the font descent (number of pixels below the baseline).
            </summary>
        </member>
        <member name="M:GodotEngine.Font.get_height">
            <summary>
            Return the total font height (ascent plus descent) in pixels.
            </summary>
        </member>
        <member name="M:GodotEngine.Font.get_string_size(System.String)">
            <summary>
            Return the size of a string, taking kerning and advance into account.
            </summary>
        </member>
        <member name="M:GodotEngine.Font.draw_char(GodotEngine.RID,GodotEngine.Vector2,System.Int32,System.Int32,System.Nullable{GodotEngine.Color})">
            <summary>
            Draw character "char" into a canvas item using the font at a given "pos" position, with "modulate" color, and optionally kerning if "next" is passed. clipping the width. "pos" specifies the baseline, not the top. To draw from the top, [i]ascent[/i] must be added to the Y axis. The width used by the character is returned, making this function useful for drawing strings character by character.
            <param name="modulate">If the param is null, then the default value is new Color(1, 1, 1, 1)</param>
            </summary>
        </member>
        <member name="M:GodotEngine.Font.update_changes">
            <summary>
            After editing a font (changing size, ascent, char rects, etc.). Call this function to propagate changes to controls that might use it.
            </summary>
        </member>
        <member name="T:GodotEngine.FuncRef">
            <summary>
            In GDScript, functions are not [i]first-class objects[/i]. This means it is impossible to store them directly as variables, return them from another function, or pass them as arguments.
            However, by creating a [FuncRef] using the [method @GDScript.funcref] function, a reference to a function in a given object can be created, passed around and called.
            </summary>
        </member>
        <member name="M:GodotEngine.FuncRef.set_instance(GodotEngine.Object)">
            <summary>
            Set the object on which to call the referenced function. This object must be of a type actually inheriting from [Object], not a built-in type such as [int], [Vector2] or [Dictionary].
            </summary>
        </member>
        <member name="M:GodotEngine.FuncRef.set_function(System.String)">
            <summary>
            Set the name of the function to call on the object, without parentheses or any parameters.
            </summary>
        </member>
        <member name="T:GodotEngine.GDFunctionState">
            <summary>
            Calling [method @GDScript.yield] within a function will cause that function to yield and return its current state as an object of this type. The yielded function call can then be resumed later by calling [method resume] on this state object.
            </summary>
        </member>
        <member name="M:GodotEngine.GDFunctionState.resume(System.Object)">
            <summary>
            Resume execution of the yielded function call.
            If handed an argument, return the argument from the [method @GDScript.yield] call in the yielded function call. You can pass e.g. an [Array] to hand multiple arguments.
            This function returns what the resumed function call returns, possibly another function state if yielded again.
            </summary>
        </member>
        <member name="M:GodotEngine.GDFunctionState.is_valid(System.Boolean)">
            <summary>
            Check whether the function call may be resumed. This is not the case if the function state was already resumed.
            If [code]extended_check[/code] is enabled, it also checks if the associated script and object still exist. The extended check is done in debug mode as part of [method GDFunctionState.resume], but you can use this if you know you may be trying to resume without knowing for sure the object and/or script have survived up to that point.
            </summary>
        </member>
        <member name="T:GodotEngine.GeometryInstance">
            <summary>
            Base node for geometry based visual instances. Shares some common functionality like visibility and custom materials.
            </summary>
        </member>
        <member name="M:GodotEngine.GeometryInstance.get_material_override">
            <summary>
            Return the material override for the whole geometry.
            </summary>
        </member>
        <member name="T:GodotEngine.Gradient">
            <summary>
            Given a set of colors, this node will interpolate them in order, meaning, that if you have color 1, color 2 and color3, the ramp will interpolate (generate the colors between two colors) from color 1 to color 2 and from color 2 to color 3. Initially the ramp will have 2 colors (black and white), one (black) at ramp lower offset offset 0 and the other (white) at the ramp higher offset 1.
            </summary>
        </member>
        <member name="M:GodotEngine.Gradient.add_point(System.Single,GodotEngine.Color)">
            <summary>
            Adds the specified color to the end of the ramp, with the specified offset
            </summary>
        </member>
        <member name="M:GodotEngine.Gradient.remove_point(System.Int32)">
            <summary>
            Removes the color at the index [i]offset[/i]
            </summary>
        </member>
        <member name="M:GodotEngine.Gradient.set_offset(System.Int32,System.Single)">
            <summary>
            Sets the offset for the ramp color at index [i]point[/i]
            </summary>
        </member>
        <member name="M:GodotEngine.Gradient.get_offset(System.Int32)">
            <summary>
            Returns the offset of the ramp color at index [i]point[/i]
            </summary>
        </member>
        <member name="M:GodotEngine.Gradient.set_color(System.Int32,GodotEngine.Color)">
            <summary>
            Sets the color of the ramp color at index [i]point[/i]
            </summary>
        </member>
        <member name="M:GodotEngine.Gradient.get_color(System.Int32)">
            <summary>
            Returns the color of the ramp color at index [i]point[/i]
            </summary>
        </member>
        <member name="M:GodotEngine.Gradient.interpolate(System.Single)">
            <summary>
            Returns the interpolated color specified by [i]offset[/i]
            </summary>
        </member>
        <member name="M:GodotEngine.Gradient.get_point_count">
            <summary>
            Returns the number of colors in the ramp
            </summary>
        </member>
        <member name="M:GodotEngine.Gradient.set_offsets(System.Single[])">
            <summary>
            Sets the offset for the specified amount of elements. Calling this function with a different number of elements than previously defined causes the ramp to resize its colors and offsets array to accommodate the new elements, all new colors will be black by default.
            </summary>
        </member>
        <member name="M:GodotEngine.Gradient.get_offsets">
            <summary>
            Returns the offsets for the colors in this ramp
            </summary>
        </member>
        <member name="M:GodotEngine.Gradient.set_colors(GodotEngine.Color[])">
            <summary>
            Sets the colors for the specified amount of elements. Calling this function with a different number of elements than previously defined causes the ramp to resize its colors and offsets array to accommodate the new elements.
            </summary>
        </member>
        <member name="M:GodotEngine.Gradient.get_colors">
            <summary>
            Returns the colors in the ramp
            </summary>
        </member>
        <member name="T:GodotEngine.GraphEdit">
            <summary>
            GraphEdit manages the showing of GraphNodes it contains, as well as connections an disconnections between them. Signals are sent for each of these two events. Disconnection between GraphNodes slots is disabled by default.
            It is greatly advised to enable low processor usage mode (see [method OS.set_low_processor_usage_mode]) when using GraphEdits.
            </summary>
        </member>
        <member name="M:GodotEngine.GraphEdit.connect_node(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Create a connection between 'from_port' slot of 'from' GraphNode and 'to_port' slot of 'to' GraphNode. If the connection already exists, no connection is created.
            </summary>
        </member>
        <member name="M:GodotEngine.GraphEdit.is_node_connected(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Return true if the 'from_port' slot of 'from' GraphNode is connected to the 'to_port' slot of 'to' GraphNode.
            </summary>
        </member>
        <member name="M:GodotEngine.GraphEdit.disconnect_node(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Remove the connection between 'from_port' slot of 'from' GraphNode and 'to_port' slot of 'to' GraphNode, if connection exists.
            </summary>
        </member>
        <member name="M:GodotEngine.GraphEdit.get_connection_list">
            <summary>
            Return an Array containing the list of connections. A connection consists in a structure of the form {from_slot: 0, from: "GraphNode name 0", to_slot: 1, to: "GraphNode name 1" }
            </summary>
        </member>
        <member name="M:GodotEngine.GraphEdit.get_scroll_ofs">
            <summary>
            Return the scroll offset.
            </summary>
        </member>
        <member name="M:GodotEngine.GraphEdit.set_zoom(System.Single)">
            <summary>
            Set the zoom value of the GraphEdit. Zoom value is between [0.01; 1.728].
            </summary>
        </member>
        <member name="M:GodotEngine.GraphEdit.get_zoom">
            <summary>
            Return the current zoom value.
            </summary>
        </member>
        <member name="M:GodotEngine.GraphEdit.set_right_disconnects(System.Boolean)">
            <summary>
            Enable the disconnection of existing connections in the visual GraphEdit by left-clicking a connection and releasing into the void.
            </summary>
        </member>
        <member name="M:GodotEngine.GraphEdit.is_right_disconnects_enabled">
            <summary>
            Return true is the disconnection of connections is enable in the visual GraphEdit. False otherwise.
            </summary>
        </member>
        <member name="T:GodotEngine.GraphNode">
            <summary>
            A GraphNode is a container defined by a title. It can have 1 or more input and output slots, which can be enabled (shown) or disabled (not shown) and have different (incompatible) types. Colors can also be assigned to slots. A tuple of input and output slots is defined for each GUI element included in the GraphNode. Input and output connections are left and right slots, but only enabled slots are counted as connections.
            </summary>
        </member>
        <member name="M:GodotEngine.GraphNode.set_title(System.String)">
            <summary>
            Set the title of the GraphNode.
            </summary>
        </member>
        <member name="M:GodotEngine.GraphNode.get_title">
            <summary>
            Return the title of the GraphNode.
            </summary>
        </member>
        <member name="M:GodotEngine.GraphNode.clear_slot(System.Int32)">
            <summary>
            Disable input and output slot whose index is 'idx'.
            </summary>
        </member>
        <member name="M:GodotEngine.GraphNode.clear_all_slots">
            <summary>
            Disable all input and output slots of the GraphNode.
            </summary>
        </member>
        <member name="M:GodotEngine.GraphNode.is_slot_enabled_left(System.Int32)">
            <summary>
            Return true if left (input) slot 'idx' is enabled. False otherwise.
            </summary>
        </member>
        <member name="M:GodotEngine.GraphNode.get_slot_type_left(System.Int32)">
            <summary>
            Return the (integer) type of left (input) 'idx' slot.
            </summary>
        </member>
        <member name="M:GodotEngine.GraphNode.get_slot_color_left(System.Int32)">
            <summary>
            Return the color set to 'idx' left (input) slot.
            </summary>
        </member>
        <member name="M:GodotEngine.GraphNode.is_slot_enabled_right(System.Int32)">
            <summary>
            Return true if right (output) slot 'idx' is enabled. False otherwise.
            </summary>
        </member>
        <member name="M:GodotEngine.GraphNode.get_slot_type_right(System.Int32)">
            <summary>
            Return the (integer) type of right (output) 'idx' slot.
            </summary>
        </member>
        <member name="M:GodotEngine.GraphNode.get_slot_color_right(System.Int32)">
            <summary>
            Return the color set to 'idx' right (output) slot.
            </summary>
        </member>
        <member name="M:GodotEngine.GraphNode.set_offset(GodotEngine.Vector2)">
            <summary>
            Set the offset of the GraphNode.
            </summary>
        </member>
        <member name="M:GodotEngine.GraphNode.get_offset">
            <summary>
            Return the offset of the GraphNode.
            </summary>
        </member>
        <member name="M:GodotEngine.GraphNode.get_connection_output_count">
            <summary>
            Return the number of enabled output slots (connections) of the GraphNode.
            </summary>
        </member>
        <member name="M:GodotEngine.GraphNode.get_connection_input_count">
            <summary>
            Return the number of enabled input slots (connections) to the GraphNode.
            </summary>
        </member>
        <member name="M:GodotEngine.GraphNode.get_connection_output_pos(System.Int32)">
            <summary>
            Return the position of the output connection 'idx'.
            </summary>
        </member>
        <member name="M:GodotEngine.GraphNode.get_connection_output_type(System.Int32)">
            <summary>
            Return the type of the output connection 'idx'.
            </summary>
        </member>
        <member name="M:GodotEngine.GraphNode.get_connection_output_color(System.Int32)">
            <summary>
            Return the color of the output connection 'idx'.
            </summary>
        </member>
        <member name="M:GodotEngine.GraphNode.get_connection_input_pos(System.Int32)">
            <summary>
            Return the position of the input connection 'idx'.
            </summary>
        </member>
        <member name="M:GodotEngine.GraphNode.get_connection_input_type(System.Int32)">
            <summary>
            Return the type of the input connection 'idx'.
            </summary>
        </member>
        <member name="M:GodotEngine.GraphNode.get_connection_input_color(System.Int32)">
            <summary>
            Return the color of the input connection 'idx'.
            </summary>
        </member>
        <member name="M:GodotEngine.GraphNode.set_show_close_button(System.Boolean)">
            <summary>
            Show the close button on the GraphNode if 'show' is true (disabled by default). If enabled, a connection on the signal close_request is needed for the close button to work.
            </summary>
        </member>
        <member name="M:GodotEngine.GraphNode.is_close_button_visible">
            <summary>
            Returns true if the close button is shown. False otherwise.
            </summary>
        </member>
        <member name="T:GodotEngine.GridContainer">
            <summary>
            Grid container will arrange its children in a grid like structure, the grid columns are specified using the [method set_columns] method and the number of rows will be equal to the number of children in the container divided by the number of columns, for example: if the container has 5 children, and 2 columns, there will be 3 rows in the container. Notice that grid layout will preserve the columns and rows for every size of the container.
            </summary>
        </member>
        <member name="M:GodotEngine.GridContainer.set_columns(System.Int32)">
            <summary>
            Sets the numbers of columns in the container, then reorder its children to accommodate the new layout
            </summary>
        </member>
        <member name="M:GodotEngine.GridContainer.get_columns">
            <summary>
            Returns the number of columns in this container
            </summary>
        </member>
        <member name="T:GodotEngine.GrooveJoint2D">
            <summary>
            Groove constraint for 2D physics. This is useful for making a body "slide" through a segment placed in another.
            </summary>
        </member>
        <member name="M:GodotEngine.GrooveJoint2D.set_length(System.Single)">
            <summary>
            Set the length of the groove.
            </summary>
        </member>
        <member name="M:GodotEngine.GrooveJoint2D.get_length">
            <summary>
            Return the length of the groove.
            </summary>
        </member>
        <member name="M:GodotEngine.GrooveJoint2D.set_initial_offset(System.Single)">
            <summary>
            Set the initial offset of the groove on body A.
            </summary>
        </member>
        <member name="M:GodotEngine.GrooveJoint2D.get_initial_offset">
            <summary>
            Set the final offset of the groove on body A.
            </summary>
        </member>
        <member name="T:GodotEngine.HBoxContainer">
            <summary>
            Horizontal box container. See [BoxContainer].
            </summary>
        </member>
        <member name="T:GodotEngine.HScrollBar">
            <summary>
            Horizontal scroll bar. See [ScrollBar]. This one goes from left (min) to right (max).
            </summary>
        </member>
        <member name="T:GodotEngine.HSeparator">
            <summary>
            Horizontal separator. See [Separator]. It is used to separate objects vertically, though (but it looks horizontal!).
            </summary>
        </member>
        <member name="T:GodotEngine.HSlider">
            <summary>
            Horizontal slider. See [Slider]. This one goes from left (min) to right (max).
            </summary>
        </member>
        <member name="T:GodotEngine.HSplitContainer">
            <summary>
            Horizontal split container. See [SplitContainer]. This goes from left to right.
            </summary>
        </member>
        <member name="T:GodotEngine.HTTPClient">
            <summary>
            Hyper-text transfer protocol client. Supports SSL and SSL server certificate verification.
            Can be reused to connect to different hosts and make many requests.
            </summary>
        </member>
        <member name="M:GodotEngine.HTTPClient.connect_to_host(System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Connect to a host. This needs to be done before any requests are sent.
            The host should not have http:// prepended but will strip the protocol identifier if provided.
            verify_host will check the SSL identity of the host if set to true.
            </summary>
        </member>
        <member name="M:GodotEngine.HTTPClient.set_connection(GodotEngine.StreamPeer)">
            <summary>
            Set connection to use, for this client.
            </summary>
        </member>
        <member name="M:GodotEngine.HTTPClient.get_connection">
            <summary>
            Return current connection.
            </summary>
        </member>
        <member name="M:GodotEngine.HTTPClient.request_raw(System.Int32,System.String,System.String[],System.Byte[])">
            <summary>
            Sends a raw request to the connected host. The url is what is normally behind the hostname, i.e. in [code]http://somehost.com/index.php[/code], url would be "index.php".
            Headers are HTTP request headers.
            Sends body raw, as a byte array, does not encode it in any way.
            </summary>
        </member>
        <member name="M:GodotEngine.HTTPClient.request(System.Int32,System.String,System.String[],System.String)">
            <summary>
            Sends a request to the connected host. The url is what is normally behind the hostname, i.e. in [code]http://somehost.com/index.php[/code], url would be "index.php".
            Headers are HTTP request headers.
            To create a POST request with query strings to push to the server, do:
            [codeblock]
            var fields = {"username" : "user", "password" : "pass"}
            var queryString = httpClient.query_string_from_dict(fields)
            var headers = ["Content-Type: application/x-www-form-urlencoded", "Content-Length: " + str(queryString.length())]
            var result = httpClient.request(httpClient.METHOD_POST, "index.php", headers, queryString)
            [/codeblock]
            </summary>
        </member>
        <member name="M:GodotEngine.HTTPClient.send_body_text(System.String)">
            <summary>
            Stub function
            </summary>
        </member>
        <member name="M:GodotEngine.HTTPClient.send_body_data(System.Byte[])">
            <summary>
            Stub function
            </summary>
        </member>
        <member name="M:GodotEngine.HTTPClient.close">
            <summary>
            Cloces the current connection, allows for reusal of [HTTPClient].
            </summary>
        </member>
        <member name="M:GodotEngine.HTTPClient.has_response">
            <summary>
            Return whether this [HTTPClient] has a response available.
            </summary>
        </member>
        <member name="M:GodotEngine.HTTPClient.is_response_chunked">
            <summary>
            Return whether this [HTTPClient] has a response that is chunked.
            </summary>
        </member>
        <member name="M:GodotEngine.HTTPClient.get_response_code">
            <summary>
            Return the HTTP status code of the response.
            </summary>
        </member>
        <member name="M:GodotEngine.HTTPClient.get_response_headers">
            <summary>
            Return the response headers.
            </summary>
        </member>
        <member name="M:GodotEngine.HTTPClient.get_response_headers_as_dictionary">
            <summary>
            Returns all response headers as dictionary where the case-sensitivity of the keys and values is kept like the server delivers it. A value is a simple String, this string can have more than one value where "; " is used as separator.
            Structure: ("key":"value1; value2")
            Example: (content-length:12), (Content-Type:application/json; charset=UTF-8)
            </summary>
        </member>
        <member name="M:GodotEngine.HTTPClient.get_response_body_length">
            <summary>
            Return the response's body length.
            </summary>
        </member>
        <member name="M:GodotEngine.HTTPClient.read_response_body_chunk">
            <summary>
            Reads one chunk from the response.
            </summary>
        </member>
        <member name="M:GodotEngine.HTTPClient.set_read_chunk_size(System.Int32)">
            <summary>
            Sets the size of the buffer used and maximum bytes to read per iteration. see [method read_response_body_chunk]
            </summary>
        </member>
        <member name="M:GodotEngine.HTTPClient.set_blocking_mode(System.Boolean)">
            <summary>
            If set to true, execution will block until all data is read from the response.
            </summary>
        </member>
        <member name="M:GodotEngine.HTTPClient.is_blocking_mode_enabled">
            <summary>
            Return whether blocking mode is enabled.
            </summary>
        </member>
        <member name="M:GodotEngine.HTTPClient.get_status">
            <summary>
            Returns a STATUS_* enum constant. Need to call [method poll] in order to get status updates.
            </summary>
        </member>
        <member name="M:GodotEngine.HTTPClient.poll">
            <summary>
            This needs to be called in order to have any request processed. Check results with [method get_status]
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:GodotEngine.HTTPClient.query_string_from_dict(System.Collections.Generic.Dictionary{System.Object,System.Object})" -->
        <member name="T:GodotEngine.HTTPRequest">
            <summary>
            A Node with the ability to send HTTP requests. Uses a [HTTPClient] internally, supports HTTPS.
            Can be used to make HTTP requests or download files via HTTP.
            </summary>
        </member>
        <member name="F:GodotEngine.HTTPRequest.RESULT_SUCCESS">
            <summary>
            Request successful.
            </summary>
        </member>
        <member name="F:GodotEngine.HTTPRequest.RESULT_CANT_CONNECT">
            <summary>
            Request failed while connecting.
            </summary>
        </member>
        <member name="F:GodotEngine.HTTPRequest.RESULT_CANT_RESOLVE">
            <summary>
            Request failed while resolving.
            </summary>
        </member>
        <member name="F:GodotEngine.HTTPRequest.RESULT_CONNECTION_ERROR">
            <summary>
            Request failed due to connection(read/write) error.
            </summary>
        </member>
        <member name="F:GodotEngine.HTTPRequest.RESULT_SSL_HANDSHAKE_ERROR">
            <summary>
            Request failed on SSL handshake.
            </summary>
        </member>
        <member name="F:GodotEngine.HTTPRequest.RESULT_NO_RESPONSE">
            <summary>
            Request does not have a response(yet).
            </summary>
        </member>
        <member name="F:GodotEngine.HTTPRequest.RESULT_BODY_SIZE_LIMIT_EXCEEDED">
            <summary>
            Request exceded its maximum size limit, see [method set_body_size_limit].
            </summary>
        </member>
        <member name="F:GodotEngine.HTTPRequest.RESULT_REQUEST_FAILED">
            <summary>
            Request failed. (unused)
            </summary>
        </member>
        <member name="F:GodotEngine.HTTPRequest.RESULT_DOWNLOAD_FILE_CANT_OPEN">
            <summary>
            HTTPRequest couldn't open the download file.
            </summary>
        </member>
        <member name="F:GodotEngine.HTTPRequest.RESULT_DOWNLOAD_FILE_WRITE_ERROR">
            <summary>
            HTTPRequest couldn't write to the download file.
            </summary>
        </member>
        <member name="F:GodotEngine.HTTPRequest.RESULT_REDIRECT_LIMIT_REACHED">
            <summary>
            Request reached its maximum redirect limit, see [method set_max_redirects].
            </summary>
        </member>
        <member name="M:GodotEngine.HTTPRequest.cancel_request">
            <summary>
            Cancel the current request.
            </summary>
        </member>
        <member name="M:GodotEngine.HTTPRequest.get_http_client_status">
            <summary>
            Return the current status of the underlying [HTTPClient].
            </summary>
        </member>
        <member name="M:GodotEngine.HTTPRequest.set_use_threads(System.Boolean)">
            <summary>
            Make this HTTPRequest use threads.
            </summary>
        </member>
        <member name="M:GodotEngine.HTTPRequest.is_using_threads">
            <summary>
            Whether this request is using threads.
            </summary>
        </member>
        <member name="M:GodotEngine.HTTPRequest.set_body_size_limit(System.Int32)">
            <summary>
            Set the response body size limit.
            </summary>
        </member>
        <member name="M:GodotEngine.HTTPRequest.get_body_size_limit">
            <summary>
            Return current body size limit.
            </summary>
        </member>
        <member name="M:GodotEngine.HTTPRequest.set_max_redirects(System.Int32)">
            <summary>
            Set the maximum amount of redirects the request will follow.
            </summary>
        </member>
        <member name="M:GodotEngine.HTTPRequest.get_max_redirects">
            <summary>
            Return the maximum amount of redirects that will be followed.
            </summary>
        </member>
        <member name="M:GodotEngine.HTTPRequest.set_download_file(System.String)">
            <summary>
            Set the file to download into. Outputs the response body into the file.
            </summary>
        </member>
        <member name="M:GodotEngine.HTTPRequest.get_download_file">
            <summary>
            Return the file this request will download into.
            </summary>
        </member>
        <member name="M:GodotEngine.HTTPRequest.get_downloaded_bytes">
            <summary>
            Return the amount of bytes this HTTPRequest downloaded.
            </summary>
        </member>
        <member name="M:GodotEngine.HTTPRequest.get_body_size">
            <summary>
            Return the response body length.
            </summary>
        </member>
        <member name="T:GodotEngine.IP">
            <summary>
            IP contains some support functions for the IPv4 protocol. TCP/IP support is in different classes (see [StreamPeerTCP] and [TCP_Server]). IP provides hostname resolution support, both blocking and threaded.
            </summary>
        </member>
        <member name="M:GodotEngine.IP.resolve_hostname(System.String,System.Int32)">
            <summary>
            Resolve a given hostname, blocking. Resolved hostname is returned as an IPv4 or IPv6 depending on "ip_type".
            </summary>
        </member>
        <member name="M:GodotEngine.IP.resolve_hostname_queue_item(System.String,System.Int32)">
            <summary>
            Create a queue item for resolving a given hostname to an IPv4 or IPv6 depending on "ip_type". The queue ID is returned, or RESOLVER_INVALID_ID on error.
            </summary>
        </member>
        <member name="M:GodotEngine.IP.get_resolve_item_status(System.Int32)">
            <summary>
            Return the status of hostname queued for resolving, given its queue ID. Returned status can be any of the RESOLVER_STATUS_* enumeration.
            </summary>
        </member>
        <member name="M:GodotEngine.IP.get_resolve_item_address(System.Int32)">
            <summary>
            Return a resolved item address, or an empty string if an error happened or resolution didn't happen yet (see [method get_resolve_item_status]).
            </summary>
        </member>
        <member name="M:GodotEngine.IP.erase_resolve_item(System.Int32)">
            <summary>
            Erase a queue ID, removing it from the queue if needed. This should be used after a queue is completed to free it and enable more queries to happen.
            </summary>
        </member>
        <member name="T:GodotEngine.Image">
            <summary>
            Native image datatype. Contains image data, which can be converted to a texture, and several functions to interact with it.
            </summary>
        </member>
        <member name="M:GodotEngine.Image.get_width">
            <summary>
            Return the width of the [Image].
            </summary>
        </member>
        <member name="M:GodotEngine.Image.get_height">
            <summary>
            Return the height of the [Image].
            </summary>
        </member>
        <member name="M:GodotEngine.Image.get_format">
            <summary>
            Return the format of the [Image], one of [Image].FORMAT_*.
            </summary>
        </member>
        <member name="M:GodotEngine.Image.get_data">
            <summary>
            Return the raw data of the [Image].
            </summary>
        </member>
        <member name="M:GodotEngine.Image.create(System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Create an empty image of a specific size and format.
            </summary>
        </member>
        <member name="M:GodotEngine.Image.load(System.String)">
            <summary>
            Load an [Image].
            </summary>
        </member>
        <member name="M:GodotEngine.Image.save_png(System.String)">
            <summary>
            Save this [Image] as a png.
            </summary>
        </member>
        <member name="M:GodotEngine.Image.blit_rect(GodotEngine.Image,GodotEngine.Rect2,GodotEngine.Vector2)">
            <summary>
            Copy a "src_rect" [Rect2] from "src" [Image] to this [Image] on coordinates "dest".
            </summary>
        </member>
        <member name="M:GodotEngine.Image.blit_rect_mask(GodotEngine.Image,GodotEngine.Image,GodotEngine.Rect2,GodotEngine.Vector2)">
            <summary>
            Blits a "src_rect" [Rect2] from "src" [Image] to this [Image] using a "mask" [Image] on coordinates "dest". Alpha channel is required for "mask", will copy src pixel onto dest if the corresponding mask pixel's alpha value is not 0. "src" [Image] and "mask" [Image] *must* have the same size (width and height) but they can have different formats
            </summary>
        </member>
        <member name="M:GodotEngine.Image.blend_rect(GodotEngine.Image,GodotEngine.Rect2,GodotEngine.Vector2)">
            <summary>
            Alpha-blends a "src_rect" [Rect2] from "src" [Image] to this [Image] on coordinates "dest".
            </summary>
        </member>
        <member name="M:GodotEngine.Image.blend_rect_mask(GodotEngine.Image,GodotEngine.Image,GodotEngine.Rect2,GodotEngine.Vector2)">
            <summary>
            Alpha-blends a "src_rect" [Rect2] from "src" [Image] to this [Image] using a "mask" [Image] on coordinates "dest". Alpha channels are required for both "src" and "mask", dest pixels and src pixels will blend if the corresponding mask pixel's alpha value is not 0. "src" [Image] and "mask" [Image] *must* have the same size (width and height) but they can have different formats
            </summary>
        </member>
        <member name="M:GodotEngine.Image.fill(GodotEngine.Color)">
            <summary>
            Fills an [Image] with a specified [Color]
            </summary>
        </member>
        <member name="M:GodotEngine.Image.get_used_rect">
            <summary>
            Return the area of this [Image] that is used/visibly colored/opaque.
            </summary>
        </member>
        <member name="M:GodotEngine.Image.get_rect(GodotEngine.Rect2)">
            <summary>
            Return a new [Image] that is a copy of "area" in this [Image].
            </summary>
        </member>
        <member name="T:GodotEngine.ImageTexture">
            <summary>
            A [Texture] based on an [Image]. Can be created from an [Image].
            </summary>
        </member>
        <member name="F:GodotEngine.ImageTexture.STORAGE_RAW">
            <summary>
            [Image] data is stored raw and unaltered.
            </summary>
        </member>
        <member name="F:GodotEngine.ImageTexture.STORAGE_COMPRESS_LOSSY">
            <summary>
            [Image] data is compressed with a lossy algorithm. You can set the storage quality with [method set_lossy_storage_quality].
            </summary>
        </member>
        <member name="F:GodotEngine.ImageTexture.STORAGE_COMPRESS_LOSSLESS">
            <summary>
            [Image] data is compressed with a lossless algorithm.
            </summary>
        </member>
        <member name="M:GodotEngine.ImageTexture.create(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a new [ImageTexture] with "width" and "height".
            "format" one of [Image].FORMAT_*.
            "flags" one or more of [Texture].FLAG_*.
            </summary>
        </member>
        <member name="M:GodotEngine.ImageTexture.create_from_image(GodotEngine.Image,System.Int32)">
            <summary>
            Create a new [ImageTexture] from an [Image] with "flags" from [Texture].FLAG_*.
            </summary>
        </member>
        <member name="M:GodotEngine.ImageTexture.get_format">
            <summary>
            Return the format of the [ImageTexture], one of [Image].FORMAT_*.
            </summary>
        </member>
        <member name="M:GodotEngine.ImageTexture.load(System.String)">
            <summary>
            Load an [ImageTexure].
            </summary>
        </member>
        <member name="M:GodotEngine.ImageTexture.set_data(GodotEngine.Image)">
            <summary>
            Set the [Image] of this [ImageTexture].
            </summary>
        </member>
        <member name="M:GodotEngine.ImageTexture.set_storage(System.Int32)">
            <summary>
            Set the storage type. One of [ImageTexture].STORAGE_*.
            </summary>
        </member>
        <member name="M:GodotEngine.ImageTexture.get_storage">
            <summary>
            Return the storage type. One of [ImageTexture].STORAGE_*.
            </summary>
        </member>
        <member name="M:GodotEngine.ImageTexture.set_lossy_storage_quality(System.Single)">
            <summary>
            Set the storage quality in case of [ImageTexture].STORAGE_COMPRESS_LOSSY.
            </summary>
        </member>
        <member name="M:GodotEngine.ImageTexture.get_lossy_storage_quality">
            <summary>
            Return the storage quality for [ImageTexture].STORAGE_COMPRESS_LOSSY.
            </summary>
        </member>
        <member name="M:GodotEngine.ImmediateGeometry.begin(System.Int32,GodotEngine.Texture)">
            <summary>
            Begin drawing (And optionally pass a texture override). When done call end(). For more information on how this works, search for glBegin() glEnd() references.
            For the type of primitive, use the [Mesh].PRIMITIVE_* enumerations.
            </summary>
        </member>
        <member name="M:GodotEngine.ImmediateGeometry.set_normal(GodotEngine.Vector3)">
            <summary>
            Set the normal that the next vertex will use to be drawn.
            </summary>
        </member>
        <member name="M:GodotEngine.ImmediateGeometry.set_tangent(GodotEngine.Plane)">
            <summary>
            Set the tangent (and binormal facing) that the next vertex will use to be drawn.
            </summary>
        </member>
        <member name="M:GodotEngine.ImmediateGeometry.set_color(GodotEngine.Color)">
            <summary>
            Set the color that the next vertex will use to be drawn.
            </summary>
        </member>
        <member name="M:GodotEngine.ImmediateGeometry.set_uv(GodotEngine.Vector2)">
            <summary>
            Set the UV that the next vertex will use to be drawn.
            </summary>
        </member>
        <member name="M:GodotEngine.ImmediateGeometry.set_uv2(GodotEngine.Vector2)">
            <summary>
            Set the second layer of UV that the next vertex will use to be drawn.
            </summary>
        </member>
        <member name="M:GodotEngine.ImmediateGeometry.add_vertex(GodotEngine.Vector3)">
            <summary>
            Add a vertex with the currently set color/uv/etc.
            </summary>
        </member>
        <member name="M:GodotEngine.ImmediateGeometry.add_sphere(System.Int32,System.Int32,System.Single,System.Boolean)">
            <summary>
            Simple helper to draw an uvsphere, with given latitudes, longitude and radius.
            </summary>
        </member>
        <member name="M:GodotEngine.ImmediateGeometry.end">
            <summary>
            Call this when done adding a batch of geometry, otherwise it can't be displayed.
            </summary>
        </member>
        <member name="M:GodotEngine.ImmediateGeometry.clear">
            <summary>
            Clear everything that was drawn using begin/end.
            </summary>
        </member>
        <member name="T:GodotEngine.Input">
            <summary>
            A Singleton that deals with inputs. This includes key presses, mouse buttons and movement, joypads, and input actions.
            </summary>
        </member>
        <member name="F:GodotEngine.Input.MOUSE_MODE_VISIBLE">
            <summary>
            Makes the mouse cursor visible if it is hidden.
            </summary>
        </member>
        <member name="F:GodotEngine.Input.MOUSE_MODE_HIDDEN">
            <summary>
            Makes the mouse cursor hidden if it is visible.
            </summary>
        </member>
        <member name="F:GodotEngine.Input.MOUSE_MODE_CAPTURED">
            <summary>
            Captures the mouse. The mouse will be hidden and unable to leave the game window. But it will still register movement and mouse button presses.
            </summary>
        </member>
        <member name="M:GodotEngine.Input.is_key_pressed(System.Int32)">
            <summary>
            Returns true or false depending on whether the key is pressed or not. You can pass KEY_*, which are pre-defined constants listed in [@Global Scope].
            </summary>
        </member>
        <member name="M:GodotEngine.Input.is_mouse_button_pressed(System.Int32)">
            <summary>
            Returns true or false depending on whether mouse button is pressed or not. You can pass BUTTON_*, which are pre-defined constants listed in [@Global Scope].
            </summary>
        </member>
        <member name="M:GodotEngine.Input.is_joy_button_pressed(System.Int32,System.Int32)">
            <summary>
            Returns if the joypad button at the given index is currently pressed. (see JOY_* constants in [@Global Scope])
            </summary>
        </member>
        <member name="M:GodotEngine.Input.is_action_pressed(System.String)">
            <summary>
            Returns true or false depending on whether the action event is pressed. Actions and their events can be set in the Project Settings / Input Map tab. Or be set with [InputMap].
            </summary>
        </member>
        <member name="M:GodotEngine.Input.add_joy_mapping(System.String,System.Boolean)">
            <summary>
            Add a new mapping entry (in SDL2 format) to the mapping database. Optionally update already connected devices.
            </summary>
        </member>
        <member name="M:GodotEngine.Input.remove_joy_mapping(System.String)">
            <summary>
            Removes all mappings from the internal db that match the given uid.
            </summary>
        </member>
        <member name="M:GodotEngine.Input.is_joy_known(System.Int32)">
            <summary>
            Returns if the specified device is known by the system. This means that it sets all button and axis indices exactly as defined in the JOY_* constants (see [@Global Scope]). Unknown joypads are not expected to match these constants, but you can still retrieve events from them.
            </summary>
        </member>
        <member name="M:GodotEngine.Input.get_joy_axis(System.Int32,System.Int32)">
            <summary>
            Returns the current value of the joypad axis at given index (see JOY_* constants in [@Global Scope])
            </summary>
        </member>
        <member name="M:GodotEngine.Input.get_joy_name(System.Int32)">
            <summary>
            Returns the name of the joypad at the specified device index
            </summary>
        </member>
        <member name="M:GodotEngine.Input.get_joy_guid(System.Int32)">
            <summary>
            Returns a SDL2 compatible device guid on platforms that use gamepad remapping. Returns "Default Gamepad" otherwise.
            </summary>
        </member>
        <member name="M:GodotEngine.Input.get_connected_joypads">
            <summary>
            Returns an [Array] containing the device IDs of all currently connected joypads.
            </summary>
        </member>
        <member name="M:GodotEngine.Input.get_joy_vibration_strength(System.Int32)">
            <summary>
            Returns the strength of the joypad vibration: x is the strength of the weak motor, and y is the strength of the strong motor.
            </summary>
        </member>
        <member name="M:GodotEngine.Input.get_joy_vibration_duration(System.Int32)">
            <summary>
            Returns the duration of the current vibration effect in seconds.
            </summary>
        </member>
        <member name="M:GodotEngine.Input.start_joy_vibration(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Starts to vibrate the joypad. Joypads usually come with two rumble motors, a strong and a weak one. weak_magnitude is the strength of the weak motor (between 0 and 1) and strong_magnitude is the strength of the strong motor (between 0 and 1). duration is the duration of the effect in seconds (a duration of 0 will try to play the vibration indefinitely).
            Note that not every hardware is compatible with long effect durations, it is recommended to restart an effect if in need to play it for more than a few seconds.
            </summary>
        </member>
        <member name="M:GodotEngine.Input.stop_joy_vibration(System.Int32)">
            <summary>
            Stops the vibration of the joypad.
            </summary>
        </member>
        <member name="M:GodotEngine.Input.get_accelerometer">
            <summary>
            If the device has an accelerometer, this will return the movement.
            </summary>
        </member>
        <member name="M:GodotEngine.Input.get_magnetometer">
            <summary>
            If the device has a magnetometer, this will return the magnetic field strength in micro-Tesla for all axes.
            </summary>
        </member>
        <member name="M:GodotEngine.Input.get_gyroscope">
            <summary>
            If the device has a gyroscope, this will return the rate of rotation in rad/s around a device's x, y, and z axis.
            </summary>
        </member>
        <member name="M:GodotEngine.Input.get_last_mouse_speed">
            <summary>
            Returns the mouse speed for the last time the cursor was moved, and this until the next frame where the mouse moves. This means that even if the mouse is not moving, this function will still return the value of the last motion.
            </summary>
        </member>
        <member name="M:GodotEngine.Input.get_mouse_button_mask">
            <summary>
            Returns mouse buttons as a bitmask. If multiple mouse buttons are pressed at the same time the bits are added together.
            </summary>
        </member>
        <member name="M:GodotEngine.Input.set_mouse_mode(System.Int32)">
            <summary>
            Set the mouse mode. See the constants for more information.
            </summary>
        </member>
        <member name="M:GodotEngine.Input.get_mouse_mode">
            <summary>
            Return the mouse mode. See the constants for more information.
            </summary>
        </member>
        <member name="M:GodotEngine.Input.warp_mouse_pos(GodotEngine.Vector2)">
            <summary>
            Sets the mouse position to the specified vector.
            </summary>
        </member>
        <member name="M:GodotEngine.Input.action_press(System.String)">
            <summary>
            This will simulate pressing the specificed action.
            </summary>
        </member>
        <member name="M:GodotEngine.Input.action_release(System.String)">
            <summary>
            If the specified action is already pressed, this will release it.
            </summary>
        </member>
        <member name="M:GodotEngine.InputEvent.is_pressed">
            <summary>
            Return if this input event is pressed. Not relevant for the event types MOUSE_MOTION, SCREEN_DRAG and NONE.
            </summary>
        </member>
        <member name="M:GodotEngine.InputEvent.is_action(System.String)">
            <summary>
            Return if this input event matches a pre-defined action, no matter the type.
            </summary>
        </member>
        <member name="M:GodotEngine.InputEvent.is_action_pressed(System.String)">
            <summary>
            Return whether the given action is being pressed (and is not an echo event for KEY events). Not relevant for the event types MOUSE_MOTION, SCREEN_DRAG and NONE.
            </summary>
        </member>
        <member name="M:GodotEngine.InputEvent.is_action_released(System.String)">
            <summary>
            Return whether the given action is released (i.e. not pressed). Not relevant for the event types MOUSE_MOTION, SCREEN_DRAG and NONE.
            </summary>
        </member>
        <member name="M:GodotEngine.InputEvent.is_echo">
            <summary>
            Return if this input event is an echo event (only for events of type KEY, it will return false for other types).
            </summary>
        </member>
        <member name="M:GodotEngine.InputMap.has_action(System.String)">
            <summary>
            Whether this InputMap has a registered action with the given name.
            </summary>
        </member>
        <member name="M:GodotEngine.InputMap.get_actions">
            <summary>
            Return an array of all actions in the [InputMap].
            </summary>
        </member>
        <member name="M:GodotEngine.InputMap.add_action(System.String)">
            <summary>
            Add an (empty) action to the [InputMap]. An [InputEvent] can then be added to this action with [method action_add_event].
            </summary>
        </member>
        <member name="M:GodotEngine.InputMap.erase_action(System.String)">
            <summary>
            Remove an action from the [InputMap].
            </summary>
        </member>
        <member name="M:GodotEngine.InputMap.get_action_list(System.String)">
            <summary>
            Return an array of InputEvents associated with a given action.
            </summary>
        </member>
        <member name="M:GodotEngine.InputMap.load_from_globals">
            <summary>
            Clear the [InputMap] and load it anew from [ProjectSettings].
            </summary>
        </member>
        <member name="T:GodotEngine.InstancePlaceholder">
            <summary>
            Turning on the option [b]Load As Placeholder[/b] for an instanced scene in the editor causes it to be replaced by an InstacePlaceholder when running the game. This makes it possible to delay actually loading the scene until calling [method replace_by_instance]. This is useful to avoid loading large scenes all at once by loading parts of it selectively.
            The InstancePlaceholder does not have a transform. This causes any child nodes to be positioned relatively to the Viewport from point (0,0), rather than their parent as displayed in the editor. Replacing the placeholder with a scene with a transform will transform children relatively to their parent again.
            </summary>
        </member>
        <member name="M:GodotEngine.InstancePlaceholder.replace_by_instance(GodotEngine.PackedScene)">
            <summary>
            Replace this placeholder by the scene handed as an argument, or the original scene if no argument is given. As for all resources, the scene is loaded only if it's not loaded already. By manually loading the scene beforehand, delays caused by this function can be avoided.
            </summary>
        </member>
        <member name="M:GodotEngine.InstancePlaceholder.get_instance_path">
            <summary>
            Retrieve the path to the [PackedScene] resource file that is loaded by default when calling [method replace_by_instance].
            </summary>
        </member>
        <member name="T:GodotEngine.ItemList">
            <summary>
            This control provides a selectable list of items that may be in a single (or multiple columns) with option of text, icons,
            or both text and icon.  Tooltips are supported and may be different for every item in the list.  Selectable items in the list
            may be selected or deselected and multiple selection may be enabled.  Selection with right mouse button may also be enabled
            to allow use of popup context menus.  Items may also be 'activated' with a double click (or Enter key).
            </summary>
        </member>
        <member name="M:GodotEngine.ItemList.add_item(System.String,GodotEngine.Texture,System.Boolean)">
            <summary>
            Adds an item to the item list with specified text.  Specify an icon of null for a list item with no icon.
            If selectable is true the list item will be selectable.
            </summary>
        </member>
        <member name="M:GodotEngine.ItemList.add_icon_item(GodotEngine.Texture,System.Boolean)">
            <summary>
            Adds an item to the item list with no text, only an icon.
            </summary>
        </member>
        <member name="M:GodotEngine.ItemList.set_item_text(System.Int32,System.String)">
            <summary>
            Sets text of item at specified index.
            </summary>
        </member>
        <member name="M:GodotEngine.ItemList.get_item_text(System.Int32)">
            <summary>
            Return the text for specified item index.
            </summary>
        </member>
        <member name="M:GodotEngine.ItemList.set_item_icon(System.Int32,GodotEngine.Texture)">
            <summary>
            Set (or replace) icon of the item at the specified index.
            </summary>
        </member>
        <member name="M:GodotEngine.ItemList.set_item_selectable(System.Int32,System.Boolean)">
            <summary>
            Allow or disallow selection of the item at the specified index.
            </summary>
        </member>
        <member name="M:GodotEngine.ItemList.is_item_selectable(System.Int32)">
            <summary>
            Returns whether or not the item at the specified index is selectable.
            </summary>
        </member>
        <member name="M:GodotEngine.ItemList.set_item_disabled(System.Int32,System.Boolean)">
            <summary>
            Disable (or enable) item at specified index.
            Disabled items are not be selectable and do not fire activation (Enter or double-click) signals.
            </summary>
        </member>
        <member name="M:GodotEngine.ItemList.is_item_disabled(System.Int32)">
            <summary>
            Returns whether or not the item at the specified index is disabled
            </summary>
        </member>
        <member name="M:GodotEngine.ItemList.set_item_metadata(System.Int32,System.Object)">
            <summary>
            Sets a value (of any type) to be stored with the item at the specified index.
            </summary>
        </member>
        <member name="M:GodotEngine.ItemList.set_item_tooltip_enabled(System.Int32,System.Boolean)">
            <summary>
            Sets whether the tooltip is enabled for specified item index.
            </summary>
        </member>
        <member name="M:GodotEngine.ItemList.is_item_tooltip_enabled(System.Int32)">
            <summary>
            Returns whether the tooptip is enabled for specified item index.
            </summary>
        </member>
        <member name="M:GodotEngine.ItemList.set_item_tooltip(System.Int32,System.String)">
            <summary>
            Sets tooltip hint for item at specified index.
            </summary>
        </member>
        <member name="M:GodotEngine.ItemList.get_item_tooltip(System.Int32)">
            <summary>
            Return tooltip hint for specified item index.
            </summary>
        </member>
        <member name="M:GodotEngine.ItemList.select(System.Int32,System.Boolean)">
            <summary>
            Select the item at the specified index.
            Note:  This method does not trigger the item selection signal.
            </summary>
        </member>
        <member name="M:GodotEngine.ItemList.unselect(System.Int32)">
            <summary>
            Ensure item at specified index is not selected.
            </summary>
        </member>
        <member name="M:GodotEngine.ItemList.is_selected(System.Int32)">
            <summary>
            Returns whether or not item at the specified index is currently selected.
            </summary>
        </member>
        <member name="M:GodotEngine.ItemList.get_selected_items">
            <summary>
            Returns the list of selected indexes.
            </summary>
        </member>
        <member name="M:GodotEngine.ItemList.get_item_count">
            <summary>
            Return count of items currently in the item list.
            </summary>
        </member>
        <member name="M:GodotEngine.ItemList.remove_item(System.Int32)">
            <summary>
            Remove item at specified index from the list.
            </summary>
        </member>
        <member name="M:GodotEngine.ItemList.clear">
            <summary>
            Remove all items from the list.
            </summary>
        </member>
        <member name="M:GodotEngine.ItemList.sort_items_by_text">
            <summary>
            Sorts items in the list by their text.
            </summary>
        </member>
        <member name="M:GodotEngine.ItemList.set_fixed_column_width(System.Int32)">
            <summary>
            Set the size (width) all columns in the list are to use.
            </summary>
        </member>
        <member name="M:GodotEngine.ItemList.get_fixed_column_width">
            <summary>
            If column size has been fixed to a value, return that value.
            </summary>
        </member>
        <member name="M:GodotEngine.ItemList.set_same_column_width(System.Boolean)">
            <summary>
            Sets a fixed size (width) to use for all columns of the list.
            </summary>
        </member>
        <member name="M:GodotEngine.ItemList.is_same_column_width">
            <summary>
            Returns whether or not all columns of the list are of the same size.
            </summary>
        </member>
        <member name="M:GodotEngine.ItemList.set_max_text_lines(System.Int32)">
            <summary>
            Set maximum number of lines to use for the list.
            </summary>
        </member>
        <member name="M:GodotEngine.ItemList.get_max_text_lines">
            <summary>
            Return total number of lines currently in use by the list.
            </summary>
        </member>
        <member name="M:GodotEngine.ItemList.set_max_columns(System.Int32)">
            <summary>
            Set maximum number of columns to use for the list.
            </summary>
        </member>
        <member name="M:GodotEngine.ItemList.get_max_columns">
            <summary>
            Return total number of columns in use by the list.
            </summary>
        </member>
        <member name="M:GodotEngine.ItemList.set_allow_rmb_select(System.Boolean)">
            <summary>
            Allow (or disallow) selection of (selectable) items in the list using right mouse button.
            </summary>
        </member>
        <member name="M:GodotEngine.ItemList.get_allow_rmb_select">
            <summary>
            Return whether or not items may be selected via right mouse clicking.
            </summary>
        </member>
        <member name="M:GodotEngine.ItemList.get_item_at_pos(GodotEngine.Vector2,System.Boolean)">
            <summary>
            Given a position within the control return the item (if any) at that point.
            </summary>
        </member>
        <member name="M:GodotEngine.ItemList.ensure_current_is_visible">
            <summary>
            Ensure selection is visible, adjusting the scroll position as necessary.
            </summary>
        </member>
        <member name="M:GodotEngine.ItemList.get_v_scroll">
            <summary>
            Returns the current vertical scroll bar for the List.
            </summary>
        </member>
        <member name="T:GodotEngine.Joint2D">
            <summary>
            Base node for all joint constraints in 2D physics. Joints take 2 bodies and apply a custom constraint.
            </summary>
        </member>
        <member name="M:GodotEngine.Joint2D.set_node_a(GodotEngine.NodePath)">
            <summary>
            Set the path to the A node for the joint. Must be of type [PhysicsBody2D].
            </summary>
        </member>
        <member name="M:GodotEngine.Joint2D.get_node_a">
            <summary>
            Return the path to the A node for the joint.
            </summary>
        </member>
        <member name="M:GodotEngine.Joint2D.set_node_b(GodotEngine.NodePath)">
            <summary>
            Set the path to the B node for the joint. Must be of type [PhysicsBody2D].
            </summary>
        </member>
        <member name="M:GodotEngine.Joint2D.get_node_b">
            <summary>
            Return the path to the B node for the joint.
            </summary>
        </member>
        <member name="T:GodotEngine.KinematicBody">
            <summary>
            Kinematic bodies are special types of bodies that are meant to be user-controlled. They are not affected by physics at all (to other types of bodies, such a character or a rigid body, these are the same as a static body). They have however, two main uses:
            Simulated Motion: When these bodies are moved manually, either from code or from an AnimationPlayer (with process mode set to fixed), the physics will automatically compute an estimate of their linear and angular velocity. This makes them very useful for moving platforms or other AnimationPlayer-controlled objects (like a door, a bridge that opens, etc).
            Kinematic Characters: KinematicBody also has an api for moving objects (the [method move] method) while performing collision tests. This makes them really useful to implement characters that collide against a world, but that don't require advanced physics.
            </summary>
        </member>
        <member name="M:GodotEngine.KinematicBody.move(GodotEngine.Vector3)">
            <summary>
            Move the body in the given direction, stopping if there is an obstacle. If as a result of a movement there will be any collision then informations about this collision will be in returned dictionary. Dictionary will contains those keys:
            - "position" - collision position
            - "normal" - collision normal
            - "local_shape" - id of this kinematic body shape that took part in a collision
            - "travel" -  traveled movement before being stopped
            - "remainder" - remaining movement before being stopped
            - "collider_id" - id of the collider, it can be used when dealing with [PhysicsServer]
            - "collider" - colliding body
            - "collider_shape_index" - index of the colliding shape, inside collider body "collider_metadata"
            If the body did not intersect anything, then an empty dictionary (dir.empty()==true) is returned instead. Please note that this method is less user friendly than [method move_and_slide]. If you don't want to program each edge case manually, then it's recommended to use [method move_and_slide] instead.
            </summary>
        </member>
        <member name="T:GodotEngine.KinematicBody2D">
            <summary>
            Kinematic bodies are special types of bodies that are meant to be user-controlled. They are not affected by physics at all (to other types of bodies, such a character or a rigid body, these are the same as a static body). They have however, two main uses:
            Simulated Motion: When these bodies are moved manually, either from code or from an AnimationPlayer (with process mode set to fixed), the physics will automatically compute an estimate of their linear and angular velocity. This makes them very useful for moving platforms or other AnimationPlayer-controlled objects (like a door, a bridge that opens, etc).
            Kinematic Characters: KinematicBody2D also has an api for moving objects (the [method move] method) while performing collision tests. This makes them really useful to implement characters that collide against a world, but that don't require advanced physics.
            </summary>
        </member>
        <member name="M:GodotEngine.KinematicBody2D.move(GodotEngine.Vector2)">
            <summary>
            Move the body in the given direction, stopping if there is an obstacle. If as a result of a movement there will be any collision then informations about this collision will be in returned dictionary.	Dictionary will contains those keys:
            - "position" - collision position
            - "normal" - collision normal
            - "local_shape" - id of this kinematic body shape that took part in a collision
            - "travel" -  traveled movement before being stopped
            - "remainder" - remaining movement before being stopped
            - "collider_id" - id of the collider, it can be used when dealing with [Physics2DServer]
            - "collider" - colliding body
            - "collider_shape_index" - index of the colliding shape, inside collider body "collider_metadata"
            If the body did not intersect anything, then an empty dictionary (dir.empty()==true) is returned instead. Please note that this method is less user friendly than [method move_and_slide]. If you don't want to program each edge case manually, then it's recommended to use [method move_and_slide] instead.
            </summary>
        </member>
        <member name="M:GodotEngine.KinematicBody2D.test_move(GodotEngine.Transform2D,GodotEngine.Vector2)">
            <summary>
            Return true if there would be a collision if the body moved from the given point in the given direction.
            </summary>
        </member>
        <member name="M:GodotEngine.KinematicBody2D.get_collision_collider_velocity(System.Int32)">
            <summary>
            Return the velocity of the body that collided with this one.
            </summary>
        </member>
        <member name="T:GodotEngine.Label">
            <summary>
            Label is a control that displays formatted text, optionally autowrapping it to the [Control] area. It inherits from range to be able to scroll wrapped text vertically.
            </summary>
        </member>
        <member name="F:GodotEngine.Label.ALIGN_LEFT">
            <summary>
            Align rows to the left (default).
            </summary>
        </member>
        <member name="F:GodotEngine.Label.ALIGN_CENTER">
            <summary>
            Align rows centered.
            </summary>
        </member>
        <member name="F:GodotEngine.Label.ALIGN_RIGHT">
            <summary>
            Align rows to the right (default).
            </summary>
        </member>
        <member name="F:GodotEngine.Label.ALIGN_FILL">
            <summary>
            Expand row whitespaces to fit the width.
            </summary>
        </member>
        <member name="F:GodotEngine.Label.VALIGN_TOP">
            <summary>
            Align the whole text to the top.
            </summary>
        </member>
        <member name="F:GodotEngine.Label.VALIGN_CENTER">
            <summary>
            Align the whole text to the center.
            </summary>
        </member>
        <member name="F:GodotEngine.Label.VALIGN_BOTTOM">
            <summary>
            Align the whole text to the bottom.
            </summary>
        </member>
        <member name="F:GodotEngine.Label.VALIGN_FILL">
            <summary>
            Align the whole text by spreading the rows.
            </summary>
        </member>
        <member name="M:GodotEngine.Label.set_align(System.Int32)">
            <summary>
            Sets the alignment mode to any of the ALIGN_* enumeration values.
            </summary>
        </member>
        <member name="M:GodotEngine.Label.get_align">
            <summary>
            Return the alignment mode (any of the ALIGN_* enumeration values).
            </summary>
        </member>
        <member name="M:GodotEngine.Label.set_valign(System.Int32)">
            <summary>
            Sets the vertical alignment mode to any of the VALIGN_* enumeration values.
            </summary>
        </member>
        <member name="M:GodotEngine.Label.get_valign">
            <summary>
            Return the vertical alignment mode (any of the VALIGN_* enumeration values).
            </summary>
        </member>
        <member name="M:GodotEngine.Label.set_text(System.String)">
            <summary>
            Set the label text. Text can contain newlines.
            </summary>
        </member>
        <member name="M:GodotEngine.Label.get_text">
            <summary>
            Return the label text. Text can contain newlines.
            </summary>
        </member>
        <member name="M:GodotEngine.Label.set_autowrap(System.Boolean)">
            <summary>
            Set [i]autowrap[/i] mode. When enabled, autowrap will fit text to the control width, breaking sentences when they exceed the available horizontal space. When disabled, the label minimum width becomes the width of the longest row, and the minimum height large enough to fit all rows.
            </summary>
        </member>
        <member name="M:GodotEngine.Label.has_autowrap">
            <summary>
            Return the state of the [i]autowrap[/i] mode (see [method set_autowrap]).
            </summary>
        </member>
        <member name="M:GodotEngine.Label.set_clip_text(System.Boolean)">
            <summary>
            Cuts off the rest of the text if it is too wide.
            </summary>
        </member>
        <member name="M:GodotEngine.Label.is_clipping_text">
            <summary>
            Return true if text would be cut off if it is too wide.
            </summary>
        </member>
        <member name="M:GodotEngine.Label.set_uppercase(System.Boolean)">
            <summary>
            Display text in all capitals.
            </summary>
        </member>
        <member name="M:GodotEngine.Label.is_uppercase">
            <summary>
            Return true if text is displayed in all capitals.
            </summary>
        </member>
        <member name="M:GodotEngine.Label.get_line_height">
            <summary>
            Return the height of a line.
            </summary>
        </member>
        <member name="M:GodotEngine.Label.get_line_count">
            <summary>
            Return the amount of lines.
            </summary>
        </member>
        <member name="M:GodotEngine.Label.get_total_character_count">
            <summary>
            Return the total length of the text.
            </summary>
        </member>
        <member name="M:GodotEngine.Label.set_visible_characters(System.Int32)">
            <summary>
            Restricts the number of characters to display. Set to -1 to disable.
            </summary>
        </member>
        <member name="M:GodotEngine.Label.get_visible_characters">
            <summary>
            Return the restricted number of characters to display. Returns -1 if unrestricted.
            </summary>
        </member>
        <member name="M:GodotEngine.Label.set_percent_visible(System.Single)">
            <summary>
            Restricts the number of characters to display (as a percentage of the total text).
            </summary>
        </member>
        <member name="M:GodotEngine.Label.get_percent_visible">
            <summary>
            Return the restricted number of characters to display (as a percentage of the total text).
            </summary>
        </member>
        <member name="M:GodotEngine.Label.set_lines_skipped(System.Int32)">
            <summary>
            Sets the number of lines to skip before displaying. Useful for scrolling text.
            </summary>
        </member>
        <member name="M:GodotEngine.Label.get_lines_skipped">
            <summary>
            Return the the number of lines to skipped before displaying.
            </summary>
        </member>
        <member name="M:GodotEngine.Label.set_max_lines_visible(System.Int32)">
            <summary>
            Restricts the number of lines to display. Set to -1 to disable.
            </summary>
        </member>
        <member name="M:GodotEngine.Label.get_max_lines_visible">
            <summary>
            Return the restricted number of lines to display. Returns -1 if unrestricted.
            </summary>
        </member>
        <member name="T:GodotEngine.LargeTexture">
            <summary>
            A Texture capable of storing many smaller Textures with offsets.
            You can dynamically add pieces(Textures) to this fLargeTexture] using different offsets.
            </summary>
        </member>
        <member name="M:GodotEngine.LargeTexture.add_piece(GodotEngine.Vector2,GodotEngine.Texture)">
            <summary>
            Add another [Texture] to this [LargeTexture], starting on offset "ofs".
            </summary>
        </member>
        <member name="M:GodotEngine.LargeTexture.set_piece_offset(System.Int32,GodotEngine.Vector2)">
            <summary>
            Set the offset of the piece with index "idx" to "ofs".
            </summary>
        </member>
        <member name="M:GodotEngine.LargeTexture.set_piece_texture(System.Int32,GodotEngine.Texture)">
            <summary>
            Set the [Texture] of the piece with index "idx" to  "ofs".
            </summary>
        </member>
        <member name="M:GodotEngine.LargeTexture.set_size(GodotEngine.Vector2)">
            <summary>
            Set the size of this [LargeTexture].
            </summary>
        </member>
        <member name="M:GodotEngine.LargeTexture.clear">
            <summary>
            Clear the [LargeTexture].
            </summary>
        </member>
        <member name="M:GodotEngine.LargeTexture.get_piece_count">
            <summary>
            Return the number of pieces currently in this [LargeTexture].
            </summary>
        </member>
        <member name="M:GodotEngine.LargeTexture.get_piece_offset(System.Int32)">
            <summary>
            Return the offset of the piece with index "idx".
            </summary>
        </member>
        <member name="M:GodotEngine.LargeTexture.get_piece_texture(System.Int32)">
            <summary>
            Return the [Texture] of the piece with index "idx".
            </summary>
        </member>
        <member name="T:GodotEngine.Light">
            <summary>
            Light is the abstract base class for light nodes, so it shouldn't be used directly (It can't be instanced). Other types of light nodes inherit from it. Light contains the common variables and parameters used for lighting.
            </summary>
        </member>
        <member name="T:GodotEngine.Light2D">
            <summary>
            Node that casts light in a 2D environment. Light is defined by a (usually grayscale) texture, a color, an energy value, a mode (see constants), and various other parameters (range and shadows-related). Note that Light2D can be used as a mask.
            </summary>
        </member>
        <member name="F:GodotEngine.Light2D.MODE_ADD">
            <summary>
            Adds the value of pixels corresponding to the Light2D to the values of pixels under it. This is the common behaviour of a light.
            </summary>
        </member>
        <member name="F:GodotEngine.Light2D.MODE_SUB">
            <summary>
            Subtract the value of pixels corresponding to the Light2D to the values of pixels under it, resulting in inversed light effect.
            </summary>
        </member>
        <member name="F:GodotEngine.Light2D.MODE_MIX">
            <summary>
            Mix the value of pixels corresponding to the Light2D to the values of pixels under it by linear interpolation.
            </summary>
        </member>
        <member name="F:GodotEngine.Light2D.MODE_MASK">
            <summary>
            The light texture of the Light2D is used as a mask, hiding or revealing parts of the screen underneath depending on the value of each pixel of the light (mask) texture.
            </summary>
        </member>
        <member name="M:GodotEngine.Light2D.set_enabled(System.Boolean)">
            <summary>
            Switches the Light2D on or off, depending on the 'enabled' parameter.
            </summary>
        </member>
        <member name="M:GodotEngine.Light2D.is_enabled">
            <summary>
            Return true if the Light2D is enabled, false if it is not.
            </summary>
        </member>
        <member name="M:GodotEngine.Light2D.get_texture">
            <summary>
            Return the texture of the Light2D.
            </summary>
        </member>
        <member name="M:GodotEngine.Light2D.set_texture_offset(GodotEngine.Vector2)">
            <summary>
            Set the offset of the light texture.
            </summary>
        </member>
        <member name="M:GodotEngine.Light2D.get_texture_offset">
            <summary>
            Return the offset of the light texture.
            </summary>
        </member>
        <member name="M:GodotEngine.Light2D.set_color(GodotEngine.Color)">
            <summary>
            Set the color of the Light2D.
            </summary>
        </member>
        <member name="M:GodotEngine.Light2D.get_color">
            <summary>
            Return the color of the Light2D.
            </summary>
        </member>
        <member name="M:GodotEngine.Light2D.set_height(System.Single)">
            <summary>
            Set the height of the Light2D. Used with 2D normalmapping.
            </summary>
        </member>
        <member name="M:GodotEngine.Light2D.get_height">
            <summary>
            Return the height of the Light2D. Used with 2D normalmapping.
            </summary>
        </member>
        <member name="M:GodotEngine.Light2D.set_energy(System.Single)">
            <summary>
            Set the energy value of the Light2D. The bigger the value, the stronger the light.
            </summary>
        </member>
        <member name="M:GodotEngine.Light2D.get_energy">
            <summary>
            Return the energy value of the Light2D.
            </summary>
        </member>
        <member name="M:GodotEngine.Light2D.set_texture_scale(System.Single)">
            <summary>
            Set the scale value of the light texture.
            </summary>
        </member>
        <member name="M:GodotEngine.Light2D.get_texture_scale">
            <summary>
            Return the scale value of the light texture.
            </summary>
        </member>
        <member name="M:GodotEngine.Light2D.set_z_range_min(System.Int32)">
            <summary>
            Set the minimum Z value that objects of the scene have to be in order to be affected by the Light2D.
            </summary>
        </member>
        <member name="M:GodotEngine.Light2D.get_z_range_min">
            <summary>
            Get the minimum Z value that objects of the scene have to be in order to be affected by the Light2D.
            </summary>
        </member>
        <member name="M:GodotEngine.Light2D.set_z_range_max(System.Int32)">
            <summary>
            Set the maximum Z value that objects of the scene can be in order to be affected by the Light2D.
            </summary>
        </member>
        <member name="M:GodotEngine.Light2D.get_z_range_max">
            <summary>
            Get the maximum Z value that objects of the scene can be in order to be affected by the Light2D.
            </summary>
        </member>
        <member name="M:GodotEngine.Light2D.set_layer_range_min(System.Int32)">
            <summary>
            Set the minimum layer value of objects of the scene that are affected by the Light2D.
            </summary>
        </member>
        <member name="M:GodotEngine.Light2D.get_layer_range_min">
            <summary>
            Get the minimum layer value of objects of the scene that are affected by the Light2D.
            </summary>
        </member>
        <member name="M:GodotEngine.Light2D.set_layer_range_max(System.Int32)">
            <summary>
            Set the maximum layer value of objects of the scene that are affected by the Light2D.
            </summary>
        </member>
        <member name="M:GodotEngine.Light2D.get_layer_range_max">
            <summary>
            Set the maximum layer value of objects of the scene that are affected by the Light2D.
            </summary>
        </member>
        <member name="M:GodotEngine.Light2D.set_item_cull_mask(System.Int32)">
            <summary>
            Set the item mask of the Light2D to 'item_mask' value.
            </summary>
        </member>
        <member name="M:GodotEngine.Light2D.set_item_shadow_cull_mask(System.Int32)">
            <summary>
            Set the item shadow mask to 'item_shadow_mask' value.
            </summary>
        </member>
        <member name="M:GodotEngine.Light2D.set_mode(System.Int32)">
            <summary>
            Set the behaviour mode of the Light2D. Use constants defined in the constants section.
            </summary>
        </member>
        <member name="M:GodotEngine.Light2D.get_mode">
            <summary>
            Return the current mode set to the Light2D.
            </summary>
        </member>
        <member name="M:GodotEngine.Light2D.set_shadow_enabled(System.Boolean)">
            <summary>
            Enable or disable shadows casting from this Light2D according to the 'enabled' parameter.
            </summary>
        </member>
        <member name="M:GodotEngine.Light2D.is_shadow_enabled">
            <summary>
            Return true if shadow casting is enabled for this Light2D, else return false.
            </summary>
        </member>
        <member name="M:GodotEngine.Light2D.set_shadow_buffer_size(System.Int32)">
            <summary>
            Set the shadow buffer size.
            </summary>
        </member>
        <member name="M:GodotEngine.Light2D.get_shadow_buffer_size">
            <summary>
            Return the shadow buffer size.
            </summary>
        </member>
        <member name="M:GodotEngine.Light2D.set_shadow_color(GodotEngine.Color)">
            <summary>
            Set the color of casted shadows for this Light2D.
            </summary>
        </member>
        <member name="M:GodotEngine.Light2D.get_shadow_color">
            <summary>
            Return the color of casted shadows for this Light2D.
            </summary>
        </member>
        <member name="T:GodotEngine.LightOccluder2D">
            <summary>
            Occludes light cast by a Light2D, thus casting shadows. The LightOccluder2D must be provided with a shape (see OccluderPolygon2D) that allows the shadow to be computed. This shape affects the resulting shadow, while the shape of the representating asset shadowed does not actually affect shadows.
            </summary>
        </member>
        <member name="M:GodotEngine.LightOccluder2D.set_occluder_polygon(GodotEngine.OccluderPolygon2D)">
            <summary>
            Set the OccluderPolygon2D that defines the LightOccluder2D.
            </summary>
        </member>
        <member name="M:GodotEngine.LightOccluder2D.get_occluder_polygon">
            <summary>
            Return the OccluderPolygon2D that defines the LightOccluder2D.
            </summary>
        </member>
        <member name="M:GodotEngine.LightOccluder2D.set_occluder_light_mask(System.Int32)">
            <summary>
            Set the LightOccluder2D light mask. The LightOccluder2D will cast shadows only from Light2Ds that belong to the same light mask(s).
            </summary>
        </member>
        <member name="M:GodotEngine.LightOccluder2D.get_occluder_light_mask">
            <summary>
            Return the light mask of the LightOccluder2D.
            </summary>
        </member>
        <member name="T:GodotEngine.LineEdit">
            <summary>
            LineEdit provides a single line string editor, used for text fields.
            </summary>
        </member>
        <member name="M:GodotEngine.LineEdit.clear">
            <summary>
            Clear the [LineEdit] text.
            </summary>
        </member>
        <member name="M:GodotEngine.LineEdit.select_all">
            <summary>
            Select the whole string.
            </summary>
        </member>
        <member name="M:GodotEngine.LineEdit.set_text(System.String)">
            <summary>
            Set the text in the [LineEdit], clearing the existing one and the selection.
            </summary>
        </member>
        <member name="M:GodotEngine.LineEdit.get_text">
            <summary>
            Return the text in the [LineEdit].
            </summary>
        </member>
        <member name="M:GodotEngine.LineEdit.set_cursor_pos(System.Int32)">
            <summary>
            Set the cursor position inside the [LineEdit], causing it to scroll if needed.
            </summary>
        </member>
        <member name="M:GodotEngine.LineEdit.get_cursor_pos">
            <summary>
            Return the cursor position inside the [LineEdit].
            </summary>
        </member>
        <member name="M:GodotEngine.LineEdit.cursor_set_blink_enabled(System.Boolean)">
            <summary>
            Set the line edit caret to blink.
            </summary>
        </member>
        <member name="M:GodotEngine.LineEdit.cursor_get_blink_enabled">
            <summary>
            Gets whether the line edit caret is blinking.
            </summary>
        </member>
        <member name="M:GodotEngine.LineEdit.cursor_set_blink_speed(System.Single)">
            <summary>
            Set the line edit caret blink speed. Cannot be less then or equal to 0.
            </summary>
        </member>
        <member name="M:GodotEngine.LineEdit.cursor_get_blink_speed">
            <summary>
            Gets the line edit caret blink speed.
            </summary>
        </member>
        <member name="M:GodotEngine.LineEdit.set_max_length(System.Int32)">
            <summary>
            Set the maximum amount of characters the [LineEdit] can edit, and cropping existing text in case it exceeds that limit. Setting 0 removes the limit.
            </summary>
        </member>
        <member name="M:GodotEngine.LineEdit.get_max_length">
            <summary>
            Return the maximum amount of characters the [LineEdit] can edit. If 0 is returned, no limit exists.
            </summary>
        </member>
        <member name="M:GodotEngine.LineEdit.append_at_cursor(System.String)">
            <summary>
            Append text at cursor, scrolling the [LineEdit] when needed.
            </summary>
        </member>
        <member name="M:GodotEngine.LineEdit.set_editable(System.Boolean)">
            <summary>
            Set the [i]editable[/i] status of the [LineEdit]. When disabled, existing text can't be modified and new text can't be added.
            </summary>
        </member>
        <member name="M:GodotEngine.LineEdit.is_editable">
            <summary>
            Return the [i]editable[/i] status of the [LineEdit] (see [method set_editable]).
            </summary>
        </member>
        <member name="M:GodotEngine.LineEdit.set_secret(System.Boolean)">
            <summary>
            Set the [i]secret[/i] status of the [LineEdit]. When enabled, every character is displayed as "*".
            </summary>
        </member>
        <member name="M:GodotEngine.LineEdit.is_secret">
            <summary>
            Return the [i]secret[/i] status of the [LineEdit] (see [method set_secret]).
            </summary>
        </member>
        <member name="T:GodotEngine.LineShape2D">
            <summary>
            Line shape for 2D collision objects. It works like a 2D plane and will not allow any body to go to the negative side. Not recommended for rigid bodies, and usually not recommended for static bodies either because it forces checks against it on every frame.
            </summary>
        </member>
        <member name="M:GodotEngine.LineShape2D.set_normal(GodotEngine.Vector2)">
            <summary>
            Set the line normal.
            </summary>
        </member>
        <member name="M:GodotEngine.LineShape2D.get_normal">
            <summary>
            Return the line normal.
            </summary>
        </member>
        <member name="M:GodotEngine.LineShape2D.set_d(System.Single)">
            <summary>
            Set the line distance from the origin.
            </summary>
        </member>
        <member name="M:GodotEngine.LineShape2D.get_d">
            <summary>
            Return the line distance from the origin.
            </summary>
        </member>
        <member name="T:GodotEngine.LinkButton">
            <summary>
            This kind of buttons are primarily used when the interaction with the button causes a context change (like linking to a web page).
            </summary>
        </member>
        <member name="F:GodotEngine.LinkButton.UNDERLINE_MODE_ALWAYS">
            <summary>
            The LinkButton will always show an underline at the bottom of its text
            </summary>
        </member>
        <member name="F:GodotEngine.LinkButton.UNDERLINE_MODE_ON_HOVER">
            <summary>
            The LinkButton will show an underline at the bottom of its text when the mouse cursor is over it.
            </summary>
        </member>
        <member name="F:GodotEngine.LinkButton.UNDERLINE_MODE_NEVER">
            <summary>
            The LinkButton will never show an underline at the bottom of its text.
            </summary>
        </member>
        <member name="M:GodotEngine.LinkButton.set_text(System.String)">
            <summary>
            Sets the text of the button.
            </summary>
        </member>
        <member name="M:GodotEngine.LinkButton.get_text">
            <summary>
            Returns the text of the button.
            </summary>
        </member>
        <member name="M:GodotEngine.LinkButton.set_underline_mode(System.Int32)">
            <summary>
            Sets the underline mode for this button, the argument must be one of the [LinkButton] constants (see constants section).
            </summary>
        </member>
        <member name="M:GodotEngine.LinkButton.get_underline_mode">
            <summary>
            Returns the underline mode for this button.
            </summary>
        </member>
        <member name="T:GodotEngine.MainLoop">
            <summary>
            Main loop is the abstract main loop base class. All other main loop classes are derived from it. Upon application start, a [MainLoop] has to be provided to OS, else the application will exit. This happens automatically (and a [SceneTree] is created), unless a main [Script] is supplied, which may or not create and return a [MainLoop].
            </summary>
        </member>
        <member name="T:GodotEngine.MarginContainer">
            <summary>
            Simple margin container. Adds a left margin to anything contained.
            </summary>
        </member>
        <member name="T:GodotEngine.Material">
            <summary>
            Material is a base [Resource] used for coloring and shading geometry. All materials inherit from it and almost all [VisualInstance] derived nodes carry a Material. A few flags and parameters are shared between all material types and are configured here.
            </summary>
        </member>
        <member name="T:GodotEngine.MenuButton">
            <summary>
            Special button that brings up a [PopupMenu] when clicked. That's pretty much all it does, as it's just a helper class when building GUIs.
            </summary>
        </member>
        <member name="M:GodotEngine.MenuButton.get_popup">
            <summary>
            Return the [PopupMenu] contained in this button.
            </summary>
        </member>
        <member name="T:GodotEngine.Mesh">
            <summary>
            Mesh is a type of [Resource] that contains vertex-array based geometry, divided in [i]surfaces[/i]. Each surface contains a completely separate array and a material used to draw it. Design wise, a mesh with multiple surfaces is preferred to a single surface, because objects created in 3D editing software commonly contain multiple materials.
            </summary>
        </member>
        <member name="F:GodotEngine.Mesh.PRIMITIVE_POINTS">
            <summary>
            Render array as points (one vertex equals one point).
            </summary>
        </member>
        <member name="F:GodotEngine.Mesh.PRIMITIVE_LINES">
            <summary>
            Render array as lines (every two vertices a line is created).
            </summary>
        </member>
        <member name="F:GodotEngine.Mesh.PRIMITIVE_LINE_STRIP">
            <summary>
            Render array as line strip.
            </summary>
        </member>
        <member name="F:GodotEngine.Mesh.PRIMITIVE_LINE_LOOP">
            <summary>
            Render array as line loop (like line strip, but closed).
            </summary>
        </member>
        <member name="F:GodotEngine.Mesh.PRIMITIVE_TRIANGLES">
            <summary>
            Render array as triangles (every three vertices a triangle is created).
            </summary>
        </member>
        <member name="F:GodotEngine.Mesh.PRIMITIVE_TRIANGLE_STRIP">
            <summary>
            Render array as triangle strips.
            </summary>
        </member>
        <member name="F:GodotEngine.Mesh.PRIMITIVE_TRIANGLE_FAN">
            <summary>
            Render array as triangle fans.
            </summary>
        </member>
        <member name="T:GodotEngine.MeshInstance">
            <summary>
            MeshInstance is a [Node] that takes a [Mesh] resource and adds it to the current scenario by creating an instance of it. This is the class most often used to get 3D geometry rendered and can be used to instance a single [Mesh] in many places. This allows to reuse geometry and save on resources. When a [Mesh] has to be instanced more than thousands of times at close proximity, consider using a [MultiMesh] in a [MultiMeshInstance] instead.
            </summary>
        </member>
        <member name="M:GodotEngine.MeshInstance.set_mesh(GodotEngine.Mesh)">
            <summary>
            Set the [Mesh] resource for the instance.
            </summary>
        </member>
        <member name="M:GodotEngine.MeshInstance.get_mesh">
            <summary>
            Return the current [Mesh] resource for the instance.
            </summary>
        </member>
        <member name="M:GodotEngine.MeshInstance.create_trimesh_collision">
            <summary>
            This helper creates a [StaticBody] child [Node] using the mesh geometry as collision. It's mainly used for testing.
            </summary>
        </member>
        <member name="T:GodotEngine.MeshLibrary">
            <summary>
            Library of meshes. Contains a list of [Mesh] resources, each with name and ID. Useful for GridMap or painting Terrain.
            </summary>
        </member>
        <member name="M:GodotEngine.MeshLibrary.create_item(System.Int32)">
            <summary>
            Create a new item in the library, supplied an id.
            </summary>
        </member>
        <member name="M:GodotEngine.MeshLibrary.set_item_name(System.Int32,System.String)">
            <summary>
            Set the name of the item.
            </summary>
        </member>
        <member name="M:GodotEngine.MeshLibrary.set_item_mesh(System.Int32,GodotEngine.Mesh)">
            <summary>
            Set the mesh of the item.
            </summary>
        </member>
        <member name="M:GodotEngine.MeshLibrary.get_item_name(System.Int32)">
            <summary>
            Return the name of the item.
            </summary>
        </member>
        <member name="M:GodotEngine.MeshLibrary.get_item_mesh(System.Int32)">
            <summary>
            Return the mesh of the item.
            </summary>
        </member>
        <member name="M:GodotEngine.MeshLibrary.remove_item(System.Int32)">
            <summary>
            Remove the item.
            </summary>
        </member>
        <member name="M:GodotEngine.MeshLibrary.clear">
            <summary>
            Clear the library.
            </summary>
        </member>
        <member name="M:GodotEngine.MeshLibrary.get_item_list">
            <summary>
            Return the list of items.
            </summary>
        </member>
        <member name="M:GodotEngine.MeshLibrary.get_last_unused_item_id">
            <summary>
            Get an unused id for a new item.
            </summary>
        </member>
        <member name="T:GodotEngine.MultiMesh">
            <summary>
            MultiMesh provides low level mesh instancing. If the amount of [Mesh] instances needed goes from hundreds to thousands (and most need to be visible at close proximity) creating such a large amount of [MeshInstance] nodes may affect performance by using too much CPU or video memory.
            For this case a MultiMesh becomes very useful, as it can draw thousands of instances with little API overhead.
            As a drawback, if the instances are too far away of each other, performance may be reduced as every single instance will always rendered (they are spatially indexed as one, for the whole object).
            Since instances may have any behavior, the Rect3 used for visibility must be provided by the user.
            </summary>
        </member>
        <member name="M:GodotEngine.MultiMesh.set_mesh(GodotEngine.Mesh)">
            <summary>
            Set the [Mesh] resource to be drawn in multiple instances.
            </summary>
        </member>
        <member name="M:GodotEngine.MultiMesh.get_mesh">
            <summary>
            Return the [Mesh] resource drawn as multiple instances.
            </summary>
        </member>
        <member name="M:GodotEngine.MultiMesh.set_instance_count(System.Int32)">
            <summary>
            Set the amount of instances that is going to be drawn. Changing this number will erase all the existing instance transform and color data.
            </summary>
        </member>
        <member name="M:GodotEngine.MultiMesh.get_instance_count">
            <summary>
            Return the amount of instances that is going to be drawn.
            </summary>
        </member>
        <member name="M:GodotEngine.MultiMesh.set_instance_transform(System.Int32,GodotEngine.Transform)">
            <summary>
            Set the transform for a specific instance.
            </summary>
        </member>
        <member name="M:GodotEngine.MultiMesh.get_instance_transform(System.Int32)">
            <summary>
            Return the transform of a specific instance.
            </summary>
        </member>
        <member name="M:GodotEngine.MultiMesh.set_instance_color(System.Int32,GodotEngine.Color)">
            <summary>
            Set the color of a specific instance.
            </summary>
        </member>
        <member name="M:GodotEngine.MultiMesh.get_instance_color(System.Int32)">
            <summary>
            Get the color of a specific instance.
            </summary>
        </member>
        <member name="M:GodotEngine.MultiMesh.get_aabb">
            <summary>
            Return the visibility Rect3.
            </summary>
        </member>
        <member name="T:GodotEngine.MultiMeshInstance">
            <summary>
            MultiMeshInstance is a [Node] that takes a [MultiMesh] resource and adds it to the current scenario by creating an instance of it (yes, this is an instance of instances).
            </summary>
        </member>
        <member name="M:GodotEngine.MultiMeshInstance.get_multimesh">
            <summary>
            Return the [MultiMesh] that is used for instancing.
            </summary>
        </member>
        <member name="T:GodotEngine.NetworkedMultiplayerENet">
            <summary>
            A connection (or a listening server) that should be passed to [method SceneTree.set_network_peer]. Socket events can be handled by connecting to [SceneTree] signals.
            </summary>
        </member>
        <member name="T:GodotEngine.Node">
            <summary>
            Nodes are the base bricks with which Godot games are developed. They can be set as children of other nodes, resulting in a tree arrangement. A given node can contain any number of nodes as children (but there is only one scene tree root node) with the requirement that all siblings (direct children of a node) should have unique names.
            Any tree of nodes is called a [i]scene[/i]. Scenes can be saved to the disk and then instanced into other scenes. This allows for very high flexibility in the architecture and data model of the projects. Nodes can optionally be added to groups. This makes it easy to reach a number of nodes from the code (for example an "enemies" group) to perform grouped actions.
            [b]Scene tree:[/b] The [SceneTree] contains the active tree of nodes. When a node is added to the scene tree, it receives the NOTIFICATION_ENTER_TREE notification and its [method _enter_tree] callback is triggered. Children nodes are always added [i]after[/i] their parent node, i.e. the [method _enter_tree] callback of a parent node will be triggered before its child's.
            Once all nodes have been added in the scene tree, they receive the NOTIFICATION_READY notification and their respective [method _ready] callbacks are triggered. For groups of nodes, the [method _ready] callback is called in reverse order, from the children up to the parent nodes.
            It means that when adding a scene to the scene tree, the following order will be used for the callbacks: [method _enter_tree] of the parent, [method _enter_tree] of the children, [method _ready] of the children and finally [method _ready] of the parent (and that recursively for the whole scene).
            [b]Processing:[/b] Nodes can be set to the "process" state, so that they receive a callback on each frame requesting them to process (do something). Normal processing (callback [method _process], toggled with [method set_process]) happens as fast as possible and is dependent on the frame rate, so the processing time [i]delta[/i] is variable. Fixed processing (callback [method _fixed_process], toggled with [method set_fixed_process]) happens a fixed amount of times per second (by default 60) and is useful to link itself to the physics.
            Nodes can also process input events. When set, the [method _input] function will be called for each input that the program receives. In many cases, this can be overkill (unless used for simple projects), and the [method _unhandled_input] function might be preferred; it is called when the input event was not handled by anyone else (typically, GUI [Control] nodes), ensuring that the node only receives the events that were meant for it.
            To keep track of the scene hierarchy (especially when instancing scenes into other scenes), an "owner" can be set for the node with [method set_owner]. This keeps track of who instanced what. This is mostly useful when writing editors and tools, though.
            Finally, when a node is freed with [method free] or [method queue_free], it will also free all its children.
            [b]Networking with nodes:[/b] After connecting to a server (or making one, see [NetworkedMultiplayerENet]) it is possible to use the built-in RPC (remote procedure call) system to easily communicate over the network. By calling [method rpc] with a method name, it will be called locally, and in all connected peers (peers = clients and the server that accepts connections), with behaviour varying depending on the network mode ([method set_network_mode]) on the receiving peer. To identify which [Node] receives the RPC call Godot will use its [NodePath] (make sure node names are the same on all peers).
            </summary>
        </member>
        <member name="F:GodotEngine.Node.NOTIFICATION_PROCESS">
            <summary>
            Notification received every frame when the process flag is set (see [method set_process]).
            </summary>
        </member>
        <member name="F:GodotEngine.Node.NOTIFICATION_PARENTED">
            <summary>
            Notification received when a node is set as a child of another node. Note that this doesn't mean that a node entered the Scene Tree.
            </summary>
        </member>
        <member name="F:GodotEngine.Node.NOTIFICATION_UNPARENTED">
            <summary>
            Notification received when a node is unparented (parent removed it from the list of children).
            </summary>
        </member>
        <member name="M:GodotEngine.Node.set_name(System.String)">
            <summary>
            Set the name of the [Node]. Name must be unique within parent, and setting an already existing name will cause for the node to be automatically renamed.
            </summary>
        </member>
        <member name="M:GodotEngine.Node.get_name">
            <summary>
            Return the name of the node. This name is unique among the siblings (other child nodes from the same parent).
            </summary>
        </member>
        <member name="M:GodotEngine.Node.add_child(GodotEngine.Node,System.Boolean)">
            <summary>
            Add a child [Node]. Nodes can have as many children as they want, but every child must have a unique name. Children nodes are automatically deleted when the parent node is deleted, so deleting a whole scene is performed by deleting its topmost node.
            The optional boolean argument enforces creating child nodes with human-readable names, based on the name of the node being instanced instead of its type only.
            </summary>
        </member>
        <member name="M:GodotEngine.Node.remove_child(GodotEngine.Node)">
            <summary>
            Remove a child [Node]. Node is NOT deleted and will have to be deleted manually.
            </summary>
        </member>
        <member name="M:GodotEngine.Node.get_child_count">
            <summary>
            Return the amount of child nodes.
            </summary>
        </member>
        <member name="M:GodotEngine.Node.get_children">
            <summary>
            Return an array of references ([Node]) to the child nodes.
            </summary>
        </member>
        <member name="M:GodotEngine.Node.get_child(System.Int32)">
            <summary>
            Return a child node by its index (see [method get_child_count]). This method is often used for iterating all children of a node.
            </summary>
        </member>
        <member name="M:GodotEngine.Node.get_node(GodotEngine.NodePath)">
            <summary>
            Fetch a node. The [NodePath] must be valid (or else an error will be raised) and can be either the path to child node, a relative path (from the current node to another node), or an absolute path to a node.
            Note: fetching absolute paths only works when the node is inside the scene tree (see [method is_inside_tree]).
            [i]Example:[/i] Assume your current node is Character and the following tree:
            [codeblock]
            /root
            /root/Character
            /root/Character/Sword
            /root/Character/Backpack/Dagger
            /root/MyGame
            /root/Swamp/Alligator
            /root/Swamp/Mosquito
            /root/Swamp/Goblin
            [/codeblock]
            Possible paths are:
            [codeblock]
            get_node("Sword")
            get_node("Backpack/Dagger")
            get_node("../Swamp/Alligator")
            get_node("/root/MyGame")
            [/codeblock]
            </summary>
        </member>
        <member name="M:GodotEngine.Node.get_parent">
            <summary>
            Return the parent node of the current node, or an empty [Node] if the node lacks a parent.
            </summary>
        </member>
        <member name="M:GodotEngine.Node.find_node(System.String,System.Boolean,System.Boolean)">
            <summary>
            Find a descendant of this node whose name matches [code]mask[/code] as in [method String.match] (i.e. case sensitive, but '*' matches zero or more characters and '?' matches any single character except '.'). Note that it does not match against the full path, just against individual node names.
            </summary>
        </member>
        <member name="M:GodotEngine.Node.is_a_parent_of(GodotEngine.Node)">
            <summary>
            Return [i]true[/i] if the "node" argument is a direct or indirect child of the current node, otherwise return [i]false[/i].
            </summary>
        </member>
        <member name="M:GodotEngine.Node.is_greater_than(GodotEngine.Node)">
            <summary>
            Return [i]true[/i] if "node" occurs later in the scene hierarchy than the current node, otherwise return [i]false[/i].
            </summary>
        </member>
        <member name="M:GodotEngine.Node.get_path">
            <summary>
            Return the absolute path of the current node. This only works if the current node is inside the scene tree (see [method is_inside_tree]).
            </summary>
        </member>
        <member name="M:GodotEngine.Node.get_path_to(GodotEngine.Node)">
            <summary>
            Return the relative path from the current node to the specified node in "node" argument. Both nodes must be in the same scene, or else the function will fail.
            </summary>
        </member>
        <member name="M:GodotEngine.Node.add_to_group(System.String,System.Boolean)">
            <summary>
            Add a node to a group. Groups are helpers to name and organize a subset of nodes, like for example "enemies" or "collectables". A [Node] can be in any number of groups. Nodes can be assigned a group at any time, but will not be added to it until they are inside the scene tree (see [method is_inside_tree]).
            </summary>
        </member>
        <member name="M:GodotEngine.Node.remove_from_group(System.String)">
            <summary>
            Remove a node from a group.
            </summary>
        </member>
        <member name="M:GodotEngine.Node.move_child(GodotEngine.Node,System.Int32)">
            <summary>
            Move a child node to a different position (order) amongst the other children. Since calls, signals, etc are performed by tree order, changing the order of children nodes may be useful.
            </summary>
        </member>
        <member name="M:GodotEngine.Node.get_groups">
            <summary>
            Return an array listing the groups that the node is part of.
            </summary>
        </member>
        <member name="M:GodotEngine.Node.raise">
            <summary>
            Move this node to the top of the array of nodes of the parent node. This is often useful on GUIs ([Control]), because their order of drawing fully depends on their order in the tree.
            </summary>
        </member>
        <member name="M:GodotEngine.Node.set_owner(GodotEngine.Node)">
            <summary>
            Set the node owner. A node can have any other node as owner (as long as a valid parent, grandparent, etc ascending in the tree). When saving a node (using SceneSaver) all the nodes it owns will be saved with it. This allows to create complex SceneTrees, with instancing and subinstancing.
            </summary>
        </member>
        <member name="M:GodotEngine.Node.get_owner">
            <summary>
            Get the node owner (see [method set_owner]).
            </summary>
        </member>
        <member name="M:GodotEngine.Node.remove_and_skip">
            <summary>
            Remove a node and set all its children as children of the parent node (if exists). All even subscriptions that pass by the removed node will be unsubscribed.
            </summary>
        </member>
        <member name="M:GodotEngine.Node.get_index">
            <summary>
            Get the node index, i.e. its position among the siblings of its parent.
            </summary>
        </member>
        <member name="M:GodotEngine.Node.print_tree">
            <summary>
            Print the scene to stdout. Used mainly for debugging purposes.
            </summary>
        </member>
        <member name="M:GodotEngine.Node.set_filename(System.String)">
            <summary>
            A node can contain a filename. This filename should not be changed by the user, unless writing editors and tools. When a scene is instanced from a file, it topmost node contains the filename from where it was loaded.
            </summary>
        </member>
        <member name="M:GodotEngine.Node.get_filename">
            <summary>
            Return a filename that may be contained by the node. When a scene is instanced from a file, it topmost node contains the filename from where it was loaded (see [method set_filename]).
            </summary>
        </member>
        <member name="M:GodotEngine.Node.propagate_notification(System.Int32)">
            <summary>
            Notify the current node and all its children recursively by calling notification() in all of them.
            </summary>
        </member>
        <member name="M:GodotEngine.Node.set_fixed_process(System.Boolean)">
            <summary>
            Enables or disables node fixed framerate processing. When a node is being processed, it will receive a NOTIFICATION_PROCESS at a fixed (usually 60 fps, check [OS] to change that) interval (and the [method _fixed_process] callback will be called if exists). It is common to check how much time was elapsed since the previous frame by calling [method get_fixed_process_delta_time].
            </summary>
        </member>
        <member name="M:GodotEngine.Node.get_fixed_process_delta_time">
            <summary>
            Return the time elapsed since the last fixed frame (see [method _fixed_process]). This is always the same in fixed processing unless the frames per second is changed in [OS].
            </summary>
        </member>
        <member name="M:GodotEngine.Node.is_fixed_processing">
            <summary>
            Return true if fixed processing is enabled (see [method set_fixed_process]).
            </summary>
        </member>
        <member name="M:GodotEngine.Node.get_process_delta_time">
            <summary>
            Return the time elapsed (in seconds) since the last process callback. This is almost always different each time.
            </summary>
        </member>
        <member name="M:GodotEngine.Node.set_process(System.Boolean)">
            <summary>
            Enables or disables node processing. When a node is being processed, it will receive a NOTIFICATION_PROCESS on every drawn frame (and the [method _process] callback will be called if exists). It is common to check how much time was elapsed since the previous frame by calling [method get_process_delta_time].
            </summary>
        </member>
        <member name="M:GodotEngine.Node.is_processing">
            <summary>
            Return whether processing is enabled in the current node (see [method set_process]).
            </summary>
        </member>
        <member name="M:GodotEngine.Node.set_process_input(System.Boolean)">
            <summary>
            Enable input processing for node. This is not required for GUI controls! It hooks up the node to receive all input (see [method _input]).
            </summary>
        </member>
        <member name="M:GodotEngine.Node.is_processing_input">
            <summary>
            Return true if the node is processing input (see [method set_process_input]).
            </summary>
        </member>
        <member name="M:GodotEngine.Node.set_process_unhandled_input(System.Boolean)">
            <summary>
            Enable unhandled input processing for node. This is not required for GUI controls! It hooks up the node to receive all input that was not previously handled before (usually by a [Control]). (see [method _unhandled_input]).
            </summary>
        </member>
        <member name="M:GodotEngine.Node.is_processing_unhandled_input">
            <summary>
            Return true if the node is processing unhandled input (see [method set_process_unhandled_input]).
            </summary>
        </member>
        <member name="M:GodotEngine.Node.can_process">
            <summary>
            Return true if the node can process, i.e. whether its pause mode allows processing while the scene tree is paused (see [method set_pause_mode]). Always returns true if the scene tree is not paused, and false if the node is not in the tree. FIXME: Why FAIL_COND?
            </summary>
        </member>
        <member name="M:GodotEngine.Node.duplicate(System.Int32)">
            <summary>
            Duplicate the node, returning a new [Node].
            You can fine-tune the behavior using the [code]flags[/code], which are based on the DUPLICATE_* constants.
            </summary>
        </member>
        <member name="M:GodotEngine.Node.replace_by(GodotEngine.Node,System.Boolean)">
            <summary>
            Replace a node in a scene by a given one. Subscriptions that pass through this node will be lost.
            </summary>
        </member>
        <member name="M:GodotEngine.Node.rpc_config(System.String,System.Int32)">
            <summary>
            Change the method's RPC mode (one of RPC_MODE_* constants).
            </summary>
        </member>
        <member name="M:GodotEngine.Node.rset_config(System.String,System.Int32)">
            <summary>
            Change the property's RPC mode (one of RPC_MODE_* constants).
            </summary>
        </member>
        <member name="M:GodotEngine.Node.rpc(System.String,System.Object[])">
            <summary>
            Send a remote procedure call request to all peers on the network (and locally), optionally sending additional data as arguments. Call request will be received by nodes with the same [NodePath].
            </summary>
        </member>
        <member name="M:GodotEngine.Node.rpc_unreliable(System.String,System.Object[])">
            <summary>
            Send a [method rpc] using an unreliable protocol.
            </summary>
        </member>
        <member name="M:GodotEngine.Node.rpc_id(System.Int32,System.String,System.Object[])">
            <summary>
            Send a [method rpc] to a specific peer identified by [i]peer_id[/i].
            </summary>
        </member>
        <member name="M:GodotEngine.Node.rpc_unreliable_id(System.Int32,System.String,System.Object[])">
            <summary>
            Send a [method rpc] to a specific peer identified by [i]peer_id[/i] using an unreliable protocol.
            </summary>
        </member>
        <member name="M:GodotEngine.Node.rset(System.String,System.Object)">
            <summary>
            Remotely change property's value on other peers (and locally).
            </summary>
        </member>
        <member name="M:GodotEngine.Node.rset_id(System.Int32,System.String,System.Object)">
            <summary>
            Remotely change property's value on a specific peer identified by [i]peer_id[/i].
            </summary>
        </member>
        <member name="M:GodotEngine.Node.rset_unreliable(System.String,System.Object)">
            <summary>
            Remotely change property's value on other peers (and locally) using an unreliable protocol.
            </summary>
        </member>
        <member name="M:GodotEngine.Node.rset_unreliable_id(System.Int32,System.String,System.Object)">
            <summary>
            Remotely change property's value on a specific peer identified by [i]peer_id[/i] using an unreliable protocol.
            </summary>
        </member>
        <member name="T:GodotEngine.Node2D">
            <summary>
            Base node for 2D system. Node2D contains a position, rotation and scale, which is used to position and animate. It can alternatively be used with a custom 2D transform ([Transform2D]). A tree of Node2Ds allows complex hierarchies for animation and positioning.
            </summary>
        </member>
        <member name="M:GodotEngine.Node2D.set_position(GodotEngine.Vector2)">
            <summary>
            Set the position of the 2D node.
            </summary>
        </member>
        <member name="M:GodotEngine.Node2D.set_rotation(System.Single)">
            <summary>
            Set the rotation in radians of the 2D node.
            </summary>
        </member>
        <member name="M:GodotEngine.Node2D.set_rotation_in_degrees(System.Single)">
            <summary>
            Set the rotation in degrees of the 2D node.
            </summary>
        </member>
        <member name="M:GodotEngine.Node2D.set_scale(GodotEngine.Vector2)">
            <summary>
            Set the scale of the 2D node.
            </summary>
        </member>
        <member name="M:GodotEngine.Node2D.get_position">
            <summary>
            Return the position of the 2D node.
            </summary>
        </member>
        <member name="M:GodotEngine.Node2D.get_rotation">
            <summary>
            Return the rotation in radians of the 2D node.
            </summary>
        </member>
        <member name="M:GodotEngine.Node2D.get_rotation_in_degrees">
            <summary>
            Return the rotation in degrees of the 2D node.
            </summary>
        </member>
        <member name="M:GodotEngine.Node2D.get_scale">
            <summary>
            Return the scale of the 2D node.
            </summary>
        </member>
        <member name="M:GodotEngine.Node2D.rotate(System.Single)">
            <summary>
            Apply a rotation (in radians) to the 2D node, starting from its current rotation.
            </summary>
        </member>
        <member name="M:GodotEngine.Node2D.move_local_x(System.Single,System.Boolean)">
            <summary>
            Apply a local translation on X axis to the 2D node according to the 'delta' of the process. If 'scaled' is false, the movement is normalized.
            </summary>
        </member>
        <member name="M:GodotEngine.Node2D.move_local_y(System.Single,System.Boolean)">
            <summary>
            Apply a local translation on Y axis to the 2D node according to the 'delta' of the process. If 'scaled' is false, the movement is normalized.
            </summary>
        </member>
        <member name="M:GodotEngine.Node2D.translate(GodotEngine.Vector2)">
            <summary>
            Apply a local translation of 'offset' to the 2D node, starting from its current local position.
            </summary>
        </member>
        <member name="M:GodotEngine.Node2D.global_translate(GodotEngine.Vector2)">
            <summary>
            Apply a global translation of 'offset' to the 2D node, starting from its current global position.
            </summary>
        </member>
        <member name="M:GodotEngine.Node2D.set_global_position(GodotEngine.Vector2)">
            <summary>
            Set the global position of the 2D node.
            </summary>
        </member>
        <member name="M:GodotEngine.Node2D.get_global_position">
            <summary>
            Return the global position of the 2D node.
            </summary>
        </member>
        <member name="M:GodotEngine.Node2D.set_global_rotation(System.Single)">
            <summary>
            Set the global rotation in radians of the 2D node
            </summary>
        </member>
        <member name="M:GodotEngine.Node2D.get_global_rotation">
            <summary>
            Return the global rotation in radians of the 2D node.
            </summary>
        </member>
        <member name="M:GodotEngine.Node2D.set_global_rotation_in_degrees(System.Single)">
            <summary>
            Set the global rotation in degrees of the 2D node
            </summary>
        </member>
        <member name="M:GodotEngine.Node2D.get_global_rotation_in_degrees">
            <summary>
            Return the global rotation in degrees of the 2D node.
            </summary>
        </member>
        <member name="M:GodotEngine.Node2D.set_global_scale(GodotEngine.Vector2)">
            <summary>
            Set the global scale of the 2D node.
            </summary>
        </member>
        <member name="M:GodotEngine.Node2D.get_global_scale">
            <summary>
            Return the global scale of the 2D node.
            </summary>
        </member>
        <member name="M:GodotEngine.Node2D.set_transform(GodotEngine.Transform2D)">
            <summary>
            Set the local transform [Transform2D] of the 2D node.
            </summary>
        </member>
        <member name="M:GodotEngine.Node2D.set_global_transform(GodotEngine.Transform2D)">
            <summary>
            Set the global transform [Transform2D] of the 2D node.
            </summary>
        </member>
        <member name="M:GodotEngine.Node2D.look_at(GodotEngine.Vector2)">
            <summary>
            Rotate the 2d node so it points at 'point' position.
            </summary>
        </member>
        <member name="M:GodotEngine.Node2D.get_angle_to(GodotEngine.Vector2)">
            <summary>
            Return the rotation angle in radians needed for the 2d node to point at 'point' position.
            </summary>
        </member>
        <member name="M:GodotEngine.Node2D.set_z(System.Int32)">
            <summary>
            Set the Z-index value of the 2D node.
            </summary>
        </member>
        <member name="M:GodotEngine.Node2D.get_z">
            <summary>
            Return the Z-index of the 2D node.
            </summary>
        </member>
        <member name="M:GodotEngine.Node2D.set_z_as_relative(System.Boolean)">
            <summary>
            Set the Z-index value as relative to the parent node of this 2D node. Thus, if this 2D node's Z-index value is 2 and its parent's effective Z-index is 3, then the effective Z-index value of this 2D node would be 3 + 2 = 5.
            </summary>
        </member>
        <member name="M:GodotEngine.Node2D.is_z_relative">
            <summary>
            Return true if the Z-index value of this 2D node is relative to its parent's. Else, return false.
            </summary>
        </member>
        <member name="M:GodotEngine.Node2D.edit_set_pivot(GodotEngine.Vector2)">
            <summary>
            Set the pivot position of the 2D node to 'pivot' value. This method is implemented only in some nodes that inherit Node2D.
            </summary>
        </member>
        <member name="T:GodotEngine.Object">
            <summary>
            Base class for all non built-in types. Everything not a built-in type starts the inheritance chain from this class.
            Objects do not manage memory, if inheriting from one the object will most likely have to be deleted manually (call the [method free] function from the script or delete from C++).
            Some derivates add memory management, such as [Reference] (which keeps a reference count and deletes itself automatically when no longer referenced) and [Node], which deletes the children tree when deleted.
            Objects export properties, which are mainly useful for storage and editing, but not really so much in programming. Properties are exported in [method _get_property_list] and handled in [method _get] and [method _set]. However, scripting languages and C++ have simpler means to export them.
            Objects also receive notifications ([method _notification]). Notifications are a simple way to notify the object about simple events, so they can all be handled together.
            </summary>
        </member>
        <member name="F:GodotEngine.Object.NOTIFICATION_POSTINITIALIZE">
            <summary>
            Called right when the object is initialized. Not available in script.
            </summary>
        </member>
        <member name="F:GodotEngine.Object.NOTIFICATION_PREDELETE">
            <summary>
            Called before the object is about to be deleted.
            </summary>
        </member>
        <member name="F:GodotEngine.Object.CONNECT_DEFERRED">
            <summary>
            Connect a signal in deferred mode. This way, signal emissions are stored in a queue, then set on idle time.
            </summary>
        </member>
        <member name="F:GodotEngine.Object.CONNECT_PERSIST">
            <summary>
            Persisting connections are saved when the object is serialized to file.
            </summary>
        </member>
        <member name="F:GodotEngine.Object.CONNECT_ONESHOT">
            <summary>
            One shot connections disconnect themselves after emission.
            </summary>
        </member>
        <member name="M:GodotEngine.Object.get_class">
            <summary>
            Return the class of the object as a string.
            </summary>
        </member>
        <member name="M:GodotEngine.Object.is_class(System.String)">
            <summary>
            Check the class of the object against a string (including inheritance).
            </summary>
        </member>
        <member name="M:GodotEngine.Object.set(System.String,System.Object)">
            <summary>
            Set property into the object.
            </summary>
        </member>
        <member name="M:GodotEngine.Object.get(System.String)">
            <summary>
            Get a property from the object.
            </summary>
        </member>
        <member name="M:GodotEngine.Object.get_property_list">
            <summary>
            Return the list of properties as an array of dictionaries, dictionaries contain: name:String, type:int (see TYPE_* enum in [@Global Scope]) and optionally: hint:int (see PROPERTY_HINT_* in [@Global Scope]), hint_string:String, usage:int (see PROPERTY_USAGE_* in [@Global Scope]).
            </summary>
        </member>
        <member name="M:GodotEngine.Object.notification(System.Int32,System.Boolean)">
            <summary>
            Notify the object of something.
            </summary>
        </member>
        <member name="M:GodotEngine.Object.get_instance_id">
            <summary>
            Return the instance ID. All objects have a unique instance ID.
            </summary>
        </member>
        <member name="M:GodotEngine.Object.get_script">
            <summary>
            Return the object script (or null if it doesn't have one).
            </summary>
        </member>
        <member name="M:GodotEngine.Object.set_meta(System.String,System.Object)">
            <summary>
            Set a metadata into the object. Metadata is serialized. Metadata can be [i]anything[/i].
            </summary>
        </member>
        <member name="M:GodotEngine.Object.get_meta(System.String)">
            <summary>
            Return a metadata from the object.
            </summary>
        </member>
        <member name="M:GodotEngine.Object.has_meta(System.String)">
            <summary>
            Return true if a metadata is found with the requested name.
            </summary>
        </member>
        <member name="M:GodotEngine.Object.get_meta_list">
            <summary>
            Return the list of metadata in the object.
            </summary>
        </member>
        <member name="M:GodotEngine.Object.add_user_signal(System.String,System.Object[])">
            <summary>
            Add a user signal (can be added anytime). Arguments are optional, but can be added as an array of dictionaries, each containing "name" and "type" (from [@Global Scope] TYPE_*).
            <param name="arguments">If the param is null, then the default value is new object[] {}</param>
            </summary>
        </member>
        <member name="M:GodotEngine.Object.get_signal_list">
            <summary>
            Return the list of signals as an array of dictionaries.
            </summary>
        </member>
        <member name="M:GodotEngine.Object.get_incoming_connections">
            <summary>
            Returns an [Array] of dictionaries with informations about signals that are connected to this object.
            Inside each [Dictionary] there are 3 fields:
            - "source" is a reference to signal emitter.
            - "signal_name" is name of connected signal.
            - "method_name" is a name of method to which signal is connected.
            </summary>
        </member>
        <member name="M:GodotEngine.Object.connect(System.String,GodotEngine.Object,System.String,System.Object[],System.Int32)">
            <summary>
            Connect a signal to a method at a target (member function). Binds are optional and are passed as extra arguments to the call. Flags specify optional deferred or one shot connections, see enum CONNECT_*. A signal can only be connected once to a method, and it will throw an error if already connected. If you want to avoid this, use [method is_connected] to check.
            <param name="binds">If the param is null, then the default value is new object[] {}</param>
            </summary>
        </member>
        <member name="M:GodotEngine.Object.disconnect(System.String,GodotEngine.Object,System.String)">
            <summary>
            Disconnect a signal from a method.
            </summary>
        </member>
        <member name="M:GodotEngine.Object.is_connected(System.String,GodotEngine.Object,System.String)">
            <summary>
            Return true if a connection exists for a given signal and target/method.
            </summary>
        </member>
        <member name="M:GodotEngine.Object.set_block_signals(System.Boolean)">
            <summary>
            If set to true, signal emission is blocked.
            </summary>
        </member>
        <member name="M:GodotEngine.Object.is_blocking_signals">
            <summary>
            Return true if signal emission blocking is enabled.
            </summary>
        </member>
        <member name="M:GodotEngine.Object.set_message_translation(System.Boolean)">
            <summary>
            Set true if this object can translate strings (in calls to tr() ). Default is true.
            </summary>
        </member>
        <member name="M:GodotEngine.Object.can_translate_messages">
            <summary>
            Return true if this object can translate strings.
            </summary>
        </member>
        <member name="M:GodotEngine.Object.XL_MESSAGE(System.String)">
            <summary>
            Deprecated, will go away.
            </summary>
        </member>
        <member name="M:GodotEngine.Object.tr(System.String)">
            <summary>
            Translate a message. Only works in message translation is enabled (which is by default). See [method set_message_translation].
            </summary>
        </member>
        <member name="T:GodotEngine.OmniLight">
            <summary>
            An OmniDirectional light is a type of [Light] node that emits lights in all directions. The light is attenuated through the distance and this attenuation can be configured by changing the energy, radius and attenuation parameters of [Light].
            </summary>
        </member>
        <member name="T:GodotEngine.OptionButton">
            <summary>
            OptionButton is a type button that provides a selectable list of items when pressed. The item selected becomes the "current" item and is displayed as the button text.
            </summary>
        </member>
        <member name="M:GodotEngine.OptionButton.add_item(System.String,System.Int32)">
            <summary>
            Add an item, with text "label" and (optionally) id. If no "id" is passed, "id" becomes the item index. New items are appended at the end.
            </summary>
        </member>
        <member name="M:GodotEngine.OptionButton.add_icon_item(GodotEngine.Texture,System.String,System.Int32)">
            <summary>
            Add an item, with a "texture" icon, text "label" and (optionally) id. If no "id" is passed, "id" becomes the item index. New items are appended at the end.
            </summary>
        </member>
        <member name="M:GodotEngine.OptionButton.set_item_text(System.Int32,System.String)">
            <summary>
            Set the text of an item at index "idx".
            </summary>
        </member>
        <member name="M:GodotEngine.OptionButton.set_item_icon(System.Int32,GodotEngine.Texture)">
            <summary>
            Set the icon of an item at index "idx".
            </summary>
        </member>
        <member name="M:GodotEngine.OptionButton.set_item_id(System.Int32,System.Int32)">
            <summary>
            Set the ID of an item at index "idx".
            </summary>
        </member>
        <member name="M:GodotEngine.OptionButton.get_item_text(System.Int32)">
            <summary>
            Return the text of the item at index "idx".
            </summary>
        </member>
        <member name="M:GodotEngine.OptionButton.get_item_icon(System.Int32)">
            <summary>
            Return the icon of the item at index "idx".
            </summary>
        </member>
        <member name="M:GodotEngine.OptionButton.get_item_id(System.Int32)">
            <summary>
            Return the ID of the item at index "idx".
            </summary>
        </member>
        <member name="M:GodotEngine.OptionButton.get_item_count">
            <summary>
            Return the amount of items in the OptionButton.
            </summary>
        </member>
        <member name="M:GodotEngine.OptionButton.add_separator">
            <summary>
            Add a separator to the list of items. Separators help to group items. Separator also takes up an index and is appended at the end.
            </summary>
        </member>
        <member name="M:GodotEngine.OptionButton.clear">
            <summary>
            Clear all the items in the [OptionButton].
            </summary>
        </member>
        <member name="M:GodotEngine.OptionButton.select(System.Int32)">
            <summary>
            Select an item by index and make it the current item.
            </summary>
        </member>
        <member name="M:GodotEngine.OptionButton.get_selected">
            <summary>
            Return the current item index
            </summary>
        </member>
        <member name="T:GodotEngine.PHashTranslation">
            <summary>
            Optimized translation. Uses real-time compressed translations, which results in very small dictionaries.
            </summary>
        </member>
        <member name="T:GodotEngine.PackedScene">
            <summary>
            TODO: explain ownership, and that node does not need to own itself
            </summary>
        </member>
        <member name="M:GodotEngine.PackedScene.pack(GodotEngine.Node)">
            <summary>
            Pack will ignore any sub-nodes not owned by given node. See [method Node.set_owner].
            </summary>
        </member>
        <member name="T:GodotEngine.PacketPeer">
            <summary>
            PacketPeer is an abstraction and base class for packet-based protocols (such as UDP). It provides an API for sending and receiving packets both as raw data or variables. This makes it easy to transfer data over a protocol, without having to encode data as low level bytes or having to worry about network ordering.
            </summary>
        </member>
        <member name="M:GodotEngine.PacketPeer.get_var">
            <summary>
            Get a Variant.
            </summary>
        </member>
        <member name="M:GodotEngine.PacketPeer.put_var(System.Object)">
            <summary>
            Send a Variant as a packet.
            </summary>
        </member>
        <member name="M:GodotEngine.PacketPeer.get_packet">
            <summary>
            Get a raw packet.
            </summary>
        </member>
        <member name="M:GodotEngine.PacketPeer.put_packet(System.Byte[])">
            <summary>
            Send a raw packet.
            </summary>
        </member>
        <member name="M:GodotEngine.PacketPeer.get_packet_error">
            <summary>
            Return the error state of the last packet received (via [method get_packet] and [method get_var]).
            </summary>
        </member>
        <member name="M:GodotEngine.PacketPeer.get_available_packet_count">
            <summary>
            Return the number of packets currently available in the ring-buffer.
            </summary>
        </member>
        <member name="T:GodotEngine.PacketPeerStream">
            <summary>
            PacketStreamPeer provides a wrapper for working using packets over a stream. This allows for using packet based code with StreamPeers. PacketPeerStream implements a custom protocol over the StreamPeer, so the user should not read or write to the wrapped StreamPeer directly.
            </summary>
        </member>
        <member name="T:GodotEngine.PacketPeerUDP">
            <summary>
            UDP packet peer. Can be used to send raw UDP packets as well as [Variant]\ s.
            </summary>
        </member>
        <member name="M:GodotEngine.PacketPeerUDP.listen(System.Int32,System.String,System.Int32)">
            <summary>
            Make this [PacketPeerUDP] listen on the "port" binding to "bind_address" with a buffer size "recv_buf_size".
            If "bind_address" is set as "*" (default), the peer will listen on all available addresses (both IPv4 and IPv6).
            If "bind_address" is set as "0.0.0.0" (for IPv4) or "::" (for IPv6), the peer will listen on all available addresses matching that IP type.
            If "bind_address" is set to any valid address (e.g. "192.168.1.101", "::1", etc), the peer will only listen on the interface with that addresses (or fail if no interface with the given address exists).
            </summary>
        </member>
        <member name="M:GodotEngine.PacketPeerUDP.close">
            <summary>
            Close the UDP socket the [PacketPeerUDP] is currently listening on.
            </summary>
        </member>
        <member name="M:GodotEngine.PacketPeerUDP.wait">
            <summary>
            Wait for a packet to arrive on the listening port, see [method listen].
            </summary>
        </member>
        <member name="M:GodotEngine.PacketPeerUDP.is_listening">
            <summary>
            Return whether this [PacketPeerUDP] is listening.
            </summary>
        </member>
        <member name="M:GodotEngine.PacketPeerUDP.get_packet_ip">
            <summary>
            Return the IP of the remote peer that sent the last packet(that was received with [method get_packet] or [method get_var]).
            </summary>
        </member>
        <member name="M:GodotEngine.PacketPeerUDP.get_packet_port">
            <summary>
            Return the port of the remote peer that sent the last packet(that was received with [method get_packet] or [method get_var]).
            </summary>
        </member>
        <member name="M:GodotEngine.PacketPeerUDP.set_dest_address(System.String,System.Int32)">
            <summary>
            Set the destination address and port for sending packets and variables, a hostname will be resolved using if valid.
            </summary>
        </member>
        <member name="T:GodotEngine.Panel">
            <summary>
            Panel is a [Control] that displays an opaque background. It's commonly used as a parent and container for other types of [Control] nodes.
            </summary>
        </member>
        <member name="T:GodotEngine.PanelContainer">
            <summary>
            Panel container type. This container fits controls inside of the delimited area of a stylebox. It's useful for giving controls an outline.
            </summary>
        </member>
        <member name="T:GodotEngine.ParallaxBackground">
            <summary>
            A ParallaxBackground will use one or more [ParallaxLayer] nodes to create a parallax scrolling background. Each [ParallaxLayer] can be set to move at different speeds relative to the camera movement, this can be used to create an illusion of depth in a 2D game.
            </summary>
        </member>
        <member name="M:GodotEngine.ParallaxBackground.set_scroll_base_offset(GodotEngine.Vector2)">
            <summary>
            Set the base offset in pixels of all children [ParallaxLayer] nodes.
            </summary>
        </member>
        <member name="M:GodotEngine.ParallaxBackground.get_scroll_base_offset">
            <summary>
            Return the base offset.
            </summary>
        </member>
        <member name="M:GodotEngine.ParallaxBackground.set_scroll_base_scale(GodotEngine.Vector2)">
            <summary>
            Set the base motion scale of all children [ParallaxLayer] nodes.
            </summary>
        </member>
        <member name="M:GodotEngine.ParallaxBackground.get_scroll_base_scale">
            <summary>
            Return the base motion scale.
            </summary>
        </member>
        <member name="M:GodotEngine.ParallaxBackground.set_limit_begin(GodotEngine.Vector2)">
            <summary>
            Set the left and top limits in pixels for scrolling to begin. If the camera is outside of this limit the background will not continue to scroll. If an axis is greater than or equal to the corresponding axis of limit_end, then it will not limit scrolling for that axis.
            </summary>
        </member>
        <member name="M:GodotEngine.ParallaxBackground.get_limit_begin">
            <summary>
            Return the beginning limit.
            </summary>
        </member>
        <member name="M:GodotEngine.ParallaxBackground.set_limit_end(GodotEngine.Vector2)">
            <summary>
            Set the right and bottom limits in pixels for scrolling to end. If the camera is outside of this limit the background will not continue to scroll. If an axis is less than or equal to the corresponding axis of limit_begin, then it will not limit scrolling for that axis.
            </summary>
        </member>
        <member name="M:GodotEngine.ParallaxBackground.get_limit_end">
            <summary>
            Return the ending limit.
            </summary>
        </member>
        <member name="M:GodotEngine.ParallaxBackground.set_ignore_camera_zoom(System.Boolean)">
            <summary>
            Set to true for all child [ParallaxLayer] nodes to not be affected by the zoom level of the camera.
            </summary>
        </member>
        <member name="M:GodotEngine.ParallaxBackground.is_ignore_camera_zoom">
            <summary>
            Return ignoring camera zoom.
            </summary>
        </member>
        <member name="T:GodotEngine.ParallaxLayer">
            <summary>
            A ParallaxLayer must be the child of a [ParallaxBackground] node. All child nodes will be affected by the parallax scrolling of this layer.
            </summary>
        </member>
        <member name="M:GodotEngine.ParallaxLayer.set_motion_scale(GodotEngine.Vector2)">
            <summary>
            Set the motion scale of the ParallaxLayer. If an axis is set to 0 then it will not move at all, it will stick with the camera.
            </summary>
        </member>
        <member name="M:GodotEngine.ParallaxLayer.get_motion_scale">
            <summary>
            Return the motion scale of the ParallaxLayer.
            </summary>
        </member>
        <member name="M:GodotEngine.ParallaxLayer.set_mirroring(GodotEngine.Vector2)">
            <summary>
            Set the mirroring of the ParallaxLayer. If an axis is set to 0 then that axis will have no mirroring.
            </summary>
        </member>
        <member name="M:GodotEngine.ParallaxLayer.get_mirroring">
            <summary>
            Return the mirroring of the ParallaxLayer.
            </summary>
        </member>
        <member name="T:GodotEngine.Particles2D">
            <summary>
            Particles2D is a particle system 2D [Node] that is used to simulate several types of particle effects, such as explosions, rain, snow, fireflies, or other magical-like shinny sparkles. Particles are drawn using impostors, and given their dynamic behavior, the user must provide a visibility bounding box (although helpers to create one automatically exist).
            </summary>
        </member>
        <member name="M:GodotEngine.Particles2D.set_emitting(System.Boolean)">
            <summary>
            If this is set to true then the particle emitter will emit particles, if its false it will not.
            </summary>
        </member>
        <member name="M:GodotEngine.Particles2D.set_amount(System.Int32)">
            <summary>
            Sets the amount of particles spawned at each emission
            </summary>
        </member>
        <member name="M:GodotEngine.Particles2D.set_lifetime(System.Single)">
            <summary>
            Sets the amount of seconds that each particle will be visible.
            </summary>
        </member>
        <member name="M:GodotEngine.Particles2D.is_emitting">
            <summary>
            Returns whether this emitter is currently emitting or not
            </summary>
        </member>
        <member name="M:GodotEngine.Particles2D.get_amount">
            <summary>
            Returns the amount of particles spawned at each emission
            </summary>
        </member>
        <member name="M:GodotEngine.Particles2D.get_lifetime">
            <summary>
            Gets the amount of seconds that each particle will be visible.
            </summary>
        </member>
        <member name="M:GodotEngine.Particles2D.get_texture">
            <summary>
            Returns the texture for emitted particles
            </summary>
        </member>
        <member name="T:GodotEngine.Path">
            <summary>
            This class is a container/Node-ification of a [Curve3D], so it can have [Spatial] properties and [Node] info.
            </summary>
        </member>
        <member name="M:GodotEngine.Path.set_curve(GodotEngine.Curve3D)">
            <summary>
            Sets the [Curve3D].
            </summary>
        </member>
        <member name="M:GodotEngine.Path.get_curve">
            <summary>
            Returns the [Curve3D] contained.
            </summary>
        </member>
        <member name="T:GodotEngine.Path2D">
            <summary>
            This class is a container/Node-ification of a [Curve2D], so it can have [Node2D] properties and [Node] info.
            </summary>
        </member>
        <member name="M:GodotEngine.Path2D.set_curve(GodotEngine.Curve2D)">
            <summary>
            Sets the [Curve2D].
            </summary>
        </member>
        <member name="M:GodotEngine.Path2D.get_curve">
            <summary>
            Returns the [Curve2D] contained.
            </summary>
        </member>
        <member name="T:GodotEngine.PathFollow">
            <summary>
            This node takes its parent [Path], and returns the coordinates of a point within it, given a distance from the first vertex.
            It is useful for making other nodes follow a path, without coding the movement pattern. For that, the nodes must be descendants of this node. Then, when setting an offset in this node, the descendant nodes will move accordingly.
            </summary>
        </member>
        <member name="F:GodotEngine.PathFollow.ROTATION_NONE">
            <summary>
            Forbids the PathFollow to rotate.
            </summary>
        </member>
        <member name="F:GodotEngine.PathFollow.ROTATION_Y">
            <summary>
            Allows the PathFollow to rotate in the Y axis only.
            </summary>
        </member>
        <member name="F:GodotEngine.PathFollow.ROTATION_XY">
            <summary>
            Allows the PathFollow to rotate in both the X, and Y axes.
            </summary>
        </member>
        <member name="F:GodotEngine.PathFollow.ROTATION_XYZ">
            <summary>
            Allows the PathFollow to rotate in any axis.
            </summary>
        </member>
        <member name="M:GodotEngine.PathFollow.set_offset(System.Single)">
            <summary>
            Sets the distance from the first vertex, measured in 3D units along the path. This sets this node's position to a point within the path.
            </summary>
        </member>
        <member name="M:GodotEngine.PathFollow.get_offset">
            <summary>
            Returns the distance along the path in 3D units.
            </summary>
        </member>
        <member name="M:GodotEngine.PathFollow.set_h_offset(System.Single)">
            <summary>
            Moves this node in the X axis. As this node's position will be set every time its offset is set, this allows many PathFollow to share the same curve (and thus the same movement pattern), yet not return the same position for a given path offset.
            A similar effect may be achieved moving the this node's descendants.
            </summary>
        </member>
        <member name="M:GodotEngine.PathFollow.get_h_offset">
            <summary>
            Returns the X displacement this node has from its parent [Path].
            </summary>
        </member>
        <member name="M:GodotEngine.PathFollow.set_v_offset(System.Single)">
            <summary>
            Moves this node in the Y axis, for the same reasons of [method set_h_offset].
            </summary>
        </member>
        <member name="M:GodotEngine.PathFollow.get_v_offset">
            <summary>
            Returns the Y displacement this node has from its parent [Path].
            </summary>
        </member>
        <member name="M:GodotEngine.PathFollow.set_unit_offset(System.Single)">
            <summary>
            Sets the distance from the first vertex, considering 0.0 as the first vertex and 1.0 as the last. This is just another way of expressing the offset within the path, as the offset supplied is multiplied internally by the path's length.
            </summary>
        </member>
        <member name="M:GodotEngine.PathFollow.get_unit_offset">
            <summary>
            Returns the distance along the path as a number in the range 0.0 (for the first vertex) to 1.0 (for the last).
            </summary>
        </member>
        <member name="M:GodotEngine.PathFollow.set_rotation_mode(System.Int32)">
            <summary>
            Allows or forbids rotation on one or more axes, per the constants below.
            </summary>
        </member>
        <member name="M:GodotEngine.PathFollow.get_rotation_mode">
            <summary>
            Returns the rotation mode. The constants below list which axes are allowed to rotate for each mode.
            </summary>
        </member>
        <member name="M:GodotEngine.PathFollow.set_cubic_interpolation(System.Boolean)">
            <summary>
            The points along the [Curve3D] of the [Path] are precomputed before use, for faster calculations. The point at the requested offset is then calculated interpolating between two adjacent cached points. This may present a problem if the curve makes sharp turns, as the cached points may not follow the curve closely enough.
            There are two answers to this problem: Either increase the number of cached points and increase memory consumption, or make a cubic interpolation between two points at the cost of (slightly) slower calculations.
            This method controls whether the position between two cached points is interpolated linearly, or cubicly.
            </summary>
        </member>
        <member name="M:GodotEngine.PathFollow.get_cubic_interpolation">
            <summary>
            This method returns whether the position between two cached points (see [method set_cubic_interpolation]) is interpolated linearly, or cubicly.
            </summary>
        </member>
        <member name="M:GodotEngine.PathFollow.set_loop(System.Boolean)">
            <summary>
            If set, any offset outside the path's length (whether set by [method set_offset] or [method set_unit_offset] will wrap around, instead of stopping at the ends. Set it for cyclic paths.
            </summary>
        </member>
        <member name="M:GodotEngine.PathFollow.has_loop">
            <summary>
            Returns whether this node wraps its offsets around, or truncates them to the path ends.
            </summary>
        </member>
        <member name="T:GodotEngine.PathFollow2D">
            <summary>
            This node takes its parent [Path2D], and returns the coordinates of a point within it, given a distance from the first vertex.
            It is useful for making other nodes follow a path, without coding the movement pattern. For that, the nodes must be descendants of this node. Then, when setting an offset in this node, the descendant nodes will move accordingly.
            </summary>
        </member>
        <member name="M:GodotEngine.PathFollow2D.set_offset(System.Single)">
            <summary>
            Sets the distance from the first vertex, measured in pixels along the path. This sets this node's position to a point within the path.
            </summary>
        </member>
        <member name="M:GodotEngine.PathFollow2D.get_offset">
            <summary>
            Returns the distance along the path in pixels.
            </summary>
        </member>
        <member name="M:GodotEngine.PathFollow2D.set_h_offset(System.Single)">
            <summary>
            Moves this node horizontally. As this node's position will be set every time its offset is set, this allows many PathFollow2D to share the same curve (and thus the same movement pattern), yet not return the same position for a given path offset.
            A similar effect may be achieved moving this node's descendants.
            </summary>
        </member>
        <member name="M:GodotEngine.PathFollow2D.get_h_offset">
            <summary>
            Returns the horizontal displacement this node has from its parent [Path2D].
            </summary>
        </member>
        <member name="M:GodotEngine.PathFollow2D.set_v_offset(System.Single)">
            <summary>
            Moves the PathFollow2D vertically, for the same reasons of [method set_h_offset].
            </summary>
        </member>
        <member name="M:GodotEngine.PathFollow2D.get_v_offset">
            <summary>
            Returns the vertical displacement this node has from its parent [Path2D].
            </summary>
        </member>
        <member name="M:GodotEngine.PathFollow2D.set_unit_offset(System.Single)">
            <summary>
            Sets the distance from the first vertex, considering 0.0 as the first vertex and 1.0 as the last. This is just another way of expressing the offset within the path, as the offset supplied is multiplied internally by the path's length.
            </summary>
        </member>
        <member name="M:GodotEngine.PathFollow2D.get_unit_offset">
            <summary>
            Returns the distance along the path as a number in the range 0.0 (for the first vertex) to 1.0 (for the last).
            </summary>
        </member>
        <member name="M:GodotEngine.PathFollow2D.set_rotate(System.Boolean)">
            <summary>
            If set, this node rotates to follow the path, making its descendants rotate.
            </summary>
        </member>
        <member name="M:GodotEngine.PathFollow2D.is_rotating">
            <summary>
            Returns whether this node rotates to follow the path.
            </summary>
        </member>
        <member name="M:GodotEngine.PathFollow2D.set_cubic_interpolation(System.Boolean)">
            <summary>
            The points along the [Curve2D] of the [Path2D] are precomputed before use, for faster calculations. The point at the requested offset is then calculated interpolating between two adjacent cached points. This may present a problem if the curve makes sharp turns, as the cached points may not follow the curve closely enough.
            There are two answers to this problem: Either increase the number of cached points and increase memory consumption, or make a cubic interpolation between two points at the cost of (slightly) slower calculations.
            This method controls whether the position between two cached points is interpolated linearly, or cubicly.
            </summary>
        </member>
        <member name="M:GodotEngine.PathFollow2D.get_cubic_interpolation">
            <summary>
            This method returns whether the position between two cached points (see [method set_cubic_interpolation]) is interpolated linearly, or cubicly.
            </summary>
        </member>
        <member name="M:GodotEngine.PathFollow2D.set_loop(System.Boolean)">
            <summary>
            If set, any offset outside the path's length (whether set by [method set_offset] or [method set_unit_offset] will wrap around, instead of stopping at the ends. Set it for cyclic paths.
            </summary>
        </member>
        <member name="M:GodotEngine.PathFollow2D.has_loop">
            <summary>
            Returns whether this node wraps its offsets around, or truncates them to the path ends.
            </summary>
        </member>
        <member name="T:GodotEngine.Physics2DDirectBodyState">
            <summary>
            Direct access object to a physics body in the [Physics2DServer]. This object is passed via the direct state callback of rigid/character bodies, and is intended for changing the direct state of that body.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DDirectBodyState.get_total_gravity">
            <summary>
            Return the total gravity vector being currently applied to this body.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DDirectBodyState.get_total_linear_damp">
            <summary>
            Return the rate at which the body stops moving, if there are not any other forces moving it.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DDirectBodyState.get_total_angular_damp">
            <summary>
            Return the rate at which the body stops rotating, if there are not any other forces moving it.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DDirectBodyState.get_inverse_mass">
            <summary>
            Return the inverse of the mass of the body.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DDirectBodyState.get_inverse_inertia">
            <summary>
            Return the inverse of the inertia of the body.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DDirectBodyState.set_linear_velocity(GodotEngine.Vector2)">
            <summary>
            Change the linear velocity of the body.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DDirectBodyState.get_linear_velocity">
            <summary>
            Return the current linear velocity of the body.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DDirectBodyState.set_angular_velocity(System.Single)">
            <summary>
            Change the angular velocity of the body.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DDirectBodyState.get_angular_velocity">
            <summary>
            Return the angular velocity of the body.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DDirectBodyState.set_transform(GodotEngine.Transform2D)">
            <summary>
            Change the transform matrix of the body.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DDirectBodyState.get_transform">
            <summary>
            Return the transform matrix of the body.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DDirectBodyState.set_sleep_state(System.Boolean)">
            <summary>
            Set the sleeping state of the body, only affects character/rigid bodies.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DDirectBodyState.is_sleeping">
            <summary>
            Return true if this body is currently sleeping (not active).
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DDirectBodyState.get_contact_count">
            <summary>
            Return the amount of contacts this body has with other bodies. Note that by default this returns 0 unless bodies are configured to log contacts.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DDirectBodyState.get_contact_local_pos(System.Int32)">
            <summary>
            Return the local position (of this body) of the contact point.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DDirectBodyState.get_contact_local_normal(System.Int32)">
            <summary>
            Return the local normal (of this body) of the contact point.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DDirectBodyState.get_contact_local_shape(System.Int32)">
            <summary>
            Return the local shape index of the collision.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DDirectBodyState.get_contact_collider(System.Int32)">
            <summary>
            Return the [RID] of the collider.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DDirectBodyState.get_contact_collider_pos(System.Int32)">
            <summary>
            Return the contact position in the collider.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DDirectBodyState.get_contact_collider_id(System.Int32)">
            <summary>
            Return the object id of the collider.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DDirectBodyState.get_contact_collider_object(System.Int32)">
            <summary>
            Return the collider object, this depends on how it was created (will return a scene node if such was used to create it).
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DDirectBodyState.get_contact_collider_shape(System.Int32)">
            <summary>
            Return the collider shape index.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DDirectBodyState.get_contact_collider_shape_metadata(System.Int32)">
            <summary>
            Return the metadata of the collided shape. This metadata is different from [method Object.get_meta], and is set with [method Physics2DServer.shape_set_data].
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DDirectBodyState.get_contact_collider_velocity_at_pos(System.Int32)">
            <summary>
            Return the linear velocity vector at contact point of the collider.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DDirectBodyState.get_step">
            <summary>
            Return the timestep (delta) used for the simulation.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DDirectBodyState.integrate_forces">
            <summary>
            Call the built-in force integration code.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DDirectBodyState.get_space_state">
            <summary>
            Return the current state of space, useful for queries.
            </summary>
        </member>
        <member name="T:GodotEngine.Physics2DDirectBodyStateSW">
            <summary>
            Software implementation of [Physics2DDirectBodyState]. This object exposes no new methods or properties and should not be used, as [Physics2DDirectBodyState] selects the best implementation available.
            </summary>
        </member>
        <member name="T:GodotEngine.Physics2DDirectSpaceState">
            <summary>
            Direct access object to a space in the [Physics2DServer]. It's used mainly to do queries against objects and areas residing in a given space.
            </summary>
        </member>
        <member name="F:GodotEngine.Physics2DDirectSpaceState.TYPE_MASK_STATIC_BODY">
            <summary>
            Check for collisions with static bodies.
            </summary>
        </member>
        <member name="F:GodotEngine.Physics2DDirectSpaceState.TYPE_MASK_KINEMATIC_BODY">
            <summary>
            Check for collisions with kinematic bodies.
            </summary>
        </member>
        <member name="F:GodotEngine.Physics2DDirectSpaceState.TYPE_MASK_RIGID_BODY">
            <summary>
            Check for collisions with rigid bodies.
            </summary>
        </member>
        <member name="F:GodotEngine.Physics2DDirectSpaceState.TYPE_MASK_CHARACTER_BODY">
            <summary>
            Check for collisions with rigid bodies in character mode.
            </summary>
        </member>
        <member name="F:GodotEngine.Physics2DDirectSpaceState.TYPE_MASK_AREA">
            <summary>
            Check for collisions with areas.
            </summary>
        </member>
        <member name="F:GodotEngine.Physics2DDirectSpaceState.TYPE_MASK_COLLISION">
            <summary>
            Check for collisions with any kind of bodies (but not areas).
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DDirectSpaceState.intersect_point(GodotEngine.Vector2,System.Int32,System.Object[],System.Int32,System.Int32)">
            <summary>
            Check whether a point is inside any shape. The shapes the point is inside of are returned in an array containing dictionaries with the following fields:
            shape: Shape index within the object the point is in.
            metadata: Metadata of the shape the point is in. This metadata is different from [method Object.get_meta], and is set with [method Physics2DServer.shape_set_data].
            collider_id: Id of the object the point is in.
            collider: Object the point is inside of.
            rid: [RID] of the object the point is in.
            Additionally, the method can take an array of objects or [RID]\ s that are to be excluded from collisions, a bitmask representing the physics layers to check in, and another bitmask for the types of objects to check (see TYPE_MASK_* constants).
            <param name="exclude">If the param is null, then the default value is new object[] {}</param>
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DDirectSpaceState.intersect_ray(GodotEngine.Vector2,GodotEngine.Vector2,System.Object[],System.Int32,System.Int32)">
            <summary>
            Intersect a ray in a given space. The returned object is a dictionary with the following fields:
            position: Place where ray is stopped.
            normal: Normal of the object at the point where the ray was stopped.
            shape: Shape index within the object against which the ray was stopped.
            metadata: Metadata of the shape against which the ray was stopped. This metadata is different from [method Object.get_meta], and is set with [method Physics2DServer.shape_set_data].
            collider_id: Id of the object against which the ray was stopped.
            collider: Object against which the ray was stopped.
            rid: [RID] of the object against which the ray was stopped.
            If the ray did not intersect anything, then an empty dictionary (dir.empty()==true) is returned instead.
            Additionally, the method can take an array of objects or [RID]\ s that are to be excluded from collisions, a bitmask representing the physics layers to check in, and another bitmask for the types of objects to check (see TYPE_MASK_* constants).
            <param name="exclude">If the param is null, then the default value is new object[] {}</param>
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DDirectSpaceState.intersect_shape(GodotEngine.Physics2DShapeQueryParameters,System.Int32)">
            <summary>
            Check the intersections of a shape, given through a [Physics2DShapeQueryParameters] object, against the space. The intersected shapes are returned in an array containing dictionaries with the following fields:
            shape: Shape index within the object the shape intersected.
            metadata: Metadata of the shape intersected by the shape given through the [Physics2DShapeQueryParameters]. This metadata is different from [method Object.get_meta], and is set with [method Physics2DServer.shape_set_data].
            collider_id: Id of the object the shape intersected.
            collider: Object the shape intersected.
            rid: [RID] of the object the shape intersected.
            The number of intersections can be limited with the second parameter, to reduce the processing time.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DDirectSpaceState.cast_motion(GodotEngine.Physics2DShapeQueryParameters)">
            <summary>
            Check whether the shape can travel to a point. If it can, the method will return an array with two floats: The first is the distance the shape can move in that direction without colliding, and the second is the distance at which it will collide.
            If the shape can not move, the array will be empty.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DDirectSpaceState.collide_shape(GodotEngine.Physics2DShapeQueryParameters,System.Int32)">
            <summary>
            Check the intersections of a shape, given through a [Physics2DShapeQueryParameters] object, against the space. The resulting array contains a list of points where the shape intersects another. Like with [method intersect_shape], the number of returned results can be limited to save processing time.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DDirectSpaceState.get_rest_info(GodotEngine.Physics2DShapeQueryParameters)">
            <summary>
            Check the intersections of a shape, given through a [Physics2DShapeQueryParameters] object, against the space. If it collides with more than a shape, the nearest one is selected. The returned object is a dictionary containing the following fields:
            pointo: Place where the shapes intersect.
            normal: Normal of the object at the point where the shapes intersect.
            shape: Shape index within the object against which the shape intersected.
            metadata: Metadata of the shape against which the shape intersected. This metadata is different from [method Object.get_meta], and is set with [method Physics2DServer.shape_set_data].
            collider_id: Id of the object against which the shape intersected.
            collider: Object against which the shape intersected.
            rid: [RID] of the object against which the shape intersected.
            linear_velocity: The movement vector of the object the shape intersected, if it was a body. If it was an area, it is (0,0).
            If the shape did not intersect anything, then an empty dictionary (dir.empty()==true) is returned instead.
            </summary>
        </member>
        <member name="T:GodotEngine.Physics2DServer">
            <summary>
            Physics 2D Server is the server responsible for all 2D physics. It can create many kinds of physics objects, but does not insert them on the node tree.
            </summary>
        </member>
        <member name="F:GodotEngine.Physics2DServer.SPACE_PARAM_CONTACT_RECYCLE_RADIUS">
            <summary>
            Constant to set/get the maximum distance a pair of bodies has to move before their collision status has to be recalculated.
            </summary>
        </member>
        <member name="F:GodotEngine.Physics2DServer.SPACE_PARAM_CONTACT_MAX_SEPARATION">
            <summary>
            Constant to set/get the maximum distance a shape can be from another before they are considered separated.
            </summary>
        </member>
        <member name="F:GodotEngine.Physics2DServer.SPACE_PARAM_BODY_MAX_ALLOWED_PENETRATION">
            <summary>
            Constant to set/get the maximum distance a shape can penetrate another shape before it is considered a collision.
            </summary>
        </member>
        <member name="F:GodotEngine.Physics2DServer.SPACE_PARAM_BODY_TIME_TO_SLEEP">
            <summary>
            Constant to set/get the maximum time of activity. A body marked as potentially inactive for both linear and angular velocity will be put to sleep after this time.
            </summary>
        </member>
        <member name="F:GodotEngine.Physics2DServer.SPACE_PARAM_CONSTRAINT_DEFAULT_BIAS">
            <summary>
            Constant to set/get the default solver bias for all physics constraints. A solver bias is a factor controlling how much two objects "rebound", after violating a constraint, to avoid leaving them in that state because of numerical imprecision.
            </summary>
        </member>
        <member name="F:GodotEngine.Physics2DServer.SHAPE_LINE">
            <summary>
            This is the constant for creating line shapes. A line shape is an infinite line with an origin point, and a normal. Thus, it can be used for front/behind checks.
            </summary>
        </member>
        <member name="F:GodotEngine.Physics2DServer.SHAPE_SEGMENT">
            <summary>
            This is the constant for creating segment shapes. A segment shape is a line from a point A to a point B. It can be checked for intersections.
            </summary>
        </member>
        <member name="F:GodotEngine.Physics2DServer.SHAPE_CIRCLE">
            <summary>
            This is the constant for creating circle shapes. A circle shape only has a radius. It can be used for intersections and inside/outside checks.
            </summary>
        </member>
        <member name="F:GodotEngine.Physics2DServer.SHAPE_RECTANGLE">
            <summary>
            This is the constant for creating rectangle shapes. A rectangle shape is defined by a width and a height. It can be used for intersections and inside/outside checks.
            </summary>
        </member>
        <member name="F:GodotEngine.Physics2DServer.SHAPE_CAPSULE">
            <summary>
            This is the constant for creating capsule shapes. A capsule shape is defined by a radius and a length. It can be used for intersections and inside/outside checks.
            </summary>
        </member>
        <member name="F:GodotEngine.Physics2DServer.SHAPE_CONVEX_POLYGON">
            <summary>
            This is the constant for creating convex polygon shapes. A polygon is defined by a list of points. It can be used for intersections and inside/outside checks. Unlike the method [method CollisionPolygon2D.set_polygon], polygons modified with [method shape_set_data] do not verify that the points supplied form, in fact, a convex polygon.
            </summary>
        </member>
        <member name="F:GodotEngine.Physics2DServer.SHAPE_CONCAVE_POLYGON">
            <summary>
            This is the constant for creating concave polygon shapes. A polygon is defined by a list of points. It can be used for intersections checks, but not for inside/outside checks.
            </summary>
        </member>
        <member name="F:GodotEngine.Physics2DServer.SHAPE_CUSTOM">
            <summary>
            This constant is used internally by the engine. Any attempt to create this kind of shape results in an error.
            </summary>
        </member>
        <member name="F:GodotEngine.Physics2DServer.AREA_PARAM_GRAVITY">
            <summary>
            Constant to set/get gravity strength in an area.
            </summary>
        </member>
        <member name="F:GodotEngine.Physics2DServer.AREA_PARAM_GRAVITY_VECTOR">
            <summary>
            Constant to set/get gravity vector/center in an area.
            </summary>
        </member>
        <member name="F:GodotEngine.Physics2DServer.AREA_PARAM_GRAVITY_IS_POINT">
            <summary>
            Constant to set/get whether the gravity vector of an area is a direction, or a center point.
            </summary>
        </member>
        <member name="F:GodotEngine.Physics2DServer.AREA_PARAM_GRAVITY_DISTANCE_SCALE">
            <summary>
            Constant to set/get the falloff factor for point gravity of an area. The greater this value is, the faster the strength of gravity decreases with the square of distance.
            </summary>
        </member>
        <member name="F:GodotEngine.Physics2DServer.AREA_PARAM_GRAVITY_POINT_ATTENUATION">
            <summary>
            This constant was used to set/get the falloff factor for point gravity. It has been superseded by AREA_PARAM_GRAVITY_DISTANCE_SCALE.
            </summary>
        </member>
        <member name="F:GodotEngine.Physics2DServer.AREA_PARAM_LINEAR_DAMP">
            <summary>
            Constant to set/get the linear dampening factor of an area.
            </summary>
        </member>
        <member name="F:GodotEngine.Physics2DServer.AREA_PARAM_ANGULAR_DAMP">
            <summary>
            Constant to set/get the angular dampening factor of an area.
            </summary>
        </member>
        <member name="F:GodotEngine.Physics2DServer.AREA_PARAM_PRIORITY">
            <summary>
            Constant to set/get the priority (order of processing) of an area.
            </summary>
        </member>
        <member name="F:GodotEngine.Physics2DServer.AREA_SPACE_OVERRIDE_DISABLED">
            <summary>
            This area does not affect gravity/damp. These are generally areas that exist only to detect collisions, and objects entering or exiting them.
            </summary>
        </member>
        <member name="F:GodotEngine.Physics2DServer.AREA_SPACE_OVERRIDE_COMBINE">
            <summary>
            This area adds its gravity/damp values to whatever has been calculated so far. This way, many overlapping areas can combine their physics to make interesting effects.
            </summary>
        </member>
        <member name="F:GodotEngine.Physics2DServer.AREA_SPACE_OVERRIDE_COMBINE_REPLACE">
            <summary>
            This area adds its gravity/damp values to whatever has been calculated so far. Then stops taking into account the rest of the areas, even the default one.
            </summary>
        </member>
        <member name="F:GodotEngine.Physics2DServer.AREA_SPACE_OVERRIDE_REPLACE">
            <summary>
            This area replaces any gravity/damp, even the default one, and stops taking into account the rest of the areas.
            </summary>
        </member>
        <member name="F:GodotEngine.Physics2DServer.AREA_SPACE_OVERRIDE_REPLACE_COMBINE">
            <summary>
            This area replaces any gravity/damp calculated so far, but keeps calculating the rest of the areas, down to the default one.
            </summary>
        </member>
        <member name="F:GodotEngine.Physics2DServer.BODY_MODE_STATIC">
            <summary>
            Constant for static bodies.
            </summary>
        </member>
        <member name="F:GodotEngine.Physics2DServer.BODY_MODE_KINEMATIC">
            <summary>
            Constant for kinematic bodies.
            </summary>
        </member>
        <member name="F:GodotEngine.Physics2DServer.BODY_MODE_RIGID">
            <summary>
            Constant for rigid bodies.
            </summary>
        </member>
        <member name="F:GodotEngine.Physics2DServer.BODY_MODE_CHARACTER">
            <summary>
            Constant for rigid bodies in character mode. In this mode, a body can not rotate, and only its linear velocity is affected by physics.
            </summary>
        </member>
        <member name="F:GodotEngine.Physics2DServer.BODY_PARAM_BOUNCE">
            <summary>
            Constant to set/get a body's bounce factor.
            </summary>
        </member>
        <member name="F:GodotEngine.Physics2DServer.BODY_PARAM_FRICTION">
            <summary>
            Constant to set/get a body's friction.
            </summary>
        </member>
        <member name="F:GodotEngine.Physics2DServer.BODY_PARAM_MASS">
            <summary>
            Constant to set/get a body's mass.
            </summary>
        </member>
        <member name="F:GodotEngine.Physics2DServer.BODY_PARAM_INERTIA">
            <summary>
            Constant to set/get a body's inertia.
            </summary>
        </member>
        <member name="F:GodotEngine.Physics2DServer.BODY_PARAM_GRAVITY_SCALE">
            <summary>
            Constant to set/get a body's gravity multiplier.
            </summary>
        </member>
        <member name="F:GodotEngine.Physics2DServer.BODY_PARAM_LINEAR_DAMP">
            <summary>
            Constant to set/get a body's linear dampening factor.
            </summary>
        </member>
        <member name="F:GodotEngine.Physics2DServer.BODY_PARAM_ANGULAR_DAMP">
            <summary>
            Constant to set/get a body's angular dampening factor.
            </summary>
        </member>
        <member name="F:GodotEngine.Physics2DServer.BODY_PARAM_MAX">
            <summary>
            This is the last ID for body parameters. Any attempt to set this property is ignored. Any attempt to get it returns 0.
            </summary>
        </member>
        <member name="F:GodotEngine.Physics2DServer.BODY_STATE_TRANSFORM">
            <summary>
            Constant to set/get the current transform matrix of the body.
            </summary>
        </member>
        <member name="F:GodotEngine.Physics2DServer.BODY_STATE_LINEAR_VELOCITY">
            <summary>
            Constant to set/get the current linear velocity of the body.
            </summary>
        </member>
        <member name="F:GodotEngine.Physics2DServer.BODY_STATE_ANGULAR_VELOCITY">
            <summary>
            Constant to set/get the current angular velocity of the body.
            </summary>
        </member>
        <member name="F:GodotEngine.Physics2DServer.BODY_STATE_SLEEPING">
            <summary>
            Constant to sleep/wake up a body, or to get whether it is sleeping.
            </summary>
        </member>
        <member name="F:GodotEngine.Physics2DServer.BODY_STATE_CAN_SLEEP">
            <summary>
            Constant to set/get whether the body can sleep.
            </summary>
        </member>
        <member name="F:GodotEngine.Physics2DServer.JOINT_PIN">
            <summary>
            Constant to create pin joints.
            </summary>
        </member>
        <member name="F:GodotEngine.Physics2DServer.JOINT_GROOVE">
            <summary>
            Constant to create groove joints.
            </summary>
        </member>
        <member name="F:GodotEngine.Physics2DServer.JOINT_DAMPED_SPRING">
            <summary>
            Constant to create damped spring joints.
            </summary>
        </member>
        <member name="F:GodotEngine.Physics2DServer.DAMPED_STRING_REST_LENGTH">
            <summary>
            Set the resting length of the spring joint. The joint will always try to go to back this length when pulled apart.
            </summary>
        </member>
        <member name="F:GodotEngine.Physics2DServer.DAMPED_STRING_STIFFNESS">
            <summary>
            Set the stiffness of the spring joint. The joint applies a force equal to the stiffness times the distance from its resting length.
            </summary>
        </member>
        <member name="F:GodotEngine.Physics2DServer.DAMPED_STRING_DAMPING">
            <summary>
            Set the damping ratio of the spring joint. A value of 0 indicates an undamped spring, while 1 causes the system to reach equilibrium as fast as possible (critical damping).
            </summary>
        </member>
        <member name="F:GodotEngine.Physics2DServer.CCD_MODE_DISABLED">
            <summary>
            Disables continuous collision detection. This is the fastest way to detect body collisions, but can miss small, fast-moving objects.
            </summary>
        </member>
        <member name="F:GodotEngine.Physics2DServer.CCD_MODE_CAST_RAY">
            <summary>
            Enables continuous collision detection by raycasting. It is faster than shapecasting, but less precise.
            </summary>
        </member>
        <member name="F:GodotEngine.Physics2DServer.CCD_MODE_CAST_SHAPE">
            <summary>
            Enables continuous collision detection by shapecasting. It is the slowest CCD method, and the most precise.
            </summary>
        </member>
        <member name="F:GodotEngine.Physics2DServer.AREA_BODY_ADDED">
            <summary>
            The value of the first parameter and area callback function receives, when an object enters one of its shapes.
            </summary>
        </member>
        <member name="F:GodotEngine.Physics2DServer.AREA_BODY_REMOVED">
            <summary>
            The value of the first parameter and area callback function receives, when an object exits one of its shapes.
            </summary>
        </member>
        <member name="F:GodotEngine.Physics2DServer.INFO_ACTIVE_OBJECTS">
            <summary>
            Constant to get the number of objects that are not sleeping.
            </summary>
        </member>
        <member name="F:GodotEngine.Physics2DServer.INFO_COLLISION_PAIRS">
            <summary>
            Constant to get the number of possible collisions.
            </summary>
        </member>
        <member name="F:GodotEngine.Physics2DServer.INFO_ISLAND_COUNT">
            <summary>
            Constant to get the number of space regions where a collision could occur.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.shape_create(System.Int32)">
            <summary>
            Create a shape of type SHAPE_*. Does not assign it to a body or an area. To do so, you must use [method area_set_shape] or [method body_set_shape].
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.shape_set_data(GodotEngine.RID,System.Object)">
            <summary>
            Set the shape data that defines its shape and size. The data to be passed depends on the kind of shape created [method shape_get_type].
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.shape_get_type(GodotEngine.RID)">
            <summary>
            Return the type of shape (see SHAPE_* constants).
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.shape_get_data(GodotEngine.RID)">
            <summary>
            Return the shape data.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.space_create">
            <summary>
            Create a space. A space is a collection of parameters for the physics engine that can be assigned to an area or a body. It can be assigned to an area with [method area_set_space], or to a body with [method body_set_space].
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.space_set_active(GodotEngine.RID,System.Boolean)">
            <summary>
            Mark a space as active. It will not have an effect, unless it is assigned to an area or body.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.space_is_active(GodotEngine.RID)">
            <summary>
            Return whether the space is active.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.space_set_param(GodotEngine.RID,System.Int32,System.Single)">
            <summary>
            Set the value for a space parameter. A list of available parameters is on the SPACE_PARAM_* constants.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.space_get_param(GodotEngine.RID,System.Int32)">
            <summary>
            Return the value of a space parameter.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.space_get_direct_state(GodotEngine.RID)">
            <summary>
            Return the state of a space, a [Physics2DDirectSpaceState]. This object can be used to make collision/intersection queries.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.area_create">
            <summary>
            Create an [Area2D].
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.area_set_space(GodotEngine.RID,GodotEngine.RID)">
            <summary>
            Assign a space to the area.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.area_get_space(GodotEngine.RID)">
            <summary>
            Return the space assigned to the area.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.area_set_space_override_mode(GodotEngine.RID,System.Int32)">
            <summary>
            Set the space override mode for the area. The modes are described in the constants AREA_SPACE_OVERRIDE_*.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.area_get_space_override_mode(GodotEngine.RID)">
            <summary>
            Return the space override mode for the area.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.area_add_shape(GodotEngine.RID,GodotEngine.RID,System.Nullable{GodotEngine.Transform2D})">
            <summary>
            Add a shape to the area, along with a transform matrix. Shapes are usually referenced by their index, so you should track which shape has a given index.
            <param name="transform">If the param is null, then the default value is Transform2D.Identity</param>
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.area_set_shape(GodotEngine.RID,System.Int32,GodotEngine.RID)">
            <summary>
            Substitute a given area shape by another. The old shape is selected by its index, the new one by its [RID].
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.area_set_shape_transform(GodotEngine.RID,System.Int32,GodotEngine.Transform2D)">
            <summary>
            Set the transform matrix for an area shape.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.area_get_shape_count(GodotEngine.RID)">
            <summary>
            Return the number of shapes assigned to an area.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.area_get_shape(GodotEngine.RID,System.Int32)">
            <summary>
            Return the [RID] of the nth shape of an area.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.area_get_shape_transform(GodotEngine.RID,System.Int32)">
            <summary>
            Return the transform matrix of a shape within an area.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.area_remove_shape(GodotEngine.RID,System.Int32)">
            <summary>
            Remove a shape from an area. It does not delete the shape, so it can be reassigned later.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.area_clear_shapes(GodotEngine.RID)">
            <summary>
            Remove all shapes from an area. It does not delete the shapes, so they can be reassigned later.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.area_set_collision_layer(GodotEngine.RID,System.Int32)">
            <summary>
            Assign the area to one or many physics layers.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.area_set_collision_mask(GodotEngine.RID,System.Int32)">
            <summary>
            Set which physics layers the area will monitor.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.area_set_param(GodotEngine.RID,System.Int32,System.Object)">
            <summary>
            Set the value for an area parameter. A list of available parameters is on the AREA_PARAM_* constants.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.area_set_transform(GodotEngine.RID,GodotEngine.Transform2D)">
            <summary>
            Set the transform matrix for an area.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.area_get_param(GodotEngine.RID,System.Int32)">
            <summary>
            Return an area parameter value.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.area_get_transform(GodotEngine.RID)">
            <summary>
            Return the transform matrix for an area.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.area_attach_object_instance_id(GodotEngine.RID,System.Int32)">
            <summary>
            Assign the area to a descendant of [Object], so it can exist in the node tree.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.area_get_object_instance_id(GodotEngine.RID)">
            <summary>
            Get the instance ID of the object the area is assigned to.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.area_set_monitor_callback(GodotEngine.RID,GodotEngine.Object,System.String)">
            <summary>
            Set the function to call when any body/area enters or exits the area. This callback will be called for any object interacting with the area, and takes five parameters:
            1: AREA_BODY_ADDED or AREA_BODY_REMOVED, depending on whether the object entered or exited the area.
            2: [RID] of the object that entered/exited the area.
            3: Instance ID of the object that entered/exited the area.
            4: The shape index of the object that entered/exited the area.
            5: The shape index of the area where the object entered/exited.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.body_create(System.Int32,System.Boolean)">
            <summary>
            Create a physics body. The first parameter can be any value from constants BODY_MODE*, for the type of body created. Additionally, the body can be created in sleeping state to save processing time.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.body_set_space(GodotEngine.RID,GodotEngine.RID)">
            <summary>
            Assign a space to the body (see [method create_space]).
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.body_get_space(GodotEngine.RID)">
            <summary>
            Return the [RID] of the space assigned to a body.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.body_set_mode(GodotEngine.RID,System.Int32)">
            <summary>
            Set the body mode, from one of the constants BODY_MODE*.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.body_get_mode(GodotEngine.RID)">
            <summary>
            Return the body mode.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.body_add_shape(GodotEngine.RID,GodotEngine.RID,System.Nullable{GodotEngine.Transform2D})">
            <summary>
            Add a shape to the body, along with a transform matrix. Shapes are usually referenced by their index, so you should track which shape has a given index.
            <param name="transform">If the param is null, then the default value is Transform2D.Identity</param>
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.body_set_shape(GodotEngine.RID,System.Int32,GodotEngine.RID)">
            <summary>
            Substitute a given body shape by another. The old shape is selected by its index, the new one by its [RID].
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.body_set_shape_transform(GodotEngine.RID,System.Int32,GodotEngine.Transform2D)">
            <summary>
            Set the transform matrix for a body shape.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.body_set_shape_metadata(GodotEngine.RID,System.Int32,System.Object)">
            <summary>
            Set metadata of a shape within a body. This metadata is different from [method Object.set_meta], and can be retrieved on shape queries.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.body_get_shape_count(GodotEngine.RID)">
            <summary>
            Return the number of shapes assigned to a body.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.body_get_shape(GodotEngine.RID,System.Int32)">
            <summary>
            Return the [RID] of the nth shape of a body.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.body_get_shape_transform(GodotEngine.RID,System.Int32)">
            <summary>
            Return the transform matrix of a body shape.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.body_get_shape_metadata(GodotEngine.RID,System.Int32)">
            <summary>
            Return the metadata of a shape of a body.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.body_remove_shape(GodotEngine.RID,System.Int32)">
            <summary>
            Remove a shape from a body. The shape is not deleted, so it can be reused afterwards.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.body_clear_shapes(GodotEngine.RID)">
            <summary>
            Remove all shapes from a body.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.body_attach_object_instance_id(GodotEngine.RID,System.Int32)">
            <summary>
            Assign the area to a descendant of [Object], so it can exist in the node tree.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.body_get_object_instance_id(GodotEngine.RID)">
            <summary>
            Get the instance ID of the object the area is assigned to.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.body_set_continuous_collision_detection_mode(GodotEngine.RID,System.Int32)">
            <summary>
            Set the continuous collision detection mode from any of the CCD_MODE_* constants.
            Continuous collision detection tries to predict where a moving body will collide, instead of moving it and correcting its movement if it collided.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.body_get_continuous_collision_detection_mode(GodotEngine.RID)">
            <summary>
            Return the continuous collision detection mode.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.body_set_collision_layer(GodotEngine.RID,System.Int32)">
            <summary>
            Set the physics layer or layers a body belongs to.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.body_get_collision_layer(GodotEngine.RID)">
            <summary>
            Return the physics layer or layers a body belongs to.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.body_set_collision_mask(GodotEngine.RID,System.Int32)">
            <summary>
            Set the physics layer or layers a body can collide with.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.body_get_collision_mask(GodotEngine.RID)">
            <summary>
            Return the physics layer or layers a body can collide with.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.body_set_param(GodotEngine.RID,System.Int32,System.Single)">
            <summary>
            Set a body parameter (see BODY_PARAM* constants).
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.body_get_param(GodotEngine.RID,System.Int32)">
            <summary>
            Return the value of a body parameter.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.body_set_state(GodotEngine.RID,System.Int32,System.Object)">
            <summary>
            Set a body state (see BODY_STATE* constants).
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.body_get_state(GodotEngine.RID,System.Int32)">
            <summary>
            Return a body state.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.body_apply_impulse(GodotEngine.RID,GodotEngine.Vector2,GodotEngine.Vector2)">
            <summary>
            Add a positioned impulse to the applied force and torque. Both the force and the offset from the body origin are in global coordinates.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.body_add_force(GodotEngine.RID,GodotEngine.Vector2,GodotEngine.Vector2)">
            <summary>
            Add a positioned force to the applied force and torque. As with [method body_apply_impulse], both the force and the offset from the body origin are in global coordinates. A force differs from an impulse in that, while the two are forces, the impulse clears itself after being applied.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.body_set_axis_velocity(GodotEngine.RID,GodotEngine.Vector2)">
            <summary>
            Set an axis velocity. The velocity in the given vector axis will be set as the given vector length. This is useful for jumping behavior.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.body_add_collision_exception(GodotEngine.RID,GodotEngine.RID)">
            <summary>
            Add a body to the list of bodies exempt from collisions.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.body_remove_collision_exception(GodotEngine.RID,GodotEngine.RID)">
            <summary>
            Remove a body from the list of bodies exempt from collisions.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.body_set_max_contacts_reported(GodotEngine.RID,System.Int32)">
            <summary>
            Set the maximum contacts to report. Bodies can keep a log of the contacts with other bodies, this is enabled by setting the maximum amount of contacts reported to a number greater than 0.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.body_get_max_contacts_reported(GodotEngine.RID)">
            <summary>
            Return the maximum contacts that can be reported. See [method body_set_max_contacts_reported].
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.body_set_omit_force_integration(GodotEngine.RID,System.Boolean)">
            <summary>
            Set whether a body uses a callback function to calculate its own physics (see [method body_set_force_integration_callback]).
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.body_is_omitting_force_integration(GodotEngine.RID)">
            <summary>
            Return whether a body uses a callback function to calculate its own physics (see [method body_set_force_integration_callback]).
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.body_set_force_integration_callback(GodotEngine.RID,GodotEngine.Object,System.String,System.Object)">
            <summary>
            Set the function used to calculate physics for an object, if that object allows it (see [method body_set_omit_force integration]).
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.body_test_motion(GodotEngine.RID,GodotEngine.Transform2D,GodotEngine.Vector2,System.Single,GodotEngine.Physics2DTestMotionResult)">
            <summary>
            Return whether a body can move from a given point in a given direction. Apart from the boolean return value, a [Physics2DTestMotionResult] can be passed to return additional information in.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.joint_set_param(GodotEngine.RID,System.Int32,System.Single)">
            <summary>
            Set a joint parameter. Parameters are explained in the JOINT_PARAM* constants.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.joint_get_param(GodotEngine.RID,System.Int32)">
            <summary>
            Return the value of a joint parameter.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.pin_joint_create(GodotEngine.Vector2,GodotEngine.RID,GodotEngine.RID)">
            <summary>
            Create a pin joint between two bodies. If not specified, the second body is assumed to be the joint itself.
            <param name="body_b">If the param is null, then the default value is new RID()</param>
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.groove_joint_create(GodotEngine.Vector2,GodotEngine.Vector2,GodotEngine.Vector2,GodotEngine.RID,GodotEngine.RID)">
            <summary>
            Create a groove joint between two bodies. If not specified, the bodyies are assumed to be the joint itself.
            <param name="body_a">If the param is null, then the default value is new RID()</param>
            <param name="body_b">If the param is null, then the default value is new RID()</param>
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.damped_spring_joint_create(GodotEngine.Vector2,GodotEngine.Vector2,GodotEngine.RID,GodotEngine.RID)">
            <summary>
            Create a damped spring joint between two bodies. If not specified, the second body is assumed to be the joint itself.
            <param name="body_b">If the param is null, then the default value is new RID()</param>
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.damped_string_joint_set_param(GodotEngine.RID,System.Int32,System.Single)">
            <summary>
            Set a damped spring joint parameter. Parameters are explained in the DAMPED_STRING* constants.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.damped_string_joint_get_param(GodotEngine.RID,System.Int32)">
            <summary>
            Return the value of a damped spring joint parameter.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.joint_get_type(GodotEngine.RID)">
            <summary>
            Return the type of a joint (see JOINT_* constants).
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.free_rid(GodotEngine.RID)">
            <summary>
            Destroy any of the objects created by Physics2DServer. If the [RID] passed is not one of the objects that can be created by Physics2DServer, an error will be sent to the console.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.set_active(System.Boolean)">
            <summary>
            Activate or deactivate the 2D physics engine.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DServer.get_process_info(System.Int32)">
            <summary>
            Return information about the current state of the 2D physics engine. The states are listed under the INFO_* constants.
            </summary>
        </member>
        <member name="T:GodotEngine.Physics2DShapeQueryParameters">
            <summary>
            This class contains the shape and other parameters for intersection/collision queries.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DShapeQueryParameters.set_shape_rid(GodotEngine.RID)">
            <summary>
            Set the [RID] of the shape to be used in queries.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DShapeQueryParameters.get_shape_rid">
            <summary>
            Return the [RID] of the shape queried.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DShapeQueryParameters.set_transform(GodotEngine.Transform2D)">
            <summary>
            Set the transormation matrix of the shape. This is necessary to set its position/rotation/scale.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DShapeQueryParameters.get_transform">
            <summary>
            Return the transform matrix of the shape queried.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DShapeQueryParameters.set_motion(GodotEngine.Vector2)">
            <summary>
            Set the current movement speed of the shape.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DShapeQueryParameters.get_motion">
            <summary>
            Return the current movement speed of the shape.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DShapeQueryParameters.set_margin(System.Single)">
            <summary>
            Set the collision margin for the shape. A collision margin is an amount (in pixels) that the shape will grow when computing collisions, to account for numerical imprecision.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DShapeQueryParameters.get_margin">
            <summary>
            Return the collision margin for the shape.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DShapeQueryParameters.set_collision_layer(System.Int32)">
            <summary>
            Set the physics layer the shape belongs to.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DShapeQueryParameters.get_collision_layer">
            <summary>
            Return the physics layer the shape belongs to.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DShapeQueryParameters.set_object_type_mask(System.Int32)">
            <summary>
            Set the type of object the shape belongs to (see Physics2DDirectSpaceState.TYPE_MASK_*).
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DShapeQueryParameters.get_object_type_mask">
            <summary>
            Return the type of object the shape belongs to.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DShapeQueryParameters.set_exclude(System.Object[])">
            <summary>
            Set the list of objects, or object [RID]\ s, that will be excluded from collisions.
            </summary>
        </member>
        <member name="M:GodotEngine.Physics2DShapeQueryParameters.get_exclude">
            <summary>
            Return the list of objects, or object [RID]\ s, that will be excluded from collisions.
            </summary>
        </member>
        <member name="T:GodotEngine.PhysicsBody">
            <summary>
            PhysicsBody is an abstract base class for implementing a physics body. All PhysicsBody types inherit from it.
            </summary>
        </member>
        <member name="T:GodotEngine.PhysicsBody2D">
            <summary>
            PhysicsBody2D is an abstract base class for implementing a physics body. All *Body2D types inherit from it.
            </summary>
        </member>
        <member name="M:GodotEngine.PhysicsBody2D.set_collision_layer(System.Int32)">
            <summary>
            Set the physics layers this area is in.
            Collidable objects can exist in any of 32 different layers. These layers are not visual, but more of a tagging system instead. A collidable can use these layers/tags to select with which objects it can collide, using [method set_collision_mask].
            A contact is detected if object A is in any of the layers that object B scans, or object B is in any layer scanned by object A.
            </summary>
        </member>
        <member name="M:GodotEngine.PhysicsBody2D.get_collision_layer">
            <summary>
            Return the physics layer this area is in.
            </summary>
        </member>
        <member name="M:GodotEngine.PhysicsBody2D.set_collision_mask(System.Int32)">
            <summary>
            Set the physics layers this area can scan for collisions.
            </summary>
        </member>
        <member name="M:GodotEngine.PhysicsBody2D.get_collision_mask">
            <summary>
            Return the physics layers this area can scan for collisions.
            </summary>
        </member>
        <member name="M:GodotEngine.PhysicsBody2D.set_collision_mask_bit(System.Int32,System.Boolean)">
            <summary>
            Set/clear individual bits on the collision mask. This makes selecting the areas scanned easier.
            </summary>
        </member>
        <member name="M:GodotEngine.PhysicsBody2D.get_collision_mask_bit(System.Int32)">
            <summary>
            Return an individual bit on the collision mask.
            </summary>
        </member>
        <member name="M:GodotEngine.PhysicsBody2D.set_collision_layer_bit(System.Int32,System.Boolean)">
            <summary>
            Set/clear individual bits on the layer mask. This makes getting a body in/out of only one layer easier.
            </summary>
        </member>
        <member name="M:GodotEngine.PhysicsBody2D.get_collision_layer_bit(System.Int32)">
            <summary>
            Return an individual bit on the collision mask.
            </summary>
        </member>
        <member name="F:GodotEngine.PhysicsServer.AREA_SPACE_OVERRIDE_DISABLED">
            <summary>
            This area does not affect gravity/damp. These are generally areas that exist only to detect collisions, and objects entering or exiting them.
            </summary>
        </member>
        <member name="F:GodotEngine.PhysicsServer.AREA_SPACE_OVERRIDE_COMBINE">
            <summary>
            This area adds its gravity/damp values to whatever has been calculated so far. This way, many overlapping areas can combine their physics to make interesting effects.
            </summary>
        </member>
        <member name="F:GodotEngine.PhysicsServer.AREA_SPACE_OVERRIDE_COMBINE_REPLACE">
            <summary>
            This area adds its gravity/damp values to whatever has been calculated so far. Then stops taking into account the rest of the areas, even the default one.
            </summary>
        </member>
        <member name="F:GodotEngine.PhysicsServer.AREA_SPACE_OVERRIDE_REPLACE">
            <summary>
            This area replaces any gravity/damp, even the default one, and stops taking into account the rest of the areas.
            </summary>
        </member>
        <member name="F:GodotEngine.PhysicsServer.AREA_SPACE_OVERRIDE_REPLACE_COMBINE">
            <summary>
            This area replaces any gravity/damp calculated so far, but keeps calculating the rest of the areas, down to the default one.
            </summary>
        </member>
        <member name="T:GodotEngine.PinJoint2D">
            <summary>
            Pin Joint for 2D Rigid Bodies. It pins 2 bodies (rigid or static) together, or a single body to a fixed position in space.
            </summary>
        </member>
        <member name="T:GodotEngine.Polygon2D">
            <summary>
            A Polygon2D is defined by a set of n vertices connected together by line segments, meaning that the vertex 1 will be connected with vertex 2, vertex 2 with vertex 3 ..., vertex n-1 with vertex n and vertex n with vertex 1 in order to close the loop and define a polygon.
            </summary>
        </member>
        <member name="M:GodotEngine.Polygon2D.set_polygon(GodotEngine.Vector2[])">
            <summary>
            Define the set of vertices that will represent the polygon.
            </summary>
        </member>
        <member name="M:GodotEngine.Polygon2D.get_polygon">
            <summary>
            Return the set of vertices that defines this polygon.
            </summary>
        </member>
        <member name="M:GodotEngine.Polygon2D.set_uv(GodotEngine.Vector2[])">
            <summary>
            Set the texture coordinates for every vertex of the polygon. There should be one uv vertex for every vertex in the polygon. If there are less, the undefined ones will be assumed to be (0,0). Extra uv vertices are ignored.
            </summary>
        </member>
        <member name="M:GodotEngine.Polygon2D.get_uv">
            <summary>
            Return the texture coordinates associated with every vertex of the polygon.
            </summary>
        </member>
        <member name="M:GodotEngine.Polygon2D.set_color(GodotEngine.Color)">
            <summary>
            Set the polygon fill color. If the polygon has a texture defined, the defined texture will be multiplied by the polygon fill color. This, also, is the default color for those vertices that are not defined by [method get_vertex_colors].
            </summary>
        </member>
        <member name="M:GodotEngine.Polygon2D.get_color">
            <summary>
            Return the polygon fill color.
            </summary>
        </member>
        <member name="M:GodotEngine.Polygon2D.set_vertex_colors(GodotEngine.Color[])">
            <summary>
            Set the color for each vertex of the polygon. There should be one color for every vertex in the polygon. If there are less, the undefined ones will be assumed to be [method get_color]. Extra color entries are ignored.
            Colors are interpolated between vertices, resulting in smooth gradients when they differ.
            </summary>
        </member>
        <member name="M:GodotEngine.Polygon2D.get_vertex_colors">
            <summary>
            Return the list of vertex colors.
            </summary>
        </member>
        <member name="M:GodotEngine.Polygon2D.get_texture">
            <summary>
            Return the polygon texture
            </summary>
        </member>
        <member name="M:GodotEngine.Polygon2D.set_texture_offset(GodotEngine.Vector2)">
            <summary>
            Set the offset of the polygon texture. Initially the texture will appear anchored to the polygon position, the offset is used to move the texture location away from that point (notice that the texture origin is set to its top left corner, so when offset is 0,0 the top left corner of the texture is at the polygon position), for example setting the offset to 10, 10 will move the texture 10 units to the left and 10 units to the top.
            </summary>
        </member>
        <member name="M:GodotEngine.Polygon2D.get_texture_offset">
            <summary>
            Return the polygon texture offset.
            </summary>
        </member>
        <member name="M:GodotEngine.Polygon2D.set_texture_rotation(System.Single)">
            <summary>
            Set the amount of rotation of the polygon texture, [code]texture_rotation[/code] is specified in radians and clockwise rotation.
            </summary>
        </member>
        <member name="M:GodotEngine.Polygon2D.get_texture_rotation">
            <summary>
            Return the rotation in radians of the texture polygon.
            </summary>
        </member>
        <member name="M:GodotEngine.Polygon2D.set_texture_scale(GodotEngine.Vector2)">
            <summary>
            Set the value that will multiply the uv coordinates ([method get_uv]) when applying the texture. Larger values make the texture smaller, and vice versa.
            </summary>
        </member>
        <member name="M:GodotEngine.Polygon2D.get_texture_scale">
            <summary>
            Return the uv coordinate multiplier.
            </summary>
        </member>
        <member name="M:GodotEngine.Polygon2D.set_invert(System.Boolean)">
            <summary>
            Set the polygon as the defined polygon bounding box minus the defined polygon (the defined polygon will appear as a hole on the square that contains the defined polygon).
            </summary>
        </member>
        <member name="M:GodotEngine.Polygon2D.get_invert">
            <summary>
            Return whether this polygon is inverted or not.
            </summary>
        </member>
        <member name="M:GodotEngine.Polygon2D.set_invert_border(System.Single)">
            <summary>
            Add extra padding around the bounding box, making it bigger. Too small a value can make the polygon triangulate strangely, due to numerical imprecision.
            </summary>
        </member>
        <member name="M:GodotEngine.Polygon2D.get_invert_border">
            <summary>
            Return the added padding around the bounding box.
            </summary>
        </member>
        <member name="M:GodotEngine.Polygon2D.set_offset(GodotEngine.Vector2)">
            <summary>
            Set the an offset that will be added to the vertices' position. E.g. if the offset is set to (10,10) then all the polygon points will move 10 units to the right and 10 units to the bottom.
            </summary>
        </member>
        <member name="M:GodotEngine.Polygon2D.get_offset">
            <summary>
            Return the offset for the polygon vertices.
            </summary>
        </member>
        <member name="T:GodotEngine.Popup">
            <summary>
            Popup is a base [Control] used to show dialogs and popups. It's a subwindow and modal by default (see [Control]) and has helpers for custom popup behavior.
            </summary>
        </member>
        <member name="F:GodotEngine.Popup.NOTIFICATION_POST_POPUP">
            <summary>
            Notification sent right after the popup is shown.
            </summary>
        </member>
        <member name="F:GodotEngine.Popup.NOTIFICATION_POPUP_HIDE">
            <summary>
            Notification sent right after the popup is hidden.
            </summary>
        </member>
        <member name="M:GodotEngine.Popup.popup_centered(System.Nullable{GodotEngine.Vector2})">
            <summary>
            Popup (show the control in modal form) in the center of the screen, at the current size, or at a size determined by "size".
            <param name="size">If the param is null, then the default value is new Vector2(0, 0)</param>
            </summary>
        </member>
        <member name="M:GodotEngine.Popup.popup_centered_ratio(System.Single)">
            <summary>
            Popup (show the control in modal form) in the center of the screen, scaled at a ratio of size of the screen.
            </summary>
        </member>
        <member name="M:GodotEngine.Popup.popup_centered_minsize(System.Nullable{GodotEngine.Vector2})">
            <summary>
            Popup (show the control in modal form) in the center of the screen, ensuring the size is never smaller than [code]minsize[/code].
            <param name="minsize">If the param is null, then the default value is new Vector2(0, 0)</param>
            </summary>
        </member>
        <member name="M:GodotEngine.Popup.popup(System.Nullable{GodotEngine.Rect2})">
            <summary>
            Popup (show the control in modal form).
            <param name="bounds">If the param is null, then the default value is new Rect2(0, 0, 0, 0)</param>
            </summary>
        </member>
        <member name="M:GodotEngine.Popup.set_exclusive(System.Boolean)">
            <summary>
            Make the popup hide other popups when shown on the screen.
            </summary>
        </member>
        <member name="M:GodotEngine.Popup.is_exclusive">
            <summary>
            Returns whether the popup will hide other popups when shown on the screen.
            </summary>
        </member>
        <member name="T:GodotEngine.PopupDialog">
            <summary>
            PopupDialog is a base class for popup dialogs, along with [WindowDialog].
            </summary>
        </member>
        <member name="T:GodotEngine.PopupMenu">
            <summary>
            PopupMenu is the typical Control that displays a list of options. They are popular in toolbars or context menus.
            </summary>
        </member>
        <member name="M:GodotEngine.PopupMenu.add_item(System.String,System.Int32,System.Int32)">
            <summary>
            Add a new item with text "label". An id can optionally be provided, as well as an accelerator keybinding. If no id is provided, one will be created from the index.
            </summary>
        </member>
        <member name="M:GodotEngine.PopupMenu.add_check_item(System.String,System.Int32,System.Int32)">
            <summary>
            Add a new checkable item with text "label". An id can optionally be provided, as well as an accelerator. If no id is provided, one will be created from the index. Note that checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually.
            </summary>
        </member>
        <member name="M:GodotEngine.PopupMenu.add_submenu_item(System.String,System.String,System.Int32)">
            <summary>
            Adds an item with a submenu. The submenu is the name of a child PopupMenu node that would be shown when the item is clicked. An id can optionally be provided, but if is isn't provided, one will be created from the index.
            </summary>
        </member>
        <member name="M:GodotEngine.PopupMenu.set_item_text(System.Int32,System.String)">
            <summary>
            Set the text of the item at index "idx".
            </summary>
        </member>
        <member name="M:GodotEngine.PopupMenu.set_item_checked(System.Int32,System.Boolean)">
            <summary>
            Set the checkstate status of the item at index "idx".
            </summary>
        </member>
        <member name="M:GodotEngine.PopupMenu.set_item_id(System.Int32,System.Int32)">
            <summary>
            Set the id of the item at index "idx".
            </summary>
        </member>
        <member name="M:GodotEngine.PopupMenu.set_item_accelerator(System.Int32,System.Int32)">
            <summary>
            Set the accelerator of the item at index "idx". Accelerators are special combinations of keys that activate the item, no matter which control is focused.
            </summary>
        </member>
        <member name="M:GodotEngine.PopupMenu.set_item_metadata(System.Int32,System.Object)">
            <summary>
            Sets the metadata of an item, which might be of any type. You can later get it with [method get_item_metadata], which provides a simple way of assigning context data to items.
            </summary>
        </member>
        <member name="M:GodotEngine.PopupMenu.set_item_disabled(System.Int32,System.Boolean)">
            <summary>
            Sets whether the item at index "idx" is disabled or not. When it is disabled it can't be selected, or its action invoked.
            </summary>
        </member>
        <member name="M:GodotEngine.PopupMenu.set_item_submenu(System.Int32,System.String)">
            <summary>
            Sets the submenu of the item at index "idx". The submenu is the name of a child PopupMenu node that would be shown when the item is clicked.
            </summary>
        </member>
        <member name="M:GodotEngine.PopupMenu.set_item_as_separator(System.Int32,System.Boolean)">
            <summary>
            Mark the item at index "idx" as a seperator, which means that it would be displayed as a mere line.
            </summary>
        </member>
        <member name="M:GodotEngine.PopupMenu.set_item_as_checkable(System.Int32,System.Boolean)">
            <summary>
            Set whether the item at index "idx" has a checkbox. Note that checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually.
            </summary>
        </member>
        <member name="M:GodotEngine.PopupMenu.get_item_text(System.Int32)">
            <summary>
            Return the text of the item at index "idx".
            </summary>
        </member>
        <member name="M:GodotEngine.PopupMenu.get_item_icon(System.Int32)">
            <summary>
            Return the icon of the item at index "idx".
            </summary>
        </member>
        <member name="M:GodotEngine.PopupMenu.is_item_checked(System.Int32)">
            <summary>
            Return the checkstate status of the item at index "idx".
            </summary>
        </member>
        <member name="M:GodotEngine.PopupMenu.get_item_id(System.Int32)">
            <summary>
            Return the id of the item at index "idx".
            </summary>
        </member>
        <member name="M:GodotEngine.PopupMenu.get_item_index(System.Int32)">
            <summary>
            Find and return the index of the item containing a given id.
            </summary>
        </member>
        <member name="M:GodotEngine.PopupMenu.get_item_accelerator(System.Int32)">
            <summary>
            Return the accelerator of the item at index "idx". Accelerators are special combinations of keys that activate the item, no matter which control is focused.
            </summary>
        </member>
        <member name="M:GodotEngine.PopupMenu.get_item_metadata(System.Int32)">
            <summary>
            Return the metadata of an item, which might be of any type. You can set it with [method set_item_metadata], which provides a simple way of assigning context data to items.
            </summary>
        </member>
        <member name="M:GodotEngine.PopupMenu.is_item_disabled(System.Int32)">
            <summary>
            Return whether the item at index "idx" is disabled. When it is disabled it can't be selected, or its action invoked.
            </summary>
        </member>
        <member name="M:GodotEngine.PopupMenu.get_item_submenu(System.Int32)">
            <summary>
            Return the submenu name of the item at index "idx".
            </summary>
        </member>
        <member name="M:GodotEngine.PopupMenu.is_item_separator(System.Int32)">
            <summary>
            Return whether the item is a seperator. If it is, it would be displayed as a line.
            </summary>
        </member>
        <member name="M:GodotEngine.PopupMenu.is_item_checkable(System.Int32)">
            <summary>
            Return whether the item at index "idx" has a checkbox. Note that checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually.
            </summary>
        </member>
        <member name="M:GodotEngine.PopupMenu.get_item_count">
            <summary>
            Return the amount of items.
            </summary>
        </member>
        <member name="M:GodotEngine.PopupMenu.remove_item(System.Int32)">
            <summary>
            Removes the item at index "idx" from the menu. Note that the indexes of items after the removed item are going to be shifted by one.
            </summary>
        </member>
        <member name="M:GodotEngine.PopupMenu.add_separator">
            <summary>
            Add a separator between items. Separators also occupy an index.
            </summary>
        </member>
        <member name="M:GodotEngine.PopupMenu.clear">
            <summary>
            Clear the popup menu, in effect removing all items.
            </summary>
        </member>
        <member name="M:GodotEngine.PopupMenu.set_hide_on_item_selection(System.Boolean)">
            <summary>
            Sets whether or not the PopupMenu will hide on item selection.
            </summary>
        </member>
        <member name="M:GodotEngine.PopupMenu.is_hide_on_item_selection">
            <summary>
            Returns a boolean that indicates whether or not the PopupMenu will hide on item selection.
            </summary>
        </member>
        <member name="M:GodotEngine.PopupMenu.set_hide_on_checkable_item_selection(System.Boolean)">
            <summary>
            Sets whether or not the PopupMenu will hide on checkable item selection.
            </summary>
        </member>
        <member name="M:GodotEngine.PopupMenu.is_hide_on_checkable_item_selection">
            <summary>
            Returns a boolean that indicates whether or not the PopupMenu will hide on checkable item selection.
            </summary>
        </member>
        <member name="T:GodotEngine.PopupPanel">
            <summary>
            Class for displaying popups with a panel background. In some cases it might be simpler to use than [Popup], since it provides a configurable background. If you are making windows, better check [WindowDialog].
            </summary>
        </member>
        <member name="T:GodotEngine.Portal">
            <summary>
            Portals provide virtual openings to [VisualInstance] nodes, so cameras can look at them from the outside. Note that portals are a visibility optimization technique, and are in no way related to the game of the same name (as in, they are not used for teleportation). For more information on how rooms and portals work, see [VisualInstance]. Portals are represented as 2D convex polygon shapes (in the X,Y local plane), and are placed on the surface of the areas occupied by a [VisualInstance], to indicate that the room can be accessed or looked-at through them. If two rooms are next to each other, and two similar portals in each of them share the same world position (and are parallel and opposed to each other), they will automatically "connect" and form "doors" (for example, the portals that connect a kitchen to a living room are placed in the door they share). Portals must always have a [VisualInstance] node as a parent, grandparent or far parent, or else they will not be active.
            </summary>
        </member>
        <member name="M:GodotEngine.Portal.set_shape(GodotEngine.Vector2[])">
            <summary>
            Set the portal shape. The shape is an array of [Vector2] points, representing a convex polygon in the X,Y plane.
            </summary>
        </member>
        <member name="M:GodotEngine.Portal.get_shape">
            <summary>
            Return the portal shape. The shape is an array of [Vector2] points, representing a convex polygon in the X,Y plane.
            </summary>
        </member>
        <member name="M:GodotEngine.Portal.set_enabled(System.Boolean)">
            <summary>
            Enable the portal (it is enabled by default though), disabling it will cause the parent [VisualInstance] to not be visible any longer when looking through the portal.
            </summary>
        </member>
        <member name="M:GodotEngine.Portal.is_enabled">
            <summary>
            Return whether the portal is active. When disabled it causes the parent [VisualInstance] to not be visible any longer when looking through the portal.
            </summary>
        </member>
        <member name="M:GodotEngine.Portal.set_disable_distance(System.Single)">
            <summary>
            Set the distance threshold for disabling the portal. Every time that the portal goes beyond "distance", it disables itself, becoming the opaque color (see [method set_disabled_color]).
            </summary>
        </member>
        <member name="M:GodotEngine.Portal.get_disable_distance">
            <summary>
            Return the distance threshold for disabling the portal. Every time that the portal goes beyond "distance", it disables itself, becoming the opaque color (see [method set_disabled_color]).
            </summary>
        </member>
        <member name="M:GodotEngine.Portal.set_disabled_color(GodotEngine.Color)">
            <summary>
            When the portal goes beyond the disable distance (see [method set_disable_distance]), it becomes opaque and displayed with color "color".
            </summary>
        </member>
        <member name="M:GodotEngine.Portal.get_disabled_color">
            <summary>
            Return the color for when the portal goes beyond the disable distance (see [method set_disable_distance]) and becomes disabled.
            </summary>
        </member>
        <member name="M:GodotEngine.Portal.set_connect_range(System.Single)">
            <summary>
            Set the range for auto-connecting two portals from different rooms sharing the same space.
            </summary>
        </member>
        <member name="M:GodotEngine.Portal.get_connect_range">
            <summary>
            Return the range for auto-connecting two portals from different rooms sharing the same space.
            </summary>
        </member>
        <member name="T:GodotEngine.Position2D">
            <summary>
            Generic 2D Position hint for editing. It's just like a plain [Node2D] but displays as a cross in the 2D-Editor at all times.
            </summary>
        </member>
        <member name="T:GodotEngine.Position3D">
            <summary>
            Generic 3D Position hint for editing. It's just like a plain [Spatial] but displays as a cross in the 3D-Editor at all times.
            </summary>
        </member>
        <member name="T:GodotEngine.ProgressBar">
            <summary>
            General purpose progress bar. Shows fill percentage from right to left.
            </summary>
        </member>
        <member name="T:GodotEngine.ProjectSettings">
            <summary>
            Contains global variables accessible from everywhere. Use the normal [Object] API, such as "ProjectSettings.get(variable)", "ProjectSettings.set(variable,value)" or "ProjectSettings.has(variable)" to access them. Variables stored in project.godot are also loaded into ProjectSettings, making this object very useful for reading custom game configuration options.
            </summary>
        </member>
        <member name="M:GodotEngine.ProjectSettings.has(System.String)">
            <summary>
            Return true if a configuration value is present.
            </summary>
        </member>
        <member name="M:GodotEngine.ProjectSettings.set_order(System.String,System.Int32)">
            <summary>
            Set the order of a configuration value (influences when saved to the config file).
            </summary>
        </member>
        <member name="M:GodotEngine.ProjectSettings.get_order(System.String)">
            <summary>
            Return the order of a configuration value (influences when saved to the config file).
            </summary>
        </member>
        <member name="M:GodotEngine.ProjectSettings.add_property_info(System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Add a custom property info to a property. The dictionary must contain: name:[String](the name of the property) and type:[int](see TYPE_* in [@Global Scope]), and optionally hint:[int](see PROPERTY_HINT_* in [@Global Scope]), hint_string:[String].
            Example:
            [codeblock]
            ProjectSettings.set("category/property_name", 0)
            var property_info = {
            "name": "category/property_name",
            "type": TYPE_INT,
            "hint": PROPERTY_HINT_ENUM,
            "hint_string": "one,two,three"
            }
            ProjectSettings.add_property_info(property_info)
            [/codeblock]
            </summary>
        </member>
        <member name="M:GodotEngine.ProjectSettings.clear(System.String)">
            <summary>
            Clear the whole configuration (not recommended, may break things).
            </summary>
        </member>
        <member name="M:GodotEngine.ProjectSettings.localize_path(System.String)">
            <summary>
            Convert a path to a localized path (res:// path).
            </summary>
        </member>
        <member name="M:GodotEngine.ProjectSettings.globalize_path(System.String)">
            <summary>
            Convert a localized path (res://) to a full native OS path.
            </summary>
        </member>
        <member name="T:GodotEngine.ProximityGroup">
            <summary>
            General purpose proximity-detection node.
            </summary>
        </member>
        <member name="T:GodotEngine.Range">
            <summary>
            Range is a base class for [Control] nodes that change a floating point [i]value[/i] between a [i]minimum[/i] and a [i]maximum[/i], using [i]step[/i] and [i]page[/i], for example a [ScrollBar].
            </summary>
        </member>
        <member name="M:GodotEngine.Range.get_min">
            <summary>
            Return the minimum value.
            </summary>
        </member>
        <member name="M:GodotEngine.Range.get_max">
            <summary>
            Return the maximum value.
            </summary>
        </member>
        <member name="M:GodotEngine.Range.get_step">
            <summary>
            Return the stepping, if step is 0, stepping is disabled.
            </summary>
        </member>
        <member name="M:GodotEngine.Range.get_page">
            <summary>
            Return the page size, if page is 0, paging is disabled.
            </summary>
        </member>
        <member name="M:GodotEngine.Range.get_as_ratio">
            <summary>
            Return value mapped to 0 to 1 range.
            </summary>
        </member>
        <member name="M:GodotEngine.Range.set_min(System.Single)">
            <summary>
            Set minimum value, clamped range value to it if it's less.
            </summary>
        </member>
        <member name="M:GodotEngine.Range.set_step(System.Single)">
            <summary>
            Set step value. If step is 0, stepping will be disabled.
            </summary>
        </member>
        <member name="M:GodotEngine.Range.set_page(System.Single)">
            <summary>
            Set page size. Page is mainly used for scrollbars or anything that controls text scrolling.
            </summary>
        </member>
        <member name="M:GodotEngine.Range.set_as_ratio(System.Single)">
            <summary>
            Set value mapped to 0 to 1 (unit) range, it will then be converted to the actual value within min and max.
            </summary>
        </member>
        <member name="T:GodotEngine.RayCast">
            <summary>
            A RayCast represents a line from its origin to its destination position [code]cast_to[/code], it is used to query the 3D space in order to find the closest object intersecting with the ray.
            RayCast can ignore some objects by adding them to the exception list via [code]add_exception[/code], setting proper filtering with layers, or by filtering object types with type masks.
            Only enabled raycasts will be able to query the space and report collisions!
            RayCast calculates intersection every fixed frame (see [Node]), and the result is cached so it can be used later until the next frame. If multiple queries are required between fixed frames (or during the same frame) use [method force_raycast_update] after adjusting the raycast.
            </summary>
        </member>
        <member name="M:GodotEngine.RayCast.set_enabled(System.Boolean)">
            <summary>
            Enables the RayCast2D. Only enabled raycasts will be able to query the space and report collisions.
            </summary>
        </member>
        <member name="M:GodotEngine.RayCast.is_enabled">
            <summary>
            Returns whether this raycast is enabled or not.
            </summary>
        </member>
        <member name="M:GodotEngine.RayCast.set_cast_to(GodotEngine.Vector3)">
            <summary>
            Sets to which point ray should be casted. This point is in [b]local[/b] coordinate system.
            </summary>
        </member>
        <member name="M:GodotEngine.RayCast.get_cast_to">
            <summary>
            Return the destination point of this ray object.
            </summary>
        </member>
        <member name="M:GodotEngine.RayCast.is_colliding">
            <summary>
            Return whether the closest object the ray is pointing to is colliding with the vector (considering the vector length).
            </summary>
        </member>
        <member name="M:GodotEngine.RayCast.force_raycast_update">
            <summary>
            Updates the collision information in case if this object's properties changed during the current frame (for example position, rotation or the cast_point). Note, [code]set_enabled[/code] is not required for this to work.
            </summary>
        </member>
        <member name="M:GodotEngine.RayCast.get_collider">
            <summary>
            Return the closest object the ray is pointing to. Note that this does not consider the length of the vector, so you must also use [method is_colliding] to check if the object returned is actually colliding with the ray.
            </summary>
        </member>
        <member name="M:GodotEngine.RayCast.get_collider_shape">
            <summary>
            Returns the collision shape of the closest object the ray is pointing to.
            </summary>
        </member>
        <member name="M:GodotEngine.RayCast.get_collision_point">
            <summary>
            Returns collision point. This point is in [b]global[/b] coordinate system.
            </summary>
        </member>
        <member name="M:GodotEngine.RayCast.get_collision_normal">
            <summary>
            Returns the normal of the intersecting object shape face containing the collision point.
            </summary>
        </member>
        <member name="M:GodotEngine.RayCast.add_exception(GodotEngine.Object)">
            <summary>
            Adds a collision exception so the ray does not report collisions with the specified [code]node[/code].
            </summary>
        </member>
        <member name="M:GodotEngine.RayCast.remove_exception(GodotEngine.Object)">
            <summary>
            Removes a collision exception so the ray does report collisions with the specified [code]node[/code].
            </summary>
        </member>
        <member name="M:GodotEngine.RayCast.clear_exceptions">
            <summary>
            Removes all collision exception for this ray.
            </summary>
        </member>
        <member name="M:GodotEngine.RayCast.set_collision_layer(System.Int32)">
            <summary>
            Set the mask to filter objects. Only objects with at least the same mask element set will be detected.
            </summary>
        </member>
        <member name="M:GodotEngine.RayCast.get_collision_layer">
            <summary>
            Returns the collision layer for this ray.
            </summary>
        </member>
        <member name="M:GodotEngine.RayCast.set_type_mask(System.Int32)">
            <summary>
            Set the types of objects to detect. For [code]mask[/code] use a logic sum (OR operation) of constants defined in [PhysicsDirectSpaceState], eg. [code]PhysicsDirectSpaceState.TYPE_MASK_STATIC_BODY | PhysicsDirectSpaceState.TYPE_MASK_KINEMATIC_BODY[/code] to detect only those two types.
            </summary>
        </member>
        <member name="M:GodotEngine.RayCast.get_type_mask">
            <summary>
            Returns the type mask (types of objects to detect) for this ray. The value is a sum (bitwise OR'd) of constants available for [PhysicsDirectSpaceState].
            </summary>
        </member>
        <member name="T:GodotEngine.RayCast2D">
            <summary>
            A RayCast2D represents a line from its origin to its destination position [code]cast_to[/code], it is used to query the 2D space in order to find the closest object intersecting with the ray.
            RayCast2D can ignore some objects by adding them to the exception list via [code]add_exception[/code], setting proper filtering with layers, or by filtering object types with type masks.
            Only enabled raycasts will be able to query the space and report collisions!
            RayCast2D calculates intersection every fixed frame (see [Node]), and the result is cached so it can be used later until the next frame. If multiple queries are required between fixed frames (or during the same frame) use [method force_raycast_update] after adjusting the raycast.
            </summary>
        </member>
        <member name="M:GodotEngine.RayCast2D.set_enabled(System.Boolean)">
            <summary>
            Enables the RayCast2D. Only enabled raycasts will be able to query the space and report collisions.
            </summary>
        </member>
        <member name="M:GodotEngine.RayCast2D.is_enabled">
            <summary>
            Returns whether this raycast is enabled or not.
            </summary>
        </member>
        <member name="M:GodotEngine.RayCast2D.set_cast_to(GodotEngine.Vector2)">
            <summary>
            Sets the ray destination point, so that the ray will test from the ray's origin to [code]local_point[/code]
            </summary>
        </member>
        <member name="M:GodotEngine.RayCast2D.get_cast_to">
            <summary>
            Return the destination point of this ray object.
            </summary>
        </member>
        <member name="M:GodotEngine.RayCast2D.is_colliding">
            <summary>
            Return whether the closest object the ray is pointing to is colliding with the vector (considering the vector length).
            </summary>
        </member>
        <member name="M:GodotEngine.RayCast2D.force_raycast_update">
            <summary>
            Updates the collision information in case if this object's properties changed during the current frame (for example position, rotation or the cast_point). Note, [code]set_enabled[/code] is not required for this to work.
            </summary>
        </member>
        <member name="M:GodotEngine.RayCast2D.get_collider">
            <summary>
            Return the closest object the ray is pointing to. Note that this does not consider the length of the vector, so you must also use [method is_colliding] to check if the object returned is actually colliding with the ray.
            </summary>
        </member>
        <member name="M:GodotEngine.RayCast2D.get_collider_shape">
            <summary>
            Returns the collision shape of the closest object the ray is pointing to.
            </summary>
        </member>
        <member name="M:GodotEngine.RayCast2D.get_collision_point">
            <summary>
            Returns the collision point in which the ray intersects the closest object. This point is in [b]global[/b] coordinate system.
            </summary>
        </member>
        <member name="M:GodotEngine.RayCast2D.get_collision_normal">
            <summary>
            Returns the normal of the intersecting object shape face containing the collision point.
            </summary>
        </member>
        <member name="M:GodotEngine.RayCast2D.add_exception(GodotEngine.Object)">
            <summary>
            Adds a collision exception so the ray does not report collisions with the specified [code]node[/code].
            </summary>
        </member>
        <member name="M:GodotEngine.RayCast2D.remove_exception(GodotEngine.Object)">
            <summary>
            Removes a collision exception so the ray does report collisions with the specified [code]node[/code].
            </summary>
        </member>
        <member name="M:GodotEngine.RayCast2D.clear_exceptions">
            <summary>
            Removes all collision exception for this ray.
            </summary>
        </member>
        <member name="M:GodotEngine.RayCast2D.set_collision_layer(System.Int32)">
            <summary>
            Set the mask to filter objects. Only objects with at least the same mask element set will be detected.
            </summary>
        </member>
        <member name="M:GodotEngine.RayCast2D.get_collision_layer">
            <summary>
            Returns the collision layer for this ray.
            </summary>
        </member>
        <member name="M:GodotEngine.RayCast2D.set_type_mask(System.Int32)">
            <summary>
            Set the types of objects to detect. For [code]mask[/code] use a logic sum (OR operation) of constants defined in [Physics2DDirectSpaceState], eg. [code]Physics2DDirectSpaceState.TYPE_MASK_STATIC_BODY | Physics2DDirectSpaceState.TYPE_MASK_KINEMATIC_BODY[/code] to detect only those two types.
            </summary>
        </member>
        <member name="M:GodotEngine.RayCast2D.get_type_mask">
            <summary>
            Returns the type mask (types of objects to detect) for this ray. The value is a sum (bitwise OR'd) of constants available for [Physics2DDirectSpaceState].
            </summary>
        </member>
        <member name="M:GodotEngine.RayCast2D.set_exclude_parent_body(System.Boolean)">
            <summary>
            Toggle whether this ray should hit your parent node, if it's a body.
            </summary>
        </member>
        <member name="M:GodotEngine.RayCast2D.get_exclude_parent_body">
            <summary>
            Returns whether this ray should hit your parent node, if it's a body.
            </summary>
        </member>
        <member name="T:GodotEngine.RayShape2D">
            <summary>
            Ray 2D shape resource for physics. A ray is not really a collision body, instead it tries to separate itself from whatever is touching its far endpoint. It's often useful for characters.
            </summary>
        </member>
        <member name="M:GodotEngine.RayShape2D.set_length(System.Single)">
            <summary>
            Set the length of the ray.
            </summary>
        </member>
        <member name="M:GodotEngine.RayShape2D.get_length">
            <summary>
            Return the length of the ray.
            </summary>
        </member>
        <member name="T:GodotEngine.RectangleShape2D">
            <summary>
            Rectangle Shape for 2D Physics. This shape is useful for modeling box-like 2D objects.
            </summary>
        </member>
        <member name="M:GodotEngine.RectangleShape2D.set_extents(GodotEngine.Vector2)">
            <summary>
            Set the half extents, the actual width and height of this shape is twice the half extents.
            </summary>
        </member>
        <member name="M:GodotEngine.RectangleShape2D.get_extents">
            <summary>
            Return the half extents, the actual width and height of this shape is twice the half extents.
            </summary>
        </member>
        <member name="T:GodotEngine.Reference">
            <summary>
            Base class for anything that keeps a reference count. Resource and many other helper objects inherit this. References keep an internal reference counter so they are only released when no longer in use.
            </summary>
        </member>
        <member name="M:GodotEngine.Reference.reference">
            <summary>
            Increase the internal reference counter. Use this only if you really know what you are doing.
            </summary>
        </member>
        <member name="M:GodotEngine.Reference.unreference">
            <summary>
            Decrease the internal reference counter. Use this only if you really know what you are doing.
            </summary>
        </member>
        <member name="T:GodotEngine.ReferenceRect">
            <summary>
            Reference frame for GUI. It's just like an empty control, except a red box is displayed while editing around its size at all times.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:GodotEngine.RegEx" -->
        <member name="M:GodotEngine.RegEx.clear">
            <summary>
            This method resets the state of the object, as it was freshly created. Namely, it unassigns the regular expression of this object.
            </summary>
        </member>
        <member name="M:GodotEngine.RegEx.compile(System.String)">
            <summary>
            Compiles and assign the regular expression pattern to use.
            </summary>
        </member>
        <member name="M:GodotEngine.RegEx.search(System.String,System.Int32,System.Int32)">
            <summary>
            Searches the text for the compiled pattern. Returns a [RegExMatch] container of the first matching reult if found, otherwise null. The region to search within can be specified without modifying where the start and end anchor would be.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:GodotEngine.RegEx.sub(System.String,System.String,System.Boolean,System.Int32,System.Int32)" -->
        <member name="M:GodotEngine.RegEx.is_valid">
            <summary>
            Returns whether this object has a valid regular expression assigned.
            </summary>
        </member>
        <member name="M:GodotEngine.RegEx.get_pattern">
            <summary>
            Returns the expression used to compile the code.
            </summary>
        </member>
        <member name="M:GodotEngine.RegEx.get_group_count">
            <summary>
            Returns the number of numeric capturing groups.
            </summary>
        </member>
        <member name="M:GodotEngine.RegEx.get_names">
            <summary>
            Returns an array of names of named capturing groups.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:GodotEngine.RegExMatch.expand(System.String)" -->
        <member name="M:GodotEngine.RegExMatch.get_group_count">
            <summary>
            Returns the number of numeric capturing groups.
            </summary>
        </member>
        <member name="M:GodotEngine.RegExMatch.get_group_array">
            <summary>
            Returns an array of the results of the numeric groups.
            </summary>
        </member>
        <member name="M:GodotEngine.RegExMatch.get_names">
            <summary>
            Returns an array of names of named capturing groups.
            </summary>
        </member>
        <member name="M:GodotEngine.RegExMatch.get_name_dict">
            <summary>
            Returns a dictionary containing the named capturing groups and their results.
            </summary>
        </member>
        <member name="M:GodotEngine.RegExMatch.get_string(System.Object)">
            <summary>
            Returns the result of the match in the string. An integer can be specified for numeric groups or a string for named groups. Returns -1 if that group wasn't found or doesn't exist. Defaults to 0 (whole pattern).
            <param name="name">If the param is null, then the default value is 0</param>
            </summary>
        </member>
        <member name="M:GodotEngine.RegExMatch.get_start(System.Object)">
            <summary>
            Returns the starting position of the match in the string. An integer can be specified for numeric groups or a string for named groups. Returns -1 if that group wasn't found or doesn't exist. Defaults to 0 (whole pattern).
            <param name="name">If the param is null, then the default value is 0</param>
            </summary>
        </member>
        <member name="M:GodotEngine.RegExMatch.get_end(System.Object)">
            <summary>
            Returns the end position of the match in the string. An integer can be specified for numeric groups or a string for named groups. Returns -1 if that group wasn't found or doesn't exist. Defaults to 0 (whole pattern).
            <param name="name">If the param is null, then the default value is 0</param>
            </summary>
        </member>
        <member name="T:GodotEngine.Resource">
            <summary>
            Resource is the base class for all resource types. Resources are primarily data containers. They are reference counted and freed when no longer in use. They are also loaded only once from disk, and further attempts to load the resource will return the same reference (all this in contrast to a [Node], which is not reference counted and can be instanced from disk as many times as desired). Resources can be saved externally on disk or bundled into another object, such as a [Node] or another resource.
            </summary>
        </member>
        <member name="M:GodotEngine.Resource.set_path(System.String)">
            <summary>
            Set the path of the resource. This is useful mainly for editors when saving/loading, and shouldn't be changed by anything else. Fails if another [Resource] already has path "path".
            </summary>
        </member>
        <member name="M:GodotEngine.Resource.take_over_path(System.String)">
            <summary>
            Set the path of the resource. Differs from set_path(), if another [Resource] exists with "path" it over-takes it, instead of failing.
            </summary>
        </member>
        <member name="M:GodotEngine.Resource.get_path">
            <summary>
            Return the path of the resource. This is useful mainly for editors when saving/loading, and shouldn't be changed by anything else.
            </summary>
        </member>
        <member name="M:GodotEngine.Resource.set_name(System.String)">
            <summary>
            Set the name of the resources, any name is valid (it doesn't have to be unique). Name is for descriptive purposes only.
            </summary>
        </member>
        <member name="M:GodotEngine.Resource.get_name">
            <summary>
            Return the name of the resources, any name is valid (it doesn't have to be unique). Name is for descriptive purposes only.
            </summary>
        </member>
        <member name="M:GodotEngine.Resource.get_rid">
            <summary>
            Return the RID of the resource (or an empty RID). Many resources (such as [Texture], [Mesh], etc) are high level abstractions of resources stored in a server, so this function will return the original RID.
            </summary>
        </member>
        <member name="T:GodotEngine.ResourceInteractiveLoader">
            <summary>
            Interactive Resource Loader. This object is returned by ResourceLoader when performing an interactive load. It allows to load with high granularity, so this is mainly useful for displaying load bars/percentages.
            </summary>
        </member>
        <member name="M:GodotEngine.ResourceInteractiveLoader.get_resource">
            <summary>
            Return the loaded resource (only if loaded). Otherwise, returns null.
            </summary>
        </member>
        <member name="M:GodotEngine.ResourceInteractiveLoader.poll">
            <summary>
            Poll the load. If OK is returned, this means poll will have to be called again. If ERR_FILE_EOF is returned, them the load has finished and the resource can be obtained by calling [method get_resource].
            </summary>
        </member>
        <member name="M:GodotEngine.ResourceInteractiveLoader.get_stage">
            <summary>
            Return the load stage. The total amount of stages can be queried with [method get_stage_count]
            </summary>
        </member>
        <member name="M:GodotEngine.ResourceInteractiveLoader.get_stage_count">
            <summary>
            Return the total amount of stages (calls to [method poll]) needed to completely load this resource.
            </summary>
        </member>
        <member name="T:GodotEngine.ResourcePreloader">
            <summary>
            Resource Preloader Node. This node is used to preload sub-resources inside a scene, so when the scene is loaded all the resources are ready to use and be retrieved from here.
            </summary>
        </member>
        <member name="M:GodotEngine.ResourcePreloader.remove_resource(System.String)">
            <summary>
            Remove a resource from the preloader by text id.
            </summary>
        </member>
        <member name="M:GodotEngine.ResourcePreloader.rename_resource(System.String,System.String)">
            <summary>
            Rename a resource inside the preloader, from a text-id to a new text-id.
            </summary>
        </member>
        <member name="M:GodotEngine.ResourcePreloader.has_resource(System.String)">
            <summary>
            Return true if the preloader has a given resource.
            </summary>
        </member>
        <member name="M:GodotEngine.ResourcePreloader.get_resource(System.String)">
            <summary>
            Return the resource given a text-id.
            </summary>
        </member>
        <member name="M:GodotEngine.ResourcePreloader.get_resource_list">
            <summary>
            Return the list of resources inside the preloader.
            </summary>
        </member>
        <member name="T:GodotEngine.RichTextLabel">
            <summary>
            Label that displays rich text. Rich text can contain custom text, fonts, images and some basic formatting. It also adapts itself to given width/heights.
            </summary>
        </member>
        <member name="M:GodotEngine.RichTextLabel.get_text">
            <summary>
            Returns the raw text, stripping out the formatting information.
            </summary>
        </member>
        <member name="M:GodotEngine.RichTextLabel.set_selection_enabled(System.Boolean)">
            <summary>
            Set to true if selecting the text inside this richtext is allowed.
            </summary>
        </member>
        <member name="M:GodotEngine.RichTextLabel.is_selection_enabled">
            <summary>
            Return true if selecting the text inside this richtext is allowed.
            </summary>
        </member>
        <member name="T:GodotEngine.RigidBody">
            <summary>
            Rigid body node. This node is used for placing rigid bodies in the scene. It can contain a number of shapes, and also shift mode between regular Rigid body, Kinematic, Character or Static.
            </summary>
        </member>
        <member name="F:GodotEngine.RigidBody.MODE_STATIC">
            <summary>
            Static mode. The body behaves like a [StaticBody], and can only move by user code.
            </summary>
        </member>
        <member name="F:GodotEngine.RigidBody.MODE_KINEMATIC">
            <summary>
            Kinematic body. The body behaves like a [KinematicBody], and can only move by user code.
            </summary>
        </member>
        <member name="F:GodotEngine.RigidBody.MODE_RIGID">
            <summary>
            Rigid body. This is the "natural" state of a rigid body. It is affected by forces, and can move, rotate, and be affected by user code.
            </summary>
        </member>
        <member name="F:GodotEngine.RigidBody.MODE_CHARACTER">
            <summary>
            Character body. This behaves like a rigid body, but can not rotate.
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody.set_mode(System.Int32)">
            <summary>
            Set the body mode, from the MODE_* enum. This allows to change to a static body or a character body.
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody.get_mode">
            <summary>
            Return the current body mode, see [method set_mode].
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody.set_mass(System.Single)">
            <summary>
            Set the body mass.
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody.get_mass">
            <summary>
            Return the current body mass.
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody.set_weight(System.Single)">
            <summary>
            Set the body weight given standard earth-weight (gravity 9.8).
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody.get_weight">
            <summary>
            Return the current body weight, given standard earth-weight (gravity 9.8).
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody.set_friction(System.Single)">
            <summary>
            Set the body friction, from 0 (frictionless) to 1 (max friction).
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody.get_friction">
            <summary>
            Return the current body friction, from 0 (frictionless) to 1 (max friction).
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody.set_bounce(System.Single)">
            <summary>
            Set the body bounciness, from 0 (no bounciness) to 1 (max bounciness).
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody.get_bounce">
            <summary>
            Return the current body bounciness.
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody.set_linear_velocity(GodotEngine.Vector3)">
            <summary>
            Set the body linear velocity. Can be used sporadically, but [b]DON'T SET THIS IN EVERY FRAME[/b], because physics may be running in another thread and definitely runs at a different granularity. Use [method _integrate_forces] as your process loop if you want to have precise control of the body state.
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody.get_linear_velocity">
            <summary>
            Return the current body linear velocity.
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody.set_angular_velocity(GodotEngine.Vector3)">
            <summary>
            Set the body angular velocity. Can be used sporadically, but [b]DON'T SET THIS IN EVERY FRAME[/b], because physics may be running in another thread and definitely runs at a different granularity. Use [method _integrate_forces] as your process loop if you want to have precise control of the body state.
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody.get_angular_velocity">
            <summary>
            Return the current body angular velocity.
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody.set_gravity_scale(System.Single)">
            <summary>
            Set the gravity factor. This factor multiplies gravity intensity just for this body.
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody.get_gravity_scale">
            <summary>
            Return the current body gravity scale.
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody.set_linear_damp(System.Single)">
            <summary>
            Set the linear damp for this body. Default of -1, cannot be less than -1. If this value is different from -1, any linear damp derived from the world or areas will be overridden.
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody.get_linear_damp">
            <summary>
            Return the current body linear damp. Default is -1.
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody.set_angular_damp(System.Single)">
            <summary>
            Set the angular damp for this body. Default of -1, cannot be less than -1. If this value is different from -1, any angular damp derived from the world or areas will be overridden.
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody.get_angular_damp">
            <summary>
            Return the current body angular damp. Default is -1.
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody.set_max_contacts_reported(System.Int32)">
            <summary>
            Set the maximum contacts to report. Bodies can keep a log of the contacts with other bodies, this is enabled by setting the maximum amount of contacts reported to a number greater than 0.
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody.get_max_contacts_reported">
            <summary>
            Return the maximum contacts that can be reported. See [method set_max_contacts_reported].
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody.set_use_custom_integrator(System.Boolean)">
            <summary>
            Pass true to disable the internal force integration (like gravity or air friction) for this body. Other than collision response, the body will only move as determined by the [method _integrate_forces] function, if defined.
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody.is_using_custom_integrator">
            <summary>
            Return whether the body is using a custom integrator.
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody.set_contact_monitor(System.Boolean)">
            <summary>
            Enable contact monitoring. This allows the body to emit signals when it collides with another.
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody.is_contact_monitor_enabled">
            <summary>
            Return whether contact monitoring is enabled.
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody.set_use_continuous_collision_detection(System.Boolean)">
            <summary>
            Set the continuous collision detection mode from the enum CCD_MODE_*.
            Continuous collision detection tries to predict where a moving body will collide, instead of moving it and correcting its movement if it collided. The first is more precise, and misses less impacts by small, fast-moving objects. The second is faster to compute, but can miss small, fast-moving objects.
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody.is_using_continuous_collision_detection">
            <summary>
            Return whether this body is using continuous collision detection.
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody.set_axis_velocity(GodotEngine.Vector3)">
            <summary>
            Set an axis velocity. The velocity in the given vector axis will be set as the given vector length. This is useful for jumping behavior.
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody.apply_impulse(GodotEngine.Vector3,GodotEngine.Vector3)">
            <summary>
            Apply a positioned impulse (which will be affected by the body mass and shape). This is the equivalent of hitting a billiard ball with a cue: a force that is applied once, and only once. Both the impulse and the offset from the body origin are in global coordinates.
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody.set_sleeping(System.Boolean)">
            <summary>
            Set whether a body is sleeping or not. Sleeping bodies are not affected by forces until a collision or an [method apply_impulse] wakes them up. Until then, they behave like a static body.
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody.is_sleeping">
            <summary>
            Return whether the body is sleeping.
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody.set_can_sleep(System.Boolean)">
            <summary>
            Set the body ability to fall asleep when not moving. This saves an enormous amount of processor time when there are plenty of rigid bodies (non static) in a scene.
            Sleeping bodies are not affected by forces until a collision or an [method apply_impulse] / [method set_applied_force] wakes them up. Until then, they behave like a static body.
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody.is_able_to_sleep">
            <summary>
            Return whether the body has the ability to fall asleep when not moving. See [method set_can_sleep].
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody.set_axis_lock(System.Int32)">
            <summary>
            Set the axis lock of the body, from the AXIS_LOCK_* enum. Axis lock stops the body from moving along the specified axis(X/Y/Z) and rotating along the other two axes.
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody.get_axis_lock">
            <summary>
            Return the current axis lock of the body. One of AXIS_LOCK_* enum.
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody.get_colliding_bodies">
            <summary>
            Return a list of the bodies colliding with this one. By default, number of max contacts reported is at 0 , see [method set_max_contacts_reported] to increase it.
            </summary>
        </member>
        <member name="T:GodotEngine.RigidBody2D">
            <summary>
            Rigid body 2D node. This node is used for placing rigid bodies in the scene. It can contain a number of shapes, and also shift state between regular Rigid body, Kinematic, Character or Static.
            Character mode forbids the node from being rotated. This node can have a custom force integrator function, for writing complex physics motion behavior per node.
            As a warning, don't change this node position every frame or very often. Sporadic changes work fine, but physics runs at a different granularity (fixed hz) than usual rendering (process callback) and maybe even in a separate thread, so changing this from a process loop will yield strange behavior.
            </summary>
        </member>
        <member name="F:GodotEngine.RigidBody2D.MODE_STATIC">
            <summary>
            Static mode. The body behaves like a [StaticBody2D], and can only move by user code.
            </summary>
        </member>
        <member name="F:GodotEngine.RigidBody2D.MODE_KINEMATIC">
            <summary>
            Kinematic body. The body behaves like a [KinematicBody2D], and can only move by user code.
            </summary>
        </member>
        <member name="F:GodotEngine.RigidBody2D.MODE_RIGID">
            <summary>
            Rigid body. This is the "natural" state of a rigid body. It is affected by forces, and can move, rotate, and be affected by user code.
            </summary>
        </member>
        <member name="F:GodotEngine.RigidBody2D.MODE_CHARACTER">
            <summary>
            Character body. This behaves like a rigid body, but can not rotate.
            </summary>
        </member>
        <member name="F:GodotEngine.RigidBody2D.CCD_MODE_DISABLED">
            <summary>
            Disables continuous collision detection. This is the fastest way to detect body collisions, but can miss small, fast-moving objects.
            </summary>
        </member>
        <member name="F:GodotEngine.RigidBody2D.CCD_MODE_CAST_RAY">
            <summary>
            Enables continuous collision detection by raycasting. It is faster than shapecasting, but less precise.
            </summary>
        </member>
        <member name="F:GodotEngine.RigidBody2D.CCD_MODE_CAST_SHAPE">
            <summary>
            Enables continuous collision detection by shapecasting. It is the slowest CCD method, and the most precise.
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody2D.set_mode(System.Int32)">
            <summary>
            Set the body mode, from the MODE_* enum. This allows to change to a static body or a character body.
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody2D.get_mode">
            <summary>
            Return the current body mode, see [method set_mode].
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody2D.set_mass(System.Single)">
            <summary>
            Set the body mass.
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody2D.get_mass">
            <summary>
            Return the body mass.
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody2D.get_inertia">
            <summary>
            Return the body's moment of inertia. This is usually automatically computed from the mass and the shapes. Note that this doesn't seem to work in a [code]_ready[/code] function: it apparently has not been auto-computed yet.
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody2D.set_inertia(System.Single)">
            <summary>
            Set the body's moment of inertia. This is like mass, but for rotation: it determines how much torque it takes to rotate the body. The moment of inertia is usually computed automatically from the mass and the shapes, but this function allows you to set a custom value. Set 0 (or negative) inertia to return to automatically computing it.
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody2D.set_weight(System.Single)">
            <summary>
            Set the body weight given standard earth-weight (gravity 9.8). Not really useful for 2D since most measures for this node are in pixels.
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody2D.get_weight">
            <summary>
            Return the body weight given standard earth-weight (gravity 9.8).
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody2D.set_friction(System.Single)">
            <summary>
            Set the body friction, from 0 (frictionless) to 1 (full friction).
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody2D.get_friction">
            <summary>
            Return the body friction.
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody2D.set_bounce(System.Single)">
            <summary>
            Set the body bounciness, from 0 (no bounce) to 1 (full bounce).
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody2D.get_bounce">
            <summary>
            Return the body bounciness.
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody2D.set_gravity_scale(System.Single)">
            <summary>
            Set the gravity factor. This factor multiplies gravity intensity just for this body.
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody2D.get_gravity_scale">
            <summary>
            Return the gravity factor.
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody2D.set_linear_damp(System.Single)">
            <summary>
            Set the linear damp for this body. If this value is different from -1, any linear damp derived from the world or areas will be overridden.
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody2D.get_linear_damp">
            <summary>
            Return the linear damp for this body.
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody2D.set_angular_damp(System.Single)">
            <summary>
            Set the angular damp for this body. If this value is different from -1, any angular damp derived from the world or areas will be overridden.
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody2D.get_angular_damp">
            <summary>
            Return the angular damp for this body.
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody2D.set_linear_velocity(GodotEngine.Vector2)">
            <summary>
            Set the body linear velocity. Can be used sporadically, but [b]DON'T SET THIS IN EVERY FRAME[/b], because physics may be running in another thread and definitely runs at a different granularity. Use [method _integrate_forces] as your process loop if you want to have precise control of the body state.
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody2D.get_linear_velocity">
            <summary>
            Return the body linear velocity. This changes by physics granularity. See [method set_linear_velocity].
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody2D.set_angular_velocity(System.Single)">
            <summary>
            Set the body angular velocity. Can be used sporadically, but [b]DON'T SET THIS IN EVERY FRAME[/b], because physics may be running in another thread and definitely runs at a different granularity. Use [method _integrate_forces] as your process loop if you want to have precise control of the body state.
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody2D.get_angular_velocity">
            <summary>
            Return the body angular velocity. This changes by physics granularity. See [method set_angular_velocity].
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody2D.set_max_contacts_reported(System.Int32)">
            <summary>
            Set the maximum contacts to report. Bodies can keep a log of the contacts with other bodies, this is enabled by setting the maximum amount of contacts reported to a number greater than 0.
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody2D.get_max_contacts_reported">
            <summary>
            Return the maximum contacts that can be reported. See [method set_max_contacts_reported].
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody2D.set_use_custom_integrator(System.Boolean)">
            <summary>
            Pass true to disable the internal force integration (like gravity or air friction) for this body. Other than collision response, the body will only move as determined by the [method _integrate_forces] function, if defined.
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody2D.is_using_custom_integrator">
            <summary>
            Return true if the body is not doing any built-in force integration.
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody2D.set_contact_monitor(System.Boolean)">
            <summary>
            Enable contact monitoring. This allows the body to emit signals when it collides with another.
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody2D.is_contact_monitor_enabled">
            <summary>
            Return whether contact monitoring is enabled.
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody2D.set_continuous_collision_detection_mode(System.Int32)">
            <summary>
            Set the continuous collision detection mode from the enum CCD_MODE_*.
            Continuous collision detection tries to predict where a moving body will collide, instead of moving it and correcting its movement if it collided. The first is more precise, and misses less impacts by small, fast-moving objects. The second is faster to compute, but can miss small, fast-moving objects.
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody2D.get_continuous_collision_detection_mode">
            <summary>
            Return whether this body is using continuous collision detection.
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody2D.set_axis_velocity(GodotEngine.Vector2)">
            <summary>
            Set an axis velocity. The velocity in the given vector axis will be set as the given vector length. This is useful for jumping behavior.
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody2D.apply_impulse(GodotEngine.Vector2,GodotEngine.Vector2)">
            <summary>
            Apply a positioned impulse (which will be affected by the body mass and shape). This is the equivalent of hitting a billiard ball with a cue: a force that is applied once, and only once. Both the impulse and the offset from the body origin are in global coordinates.
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody2D.set_applied_force(GodotEngine.Vector2)">
            <summary>
            Set the applied force vector. This is the equivalent of pushing a box over the ground: the force applied is applied constantly.
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody2D.get_applied_force">
            <summary>
            Return the applied force vector.
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody2D.set_applied_torque(System.Single)">
            <summary>
            Set a constant torque which will be applied to this body.
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody2D.get_applied_torque">
            <summary>
            Return the torque which is being applied to this body.
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody2D.add_force(GodotEngine.Vector2,GodotEngine.Vector2)">
            <summary>
            Add a positioned force to the applied force and torque. As with [method apply_impulse], both the force and the offset from the body origin are in global coordinates.
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody2D.set_sleeping(System.Boolean)">
            <summary>
            Set whether a body is sleeping or not. Sleeping bodies are not affected by forces until a collision or an [method apply_impulse] / [method set_applied_force] wakes them up. Until then, they behave like a static body.
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody2D.is_sleeping">
            <summary>
            Return whether the body is sleeping.
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody2D.set_can_sleep(System.Boolean)">
            <summary>
            Set the body ability to fall asleep when not moving. This saves an enormous amount of processor time when there are plenty of rigid bodies (non static) in a scene.
            Sleeping bodies are not affected by forces until a collision or an [method apply_impulse] / [method set_applied_force] wakes them up. Until then, they behave like a static body.
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody2D.is_able_to_sleep">
            <summary>
            Return true if the body has the ability to fall asleep when not moving. See [method set_can_sleep].
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody2D.test_motion(GodotEngine.Vector2,System.Single,GodotEngine.Physics2DTestMotionResult)">
            <summary>
            Return whether the body would collide, if it tried to move in the given vector. This method allows two extra parameters: A margin, which increases slightly the size of the shapes involved in the collision detection, and an object of type [Physics2DTestMotionResult], which will store additional information about the collision (should there be one).
            </summary>
        </member>
        <member name="M:GodotEngine.RigidBody2D.get_colliding_bodies">
            <summary>
            Return a list of the bodies colliding with this one. By default, number of max contacts reported is at 0 , see [method set_max_contacts_reported] to increase it. You must also enable contact monitor, see [method set_contact_monitor]
            </summary>
        </member>
        <member name="T:GodotEngine.Room">
            <summary>
            Room contains the data to define the bounds of a scene (using a BSP Tree). It is instanced by a [VisualInstance] node to create rooms. See that class documentation for more information about rooms.
            </summary>
        </member>
        <member name="M:GodotEngine.SceneTree.set_network_peer(GodotEngine.NetworkedMultiplayerPeer)">
            <summary>
            Set the peer object to handle the RPC system (effectively enabling networking). Depending on the peer itself, the SceneTree will become a network server (check with [method is_network_server()]) and will set root node's network mode to master (see NETWORK_MODE_* constants in [Node]), or it will become a regular peer with root node set to slave. All child nodes are set to inherit the network mode by default. Handling of networking-related events (connection, disconnection, new clients) is done by connecting to SceneTree's signals.
            </summary>
        </member>
        <member name="M:GodotEngine.SceneTree.is_network_server">
            <summary>
            Returns true if this SceneTree's [NetworkedMultiplayerPeer] is in server mode (listening for connections).
            </summary>
        </member>
        <member name="M:GodotEngine.SceneTree.has_network_peer">
            <summary>
            Returns true if there is a [NetworkedMultiplayerPeer] set (with [method SceneTree.set_network_peer]).
            </summary>
        </member>
        <member name="T:GodotEngine.Script">
            <summary>
            Base class for scripts. Any script that is loaded becomes one of these resources, which can then create instances.
            </summary>
        </member>
        <member name="M:GodotEngine.Script.can_instance">
            <summary>
            Return true if this script can be instance (ie not a library).
            </summary>
        </member>
        <member name="M:GodotEngine.Script.instance_has(GodotEngine.Object)">
            <summary>
            Return true if a given object uses an instance of this script.
            </summary>
        </member>
        <member name="M:GodotEngine.Script.has_source_code">
            <summary>
            Return true if the script contains source code.
            </summary>
        </member>
        <member name="M:GodotEngine.Script.get_source_code">
            <summary>
            Return the script source code (if available).
            </summary>
        </member>
        <member name="M:GodotEngine.Script.set_source_code(System.String)">
            <summary>
            Set the script source code.
            </summary>
        </member>
        <member name="T:GodotEngine.ScrollBar">
            <summary>
            Scrollbars are a [Range] based [Control], that display a draggable area (the size of the page). Horizontal ([HScrollBar]) and Vertical ([VScrollBar]) versions are available.
            </summary>
        </member>
        <member name="T:GodotEngine.ScrollContainer">
            <summary>
            A ScrollContainer node with a [Control] child and scrollbar child ([HScrollbar], [VScrollBar], or both) will only draw the Control within the ScrollContainer area.  Scrollbars will automatically be drawn at the right (for vertical) or bottom (for horizontal) and will enable dragging to move the viewable Control (and its children) within the ScrollContainer.  Scrollbars will also automatically resize the grabber based on the minimum_size of the Control relative to the ScrollContainer.  Works great with a [Panel] control.  You can set EXPAND on children size flags, so they will upscale to ScrollContainer size if ScrollContainer size is bigger (scroll is invisible for chosen dimension).
            </summary>
        </member>
        <member name="M:GodotEngine.ScrollContainer.set_enable_h_scroll(System.Boolean)">
            <summary>
            Set allows horizontal scroll.
            </summary>
        </member>
        <member name="M:GodotEngine.ScrollContainer.is_h_scroll_enabled">
            <summary>
            Return true if horizontal scroll is allowed.
            </summary>
        </member>
        <member name="M:GodotEngine.ScrollContainer.set_enable_v_scroll(System.Boolean)">
            <summary>
            Set allows vertical scroll.
            </summary>
        </member>
        <member name="M:GodotEngine.ScrollContainer.is_v_scroll_enabled">
            <summary>
            Return true if vertical scroll is allowed.
            </summary>
        </member>
        <member name="M:GodotEngine.ScrollContainer.set_h_scroll(System.Int32)">
            <summary>
            Set horizontal scroll value.
            </summary>
        </member>
        <member name="M:GodotEngine.ScrollContainer.get_h_scroll">
            <summary>
            Return current horizontal scroll value.
            </summary>
        </member>
        <member name="M:GodotEngine.ScrollContainer.set_v_scroll(System.Int32)">
            <summary>
            Set vertical scroll value.
            </summary>
        </member>
        <member name="M:GodotEngine.ScrollContainer.get_v_scroll">
            <summary>
            Return current vertical scroll value.
            </summary>
        </member>
        <member name="T:GodotEngine.SegmentShape2D">
            <summary>
            Segment Shape for 2D Collision Detection, consists of two points, 'a' and 'b'.
            </summary>
        </member>
        <member name="M:GodotEngine.SegmentShape2D.set_a(GodotEngine.Vector2)">
            <summary>
            Set the first point's position.
            </summary>
        </member>
        <member name="M:GodotEngine.SegmentShape2D.get_a">
            <summary>
            Return the first point's position.
            </summary>
        </member>
        <member name="M:GodotEngine.SegmentShape2D.set_b(GodotEngine.Vector2)">
            <summary>
            Set the second point's position.
            </summary>
        </member>
        <member name="M:GodotEngine.SegmentShape2D.get_b">
            <summary>
            Return the second point's position.
            </summary>
        </member>
        <member name="T:GodotEngine.Separator">
            <summary>
            Separator is a [Control] used for separating other controls. It's purely a visual decoration. Horizontal ([HSeparator]) and Vertical ([VSeparator]) versions are available.
            </summary>
        </member>
        <member name="T:GodotEngine.Shader">
            <summary>
            To be changed, ignore.
            </summary>
        </member>
        <member name="T:GodotEngine.Shape2D">
            <summary>
            Base class for all 2D Shapes. All 2D shape types inherit from this.
            </summary>
        </member>
        <member name="M:GodotEngine.Shape2D.set_custom_solver_bias(System.Single)">
            <summary>
            Use a custom solver bias. No need to change this unless you really know what you are doing.
            The solver bias is a factor controlling how much two objects "rebound" off each other, when colliding, to avoid them getting into each other because of numerical imprecision.
            </summary>
        </member>
        <member name="M:GodotEngine.Shape2D.get_custom_solver_bias">
            <summary>
            Return the custom solver bias.
            </summary>
        </member>
        <member name="M:GodotEngine.Shape2D.collide(GodotEngine.Transform2D,GodotEngine.Shape2D,GodotEngine.Transform2D)">
            <summary>
            Return whether this shape is colliding with another.
            This method needs the transformation matrix for this shape ([code]local_xform[/code]), the shape to check collisions with ([code]with_shape[/code]), and the transformation matrix of that shape ([code]shape_xform[/code]).
            </summary>
        </member>
        <member name="M:GodotEngine.Shape2D.collide_with_motion(GodotEngine.Transform2D,GodotEngine.Vector2,GodotEngine.Shape2D,GodotEngine.Transform2D,GodotEngine.Vector2)">
            <summary>
            Return whether this shape would collide with another, if a given movement was applied.
            This method needs the transformation matrix for this shape ([code]local_xform[/code]), the movement to test on this shape ([code]local_motion[/code]), the shape to check collisions with ([code]with_shape[/code]), the transformation matrix of that shape ([code]shape_xform[/code]), and the movement to test onto the other object ([code]shape_motion[/code]).
            </summary>
        </member>
        <member name="M:GodotEngine.Shape2D.collide_and_get_contacts(GodotEngine.Transform2D,GodotEngine.Shape2D,GodotEngine.Transform2D)">
            <summary>
            Return a list of the points where this shape touches another. If there are no collisions, the list is empty.
            This method needs the transformation matrix for this shape ([code]local_xform[/code]), the shape to check collisions with ([code]with_shape[/code]), and the transformation matrix of that shape ([code]shape_xform[/code]).
            </summary>
        </member>
        <member name="M:GodotEngine.Shape2D.collide_with_motion_and_get_contacts(GodotEngine.Transform2D,GodotEngine.Vector2,GodotEngine.Shape2D,GodotEngine.Transform2D,GodotEngine.Vector2)">
            <summary>
            Return a list of the points where this shape would touch another, if a given movement was applied. If there are no collisions, the list is empty.
            This method needs the transformation matrix for this shape ([code]local_xform[/code]), the movement to test on this shape ([code]local_motion[/code]), the shape to check collisions with ([code]with_shape[/code]), the transformation matrix of that shape ([code]shape_xform[/code]), and the movement to test onto the other object ([code]shape_motion[/code]).
            </summary>
        </member>
        <member name="T:GodotEngine.Skeleton">
            <summary>
            Skeleton provides a hierarchical interface for managing bones, including pose, rest and animation (see [Animation]). Skeleton will support rag doll dynamics in the future.
            </summary>
        </member>
        <member name="M:GodotEngine.Skeleton.add_bone(System.String)">
            <summary>
            Add a bone, with name "name". [method get_bone_count] will become the bone index.
            </summary>
        </member>
        <member name="M:GodotEngine.Skeleton.find_bone(System.String)">
            <summary>
            Return the bone index that matches "name" as its name.
            </summary>
        </member>
        <member name="M:GodotEngine.Skeleton.get_bone_name(System.Int32)">
            <summary>
            Return the name of the bone at index "index"
            </summary>
        </member>
        <member name="M:GodotEngine.Skeleton.get_bone_parent(System.Int32)">
            <summary>
            Return the bone index which is the parent of the bone at "bone_idx". If -1, then bone has no parent. Note that the parent bone returned will always be less than "bone_idx".
            </summary>
        </member>
        <member name="M:GodotEngine.Skeleton.set_bone_parent(System.Int32,System.Int32)">
            <summary>
            Set the bone index "parent_idx" as the parent of the bone at "bone_idx". If -1, then bone has no parent. Note: "parent_idx" must be less than "bone_idx".
            </summary>
        </member>
        <member name="M:GodotEngine.Skeleton.get_bone_count">
            <summary>
            Return the amount of bones in the skeleton.
            </summary>
        </member>
        <member name="M:GodotEngine.Skeleton.get_bone_rest(System.Int32)">
            <summary>
            Return the rest transform for a bone "bone_idx".
            </summary>
        </member>
        <member name="M:GodotEngine.Skeleton.set_bone_rest(System.Int32,GodotEngine.Transform)">
            <summary>
            Set the rest transform for bone "bone_idx"
            </summary>
        </member>
        <member name="M:GodotEngine.Skeleton.bind_child_node_to_bone(System.Int32,GodotEngine.Node)">
            <summary>
            Deprecated soon.
            </summary>
        </member>
        <member name="M:GodotEngine.Skeleton.unbind_child_node_from_bone(System.Int32,GodotEngine.Node)">
            <summary>
            Deprecated soon.
            </summary>
        </member>
        <member name="M:GodotEngine.Skeleton.get_bound_child_nodes_to_bone(System.Int32)">
            <summary>
            Deprecated soon.
            </summary>
        </member>
        <member name="M:GodotEngine.Skeleton.clear_bones">
            <summary>
            Clear all the bones in this skeleton.
            </summary>
        </member>
        <member name="M:GodotEngine.Skeleton.get_bone_pose(System.Int32)">
            <summary>
            Return the pose transform for bone "bone_idx".
            </summary>
        </member>
        <member name="M:GodotEngine.Skeleton.set_bone_pose(System.Int32,GodotEngine.Transform)">
            <summary>
            Return the pose transform for bone "bone_idx".
            </summary>
        </member>
        <member name="T:GodotEngine.Slider">
            <summary>
            Base class for GUI Sliders.
            </summary>
        </member>
        <member name="M:GodotEngine.Slider.set_ticks(System.Int32)">
            <summary>
            Set amount of ticks to display in slider.
            </summary>
        </member>
        <member name="M:GodotEngine.Slider.get_ticks">
            <summary>
            Return amounts of ticks to display on slider.
            </summary>
        </member>
        <member name="M:GodotEngine.Slider.get_ticks_on_borders">
            <summary>
            Return true if ticks are visible on borders.
            </summary>
        </member>
        <member name="M:GodotEngine.Slider.set_ticks_on_borders(System.Boolean)">
            <summary>
            Set true if ticks are visible on borders.
            </summary>
        </member>
        <member name="T:GodotEngine.Spatial">
            <summary>
            Spatial is the base for every type of 3D [Node]. It contains a 3D [Transform] which can be set or get as local or global. If a Spatial [Node] has Spatial children, their transforms will be relative to the parent.
            </summary>
        </member>
        <member name="F:GodotEngine.Spatial.NOTIFICATION_TRANSFORM_CHANGED">
            <summary>
            Spatial nodes receive this notification with their global transform changes. This means that either the current or a parent node changed its transform.
            </summary>
        </member>
        <member name="M:GodotEngine.Spatial.set_transform(GodotEngine.Transform)">
            <summary>
            Set the transform locally, relative to the parent spatial node.
            </summary>
        </member>
        <member name="M:GodotEngine.Spatial.get_transform">
            <summary>
            Return the local transform, relative to the bone parent.
            </summary>
        </member>
        <member name="M:GodotEngine.Spatial.set_rotation(GodotEngine.Vector3)">
            <summary>
            Set the rotation (in radians).
            </summary>
        </member>
        <member name="M:GodotEngine.Spatial.get_rotation">
            <summary>
            Return the rotation (in radians).
            </summary>
        </member>
        <member name="M:GodotEngine.Spatial.set_rotation_deg(GodotEngine.Vector3)">
            <summary>
            Set the rotation (in degrees).
            </summary>
        </member>
        <member name="M:GodotEngine.Spatial.get_rotation_deg">
            <summary>
            Return the rotation (in degrees).
            </summary>
        </member>
        <member name="M:GodotEngine.Spatial.set_global_transform(GodotEngine.Transform)">
            <summary>
            Set the transform globally, relative to worldspace.
            </summary>
        </member>
        <member name="M:GodotEngine.Spatial.get_global_transform">
            <summary>
            Return the global transform, relative to worldspace.
            </summary>
        </member>
        <member name="M:GodotEngine.Spatial.get_parent_spatial">
            <summary>
            Return the parent [Spatial], or an empty [Object] if no parent exists or parent is not of type [Spatial].
            </summary>
        </member>
        <member name="T:GodotEngine.SpinBox">
            <summary>
            SpinBox is a numerical input text field. It allows entering integers and floats.
            </summary>
        </member>
        <member name="M:GodotEngine.SpinBox.set_suffix(System.String)">
            <summary>
            Set a specific suffix.
            </summary>
        </member>
        <member name="M:GodotEngine.SpinBox.get_suffix">
            <summary>
            Return the specific suffix.
            </summary>
        </member>
        <member name="M:GodotEngine.SpinBox.set_prefix(System.String)">
            <summary>
            Set a prefix.
            </summary>
        </member>
        <member name="M:GodotEngine.SpinBox.set_editable(System.Boolean)">
            <summary>
            Set whether the spinbox is editable.
            </summary>
        </member>
        <member name="M:GodotEngine.SpinBox.is_editable">
            <summary>
            Return if the spinbox is editable.
            </summary>
        </member>
        <member name="T:GodotEngine.SplitContainer">
            <summary>
            Container for splitting two controls vertically or horizontally, with a grabber that allows adjusting the split offset or ratio.
            </summary>
        </member>
        <member name="F:GodotEngine.SplitContainer.DRAGGER_VISIBLE">
            <summary>
            The split dragger is visible.
            </summary>
        </member>
        <member name="F:GodotEngine.SplitContainer.DRAGGER_HIDDEN">
            <summary>
            The split dragger is invisible.
            </summary>
        </member>
        <member name="F:GodotEngine.SplitContainer.DRAGGER_HIDDEN_COLLAPSED">
            <summary>
            The split dragger is invisible and collapsed.
            </summary>
        </member>
        <member name="M:GodotEngine.SplitContainer.set_split_offset(System.Int32)">
            <summary>
            Set the split offset.
            </summary>
        </member>
        <member name="M:GodotEngine.SplitContainer.get_split_offset">
            <summary>
            Return the split offset.
            </summary>
        </member>
        <member name="M:GodotEngine.SplitContainer.set_collapsed(System.Boolean)">
            <summary>
            Set if the split must be collapsed.
            </summary>
        </member>
        <member name="M:GodotEngine.SplitContainer.is_collapsed">
            <summary>
            Return true if the split is collapsed.
            </summary>
        </member>
        <member name="M:GodotEngine.SplitContainer.set_dragger_visibility(System.Int32)">
            <summary>
            Set visibility of the split dragger ([i]mode[/i] must be one of [DRAGGER_VISIBLE], [DRAGGER_HIDDEN] or [DRAGGER_HIDDEN_COLLAPSED]).
            </summary>
        </member>
        <member name="M:GodotEngine.SplitContainer.get_dragger_visibility">
            <summary>
            Return visibility of the split dragger (one of [DRAGGER_VISIBLE], [DRAGGER_HIDDEN] or [DRAGGER_HIDDEN_COLLAPSED]).
            </summary>
        </member>
        <member name="T:GodotEngine.SpotLight">
            <summary>
            A SpotLight light is a type of [Light] node that emits lights in a specific direction, in the shape of a cone. The light is attenuated through the distance and this attenuation can be configured by changing the energy, radius and attenuation parameters of [Light]. TODO: Image of a spotlight.
            </summary>
        </member>
        <member name="T:GodotEngine.Sprite">
            <summary>
            General purpose Sprite node. This Sprite node can show any texture as a sprite. The texture can be used as a spritesheet for animation, or only a region from a bigger texture can referenced, like an atlas.
            </summary>
        </member>
        <member name="M:GodotEngine.Sprite.set_texture(GodotEngine.Texture)">
            <summary>
            Set the base texture for the sprite.
            </summary>
        </member>
        <member name="M:GodotEngine.Sprite.get_texture">
            <summary>
            Return the base texture for the sprite.
            </summary>
        </member>
        <member name="M:GodotEngine.Sprite.set_centered(System.Boolean)">
            <summary>
            Set whether the sprite should be centered on the origin.
            </summary>
        </member>
        <member name="M:GodotEngine.Sprite.is_centered">
            <summary>
            Return if the sprite is centered at the local origin.
            </summary>
        </member>
        <member name="M:GodotEngine.Sprite.set_offset(GodotEngine.Vector2)">
            <summary>
            Set the sprite draw offset, useful for setting rotation pivots.
            </summary>
        </member>
        <member name="M:GodotEngine.Sprite.get_offset">
            <summary>
            Return sprite draw offset.
            </summary>
        </member>
        <member name="M:GodotEngine.Sprite.set_flip_h(System.Boolean)">
            <summary>
            Set true to flip the sprite horizontally.
            </summary>
        </member>
        <member name="M:GodotEngine.Sprite.is_flipped_h">
            <summary>
            Return true if the sprite is flipped horizontally.
            </summary>
        </member>
        <member name="M:GodotEngine.Sprite.set_flip_v(System.Boolean)">
            <summary>
            Set true to flip the sprite vertically.
            </summary>
        </member>
        <member name="M:GodotEngine.Sprite.is_flipped_v">
            <summary>
            Return true if the sprite is flipped vertically.
            </summary>
        </member>
        <member name="M:GodotEngine.Sprite.set_region(System.Boolean)">
            <summary>
            Set the sprite as a sub-region of a bigger texture. Useful for texture-atlases.
            </summary>
        </member>
        <member name="M:GodotEngine.Sprite.is_region">
            <summary>
            Return if the sprite reads from a region.
            </summary>
        </member>
        <member name="M:GodotEngine.Sprite.set_region_rect(GodotEngine.Rect2)">
            <summary>
            Set the region rect to read from.
            </summary>
        </member>
        <member name="M:GodotEngine.Sprite.get_region_rect">
            <summary>
            Return the region rect to read from.
            </summary>
        </member>
        <member name="M:GodotEngine.Sprite.set_frame(System.Int32)">
            <summary>
            Set the texture frame for a sprite-sheet, works when vframes or hframes are greater than 1.
            </summary>
        </member>
        <member name="M:GodotEngine.Sprite.get_frame">
            <summary>
            Return the texture frame for a sprite-sheet, works when vframes or hframes are greater than 1.
            </summary>
        </member>
        <member name="M:GodotEngine.Sprite.set_vframes(System.Int32)">
            <summary>
            Set the amount of vertical frames and converts the sprite into a sprite-sheet. This is useful for animation.
            </summary>
        </member>
        <member name="M:GodotEngine.Sprite.get_vframes">
            <summary>
            Return the amount of vertical frames. See [method set_vframes].
            </summary>
        </member>
        <member name="M:GodotEngine.Sprite.set_hframes(System.Int32)">
            <summary>
            Set the amount of horizontal frames and converts the sprite into a sprite-sheet. This is useful for animation.
            </summary>
        </member>
        <member name="M:GodotEngine.Sprite.get_hframes">
            <summary>
            Return the amount of horizontal frames. See [method set_hframes].
            </summary>
        </member>
        <member name="T:GodotEngine.SpriteFrames">
            <summary>
            Sprite frame library for [AnimatedSprite].
            </summary>
        </member>
        <member name="T:GodotEngine.StaticBody">
            <summary>
            Static body for 3D Physics. A static body is a simple body that is not intended to move. They don't consume any CPU resources in contrast to a [RigidBody3D] so they are great for scenario collision.
            A static body can also be animated by using simulated motion mode. This is useful for implementing functionalities such as moving platforms. When this mode is active the body can be animated and automatically computes linear and angular velocity to apply in that frame and to influence other bodies.
            Alternatively, a constant linear or angular velocity can be set for the static body, so even if it doesn't move, it affects other bodies as if it was moving (this is useful for simulating conveyor belts or conveyor wheels).
            </summary>
        </member>
        <member name="M:GodotEngine.StaticBody.set_constant_linear_velocity(GodotEngine.Vector3)">
            <summary>
            Set a constant linear velocity for the body. This does not move the body, but affects other bodies touching it, as if it was moving.
            </summary>
        </member>
        <member name="M:GodotEngine.StaticBody.set_constant_angular_velocity(GodotEngine.Vector3)">
            <summary>
            Set a constant angular velocity for the body. This does not rotate the body, but affects other bodies touching it, as if it was rotating.
            </summary>
        </member>
        <member name="M:GodotEngine.StaticBody.get_constant_linear_velocity">
            <summary>
            Return the constant linear velocity for the body.
            </summary>
        </member>
        <member name="M:GodotEngine.StaticBody.get_constant_angular_velocity">
            <summary>
            Return the constant angular velocity for the body.
            </summary>
        </member>
        <member name="M:GodotEngine.StaticBody.set_friction(System.Single)">
            <summary>
            Set the body friction, from 0 (frictionless) to 1 (full friction).
            </summary>
        </member>
        <member name="M:GodotEngine.StaticBody.get_friction">
            <summary>
            Return the body friction.
            </summary>
        </member>
        <member name="M:GodotEngine.StaticBody.set_bounce(System.Single)">
            <summary>
            Set the body bounciness, from 0 (not bouncy) to 1 (bouncy).
            </summary>
        </member>
        <member name="M:GodotEngine.StaticBody.get_bounce">
            <summary>
            Return the body bounciness.
            </summary>
        </member>
        <member name="T:GodotEngine.StaticBody2D">
            <summary>
            Static body for 2D Physics. A static body is a simple body that is not intended to move. They don't consume any CPU resources in contrast to a [RigidBody2D] so they are great for scenario collision.
            A static body can also be animated by using simulated motion mode. This is useful for implementing functionalities such as moving platforms. When this mode is active the body can be animated and automatically computes linear and angular velocity to apply in that frame and to influence other bodies.
            Alternatively, a constant linear or angular velocity can be set for the static body, so even if it doesn't move, it affects other bodies as if it was moving (this is useful for simulating conveyor belts or conveyor wheels).
            </summary>
        </member>
        <member name="M:GodotEngine.StaticBody2D.set_constant_linear_velocity(GodotEngine.Vector2)">
            <summary>
            Set a constant linear velocity for the body. This does not move the body, but affects other bodies touching it, as if it was moving.
            </summary>
        </member>
        <member name="M:GodotEngine.StaticBody2D.set_constant_angular_velocity(System.Single)">
            <summary>
            Set a constant angular velocity for the body. This does not rotate the body, but affects other bodies touching it, as if it was rotating.
            </summary>
        </member>
        <member name="M:GodotEngine.StaticBody2D.get_constant_linear_velocity">
            <summary>
            Return the constant linear velocity for the body.
            </summary>
        </member>
        <member name="M:GodotEngine.StaticBody2D.get_constant_angular_velocity">
            <summary>
            Return the constant angular velocity for the body.
            </summary>
        </member>
        <member name="M:GodotEngine.StaticBody2D.set_friction(System.Single)">
            <summary>
            Set the body friction, from 0 (frictionless) to 1 (full friction).
            </summary>
        </member>
        <member name="M:GodotEngine.StaticBody2D.get_friction">
            <summary>
            Return the body friction.
            </summary>
        </member>
        <member name="M:GodotEngine.StaticBody2D.set_bounce(System.Single)">
            <summary>
            Set the body bounciness, from 0 (not bouncy) to 1 (bouncy).
            </summary>
        </member>
        <member name="M:GodotEngine.StaticBody2D.get_bounce">
            <summary>
            Return the body bounciness.
            </summary>
        </member>
        <member name="T:GodotEngine.StreamPeer">
            <summary>
            StreamPeer is an abstraction and base class for stream-based protocols (such as TCP or Unix Sockets). It provides an API for sending and receiving data through streams as raw data or strings.
            </summary>
        </member>
        <member name="M:GodotEngine.StreamPeer.put_data(System.Byte[])">
            <summary>
            Send a chunk of data through the connection, blocking if necessary until the data is done sending. This function returns an Error code.
            </summary>
        </member>
        <member name="M:GodotEngine.StreamPeer.put_partial_data(System.Byte[])">
            <summary>
            Send a chunk of data through the connection, if all the data could not be sent at once, only part of it will. This function returns two values, an Error code and an integer, describing how much data was actually sent.
            </summary>
        </member>
        <member name="M:GodotEngine.StreamPeer.get_data(System.Int32)">
            <summary>
            Return a chunk data with the received bytes. The amount of bytes to be received can be requested in the "bytes" argument. If not enough bytes are available, the function will block until the desired amount is received. This function returns two values, an Error code and a data array.
            </summary>
        </member>
        <member name="M:GodotEngine.StreamPeer.get_partial_data(System.Int32)">
            <summary>
            Return a chunk data with the received bytes. The amount of bytes to be received can be requested in the "bytes" argument. If not enough bytes are available, the function will return how many were actually received. This function returns two values, an Error code, and a data array.
            </summary>
        </member>
        <member name="M:GodotEngine.StreamPeer.get_available_bytes">
            <summary>
            Return the amount of bytes this [StreamPeer] has available.
            </summary>
        </member>
        <member name="M:GodotEngine.StreamPeer.set_big_endian(System.Boolean)">
            <summary>
            Set this [StreamPeer] to use big-endian format. Default is false.
            </summary>
        </member>
        <member name="M:GodotEngine.StreamPeer.is_big_endian_enabled">
            <summary>
            Return whether this [StreamPeer] is using big-endian format.
            </summary>
        </member>
        <member name="M:GodotEngine.StreamPeer.put_8(System.Int32)">
            <summary>
            Put a signed byte into the stream.
            </summary>
        </member>
        <member name="M:GodotEngine.StreamPeer.put_u8(System.Int32)">
            <summary>
            Put an unsigned byte into the stream.
            </summary>
        </member>
        <member name="M:GodotEngine.StreamPeer.put_16(System.Int32)">
            <summary>
            Put a signed 16 bit value into the stream.
            </summary>
        </member>
        <member name="M:GodotEngine.StreamPeer.put_u16(System.Int32)">
            <summary>
            Put an unsigned 16 bit value into the stream.
            </summary>
        </member>
        <member name="M:GodotEngine.StreamPeer.put_32(System.Int32)">
            <summary>
            Put a signed 32 bit value into the stream.
            </summary>
        </member>
        <member name="M:GodotEngine.StreamPeer.put_u32(System.Int32)">
            <summary>
            Put an unsigned 32 bit value into the stream.
            </summary>
        </member>
        <member name="M:GodotEngine.StreamPeer.put_64(System.Int32)">
            <summary>
            Put a signed 64 bit value into the stream.
            </summary>
        </member>
        <member name="M:GodotEngine.StreamPeer.put_u64(System.Int32)">
            <summary>
            Put an unsigned 64 bit value into the stream.
            </summary>
        </member>
        <member name="M:GodotEngine.StreamPeer.put_float(System.Single)">
            <summary>
            Put a single-precision float into the stream.
            </summary>
        </member>
        <member name="M:GodotEngine.StreamPeer.put_double(System.Single)">
            <summary>
            Put a double-precision float into the stream.
            </summary>
        </member>
        <member name="M:GodotEngine.StreamPeer.put_utf8_string(System.String)">
            <summary>
            Put a zero-terminated utf8 string into the stream.
            </summary>
        </member>
        <member name="M:GodotEngine.StreamPeer.put_var(System.Object)">
            <summary>
            Put a Variant into the stream.
            </summary>
        </member>
        <member name="M:GodotEngine.StreamPeer.get_8">
            <summary>
            Get a signed byte from the stream.
            </summary>
        </member>
        <member name="M:GodotEngine.StreamPeer.get_u8">
            <summary>
            Get an unsigned byte from the stream.
            </summary>
        </member>
        <member name="M:GodotEngine.StreamPeer.get_16">
            <summary>
            Get a signed 16 bit value from the stream.
            </summary>
        </member>
        <member name="M:GodotEngine.StreamPeer.get_u16">
            <summary>
            Get an unsigned 16 bit value from the stream.
            </summary>
        </member>
        <member name="M:GodotEngine.StreamPeer.get_32">
            <summary>
            Get a signed 32 bit value from the stream.
            </summary>
        </member>
        <member name="M:GodotEngine.StreamPeer.get_u32">
            <summary>
            Get an unsigned 32 bit value from the stream.
            </summary>
        </member>
        <member name="M:GodotEngine.StreamPeer.get_64">
            <summary>
            Get a signed 64 bit value from the stream.
            </summary>
        </member>
        <member name="M:GodotEngine.StreamPeer.get_u64">
            <summary>
            Get an unsigned 16 bit value from the stream.
            </summary>
        </member>
        <member name="M:GodotEngine.StreamPeer.get_float">
            <summary>
            Get a single-precision float from the stream.
            </summary>
        </member>
        <member name="M:GodotEngine.StreamPeer.get_double">
            <summary>
            Get a double-precision float from the stream.
            </summary>
        </member>
        <member name="M:GodotEngine.StreamPeer.get_string(System.Int32)">
            <summary>
            Get a string with byte-length "bytes" from the stream.
            </summary>
        </member>
        <member name="M:GodotEngine.StreamPeer.get_utf8_string(System.Int32)">
            <summary>
            Get an utf8 string with byte-length "bytes" from the stream (this decodes the string sent as utf8).
            </summary>
        </member>
        <member name="M:GodotEngine.StreamPeer.get_var">
            <summary>
            Get a Variant from the stream.
            </summary>
        </member>
        <member name="T:GodotEngine.StreamPeerSSL">
            <summary>
            SSL Stream peer. This object can be used to connect to SSL servers.
            </summary>
        </member>
        <member name="F:GodotEngine.StreamPeerSSL.STATUS_DISCONNECTED">
            <summary>
            A status representing a [StreamPeerSSL] that is disconnected.
            </summary>
        </member>
        <member name="F:GodotEngine.StreamPeerSSL.STATUS_CONNECTED">
            <summary>
            A status representing a [StreamPeerSSL] that is connected to a host.
            </summary>
        </member>
        <member name="F:GodotEngine.StreamPeerSSL.STATUS_ERROR_NO_CERTIFICATE">
            <summary>
            An errot status that shows the peer did not present a SSL certificate and validation was requested.
            </summary>
        </member>
        <member name="F:GodotEngine.StreamPeerSSL.STATUS_ERROR_HOSTNAME_MISMATCH">
            <summary>
            An error status that shows a mismatch in the SSL certificate domain presented by the host and the domain requested for validation.
            </summary>
        </member>
        <member name="M:GodotEngine.StreamPeerSSL.connect_to_stream(GodotEngine.StreamPeer,System.Boolean,System.String)">
            <summary>
            Connect to a peer using an underlying [StreamPeer] "stream", when "validate_certs" is true, [StreamPeerSSL] will validate that the certificate presented by the peer matches the "for_hostname".
            </summary>
        </member>
        <member name="M:GodotEngine.StreamPeerSSL.get_status">
            <summary>
            Return the status of the connection, one of STATUS_* enum.
            </summary>
        </member>
        <member name="M:GodotEngine.StreamPeerSSL.disconnect_from_stream">
            <summary>
            Disconnect from host.
            </summary>
        </member>
        <member name="T:GodotEngine.StreamPeerTCP">
            <summary>
            TCP Stream peer. This object can be used to connect to TCP servers, or also is returned by a tcp server.
            </summary>
        </member>
        <member name="F:GodotEngine.StreamPeerTCP.STATUS_NONE">
            <summary>
            The initial status of the [StreamPeerTCP], also the status after a disconnect.
            </summary>
        </member>
        <member name="F:GodotEngine.StreamPeerTCP.STATUS_CONNECTING">
            <summary>
            A status representing a [StreamPeerTCP] that is connecting to a host.
            </summary>
        </member>
        <member name="F:GodotEngine.StreamPeerTCP.STATUS_CONNECTED">
            <summary>
            A status representing a [StreamPeerTCP] that is connected to a host.
            </summary>
        </member>
        <member name="F:GodotEngine.StreamPeerTCP.STATUS_ERROR">
            <summary>
            A staus representing a [StreamPeerTCP] in error state.
            </summary>
        </member>
        <member name="M:GodotEngine.StreamPeerTCP.connect_to_host(System.String,System.Int32)">
            <summary>
            Connect to the specified host:port pair. A hostname will be resolved if valid. Returns [OK] on success or [FAILED] on failure.
            </summary>
        </member>
        <member name="M:GodotEngine.StreamPeerTCP.get_status">
            <summary>
            Return the status of the connection, one of STATUS_* enum.
            </summary>
        </member>
        <member name="M:GodotEngine.StreamPeerTCP.get_connected_host">
            <summary>
            Return the IP of this peer.
            </summary>
        </member>
        <member name="M:GodotEngine.StreamPeerTCP.get_connected_port">
            <summary>
            Return the port of this peer.
            </summary>
        </member>
        <member name="M:GodotEngine.StreamPeerTCP.disconnect_from_host">
            <summary>
            Disconnect from host.
            </summary>
        </member>
        <member name="T:GodotEngine.StyleBox">
            <summary>
            StyleBox is [Resource] that provides an abstract base class for drawing stylized boxes for the UI. StyleBoxes are used for drawing the styles of buttons, line edit backgrounds, tree backgrounds, etc. and also for testing a transparency mask for pointer signals. If mask test fails on a StyleBox assigned as mask to a control, clicks and motion signals will go through it to the one below.
            </summary>
        </member>
        <member name="M:GodotEngine.StyleBox.test_mask(GodotEngine.Vector2,GodotEngine.Rect2)">
            <summary>
            Test a position in a rectangle, return whether it passes the mask test.
            </summary>
        </member>
        <member name="M:GodotEngine.StyleBox.set_default_margin(System.Int32,System.Single)">
            <summary>
            Set the default offset "offset" of the margin "margin" (see MARGIN_* enum) for a StyleBox, Controls that draw styleboxes with context inside need to know the margin, so the border of the stylebox is not occluded.
            </summary>
        </member>
        <member name="M:GodotEngine.StyleBox.get_default_margin(System.Int32)">
            <summary>
            Return the default offset of the margin "margin" (see MARGIN_* enum) of a StyleBox, Controls that draw styleboxes with context inside need to know the margin, so the border of the stylebox is not occluded.
            </summary>
        </member>
        <member name="M:GodotEngine.StyleBox.get_margin(System.Int32)">
            <summary>
            Return the offset of margin "margin" (see MARGIN_* enum).
            </summary>
        </member>
        <member name="M:GodotEngine.StyleBox.get_minimum_size">
            <summary>
            Return the minimum size that this stylebox can be shrunk to.
            </summary>
        </member>
        <member name="M:GodotEngine.StyleBox.get_offset">
            <summary>
            Return the "offset" of a stylebox, this is a helper function, like writing [code]Vector2(style.get_margin(MARGIN_LEFT), style.get_margin(MARGIN_TOP))[/code].
            </summary>
        </member>
        <member name="T:GodotEngine.StyleBoxEmpty">
            <summary>
            Empty stylebox (really does not display anything).
            </summary>
        </member>
        <member name="T:GodotEngine.StyleBoxFlat">
            <summary>
            Stylebox of a single color. Displays the stylebox of a single color, alternatively a border with light/dark colors can be assigned.
            </summary>
        </member>
        <member name="T:GodotEngine.StyleBoxTexture">
            <summary>
            Texture Based 3x3 scale style. This stylebox performs a 3x3 scaling of a texture, where only the center cell is fully stretched. This allows for the easy creation of bordered styles.
            </summary>
        </member>
        <member name="T:GodotEngine.SurfaceTool">
            <summary>
            The [SurfaceTool] is used to construct a [Mesh] by specifying vertex attributes individually. It can be used to construct a [Mesh] from script. All properties except index need to be added before a call to [method add_vertex]. For example adding vertex colors and UVs looks like
            [codeblock]
            var st = SurfaceTool.new()
            st.begin(Mesh.PRIMITIVE_TRIANGLES)
            st.add_color(Color(1, 0, 0))
            st.add_uv(Vector2(0, 0))
            st.add_vertex(Vector3(0, 0, 0))
            [/codeblock]
            The [SurfaceTool] now contains one vertex of a triangle which has a UV coordinate and a specified [Color]. If another vertex were added without calls to [method add_uv] or [method add_color] then the last values would be used.
            It is very important that vertex attributes are passed [b]before[/b] the call to [method add_vertex], failure to do this will result in an error when committing the vertex information to a mesh.
            </summary>
        </member>
        <member name="M:GodotEngine.SurfaceTool.begin(System.Int32)">
            <summary>
            Called before adding any Vertices. Takes the primitive type as an argument (e.g. Mesh.PRIMITIVE_TRIANGLES).
            </summary>
        </member>
        <member name="M:GodotEngine.SurfaceTool.add_vertex(GodotEngine.Vector3)">
            <summary>
            Specify position of current Vertex. Should be called after specifying other vertex properties (e.g. Color, UV).
            </summary>
        </member>
        <member name="M:GodotEngine.SurfaceTool.add_color(GodotEngine.Color)">
            <summary>
            Specify a [Color] for the next Vertex to use.
            </summary>
        </member>
        <member name="M:GodotEngine.SurfaceTool.add_normal(GodotEngine.Vector3)">
            <summary>
            Specify a normal for the next Vertex to use.
            </summary>
        </member>
        <member name="M:GodotEngine.SurfaceTool.add_tangent(GodotEngine.Plane)">
            <summary>
            Specify a Tangent for the next Vertex to use.
            </summary>
        </member>
        <member name="M:GodotEngine.SurfaceTool.add_uv(GodotEngine.Vector2)">
            <summary>
            Specify UV Coordinate for next Vertex to use.
            </summary>
        </member>
        <member name="M:GodotEngine.SurfaceTool.add_uv2(GodotEngine.Vector2)">
            <summary>
            Specify an optional second set of UV coordinates for next Vertex to use.
            </summary>
        </member>
        <member name="M:GodotEngine.SurfaceTool.add_bones(System.Int32[])">
            <summary>
            Add an array of bones for the next Vertex to use.
            </summary>
        </member>
        <member name="M:GodotEngine.SurfaceTool.add_weights(System.Single[])">
            <summary>
            Specify weight value for next Vertex to use.
            </summary>
        </member>
        <member name="M:GodotEngine.SurfaceTool.add_smooth_group(System.Boolean)">
            <summary>
            Specify whether current Vertex (if using only Vertex arrays) or current index (if also using index arrays) should utilize smooth normals for normal calculation.
            </summary>
        </member>
        <member name="M:GodotEngine.SurfaceTool.add_triangle_fan(GodotEngine.Vector3[],GodotEngine.Vector2[],GodotEngine.Color[],GodotEngine.Vector2[],GodotEngine.Vector3[],System.Object[])">
            <summary>
            Insert a triangle fan made of array data into [Mesh] being constructed.
            <param name="uvs">If the param is null, then the default value is new Vector2[] {}</param>
            <param name="colors">If the param is null, then the default value is new Color[] {}</param>
            <param name="uv2s">If the param is null, then the default value is new Vector2[] {}</param>
            <param name="normals">If the param is null, then the default value is new Vector3[] {}</param>
            <param name="tangents">If the param is null, then the default value is new object[] {}</param>
            </summary>
        </member>
        <member name="M:GodotEngine.SurfaceTool.add_index(System.Int32)">
            <summary>
            Adds an index to index array if you are using indexed Vertices. Does not need to be called before adding Vertex.
            </summary>
        </member>
        <member name="M:GodotEngine.SurfaceTool.index">
            <summary>
            Shrinks Vertex array by creating an index array. Avoids reusing Vertices.
            </summary>
        </member>
        <member name="M:GodotEngine.SurfaceTool.deindex">
            <summary>
            Removes index array by expanding Vertex array.
            </summary>
        </member>
        <member name="M:GodotEngine.SurfaceTool.generate_normals">
            <summary>
            Generates normals from Vertices so you do not have to do it manually.
            </summary>
        </member>
        <member name="M:GodotEngine.SurfaceTool.set_material(GodotEngine.Material)">
            <summary>
            Sets [Material] to be used by the [Mesh] you are constructing.
            </summary>
        </member>
        <member name="M:GodotEngine.SurfaceTool.clear">
            <summary>
            Clear all information passed into the surface tool so far.
            </summary>
        </member>
        <member name="T:GodotEngine.TCP_Server">
            <summary>
            TCP Server class. Listens to connections on a port and returns a [StreamPeerTCP] when got a connection.
            </summary>
        </member>
        <member name="M:GodotEngine.TCP_Server.listen(System.Int32,System.String)">
            <summary>
            Listen on the "port" binding to "bind_address".
            If "bind_address" is set as "*" (default), the server will listen on all available addresses (both IPv4 and IPv6).
            If "bind_address" is set as "0.0.0.0" (for IPv4) or "::" (for IPv6), the server will listen on all available addresses matching that IP type.
            If "bind_address" is set to any valid address (e.g. "192.168.1.101", "::1", etc), the server will only listen on the interface with that addresses (or fail if no interface with the given address exists).
            </summary>
        </member>
        <member name="M:GodotEngine.TCP_Server.is_connection_available">
            <summary>
            Return true if a connection is available for taking.
            </summary>
        </member>
        <member name="M:GodotEngine.TCP_Server.take_connection">
            <summary>
            If a connection is available, return a StreamPeerTCP with the connection/
            </summary>
        </member>
        <member name="M:GodotEngine.TCP_Server.stop">
            <summary>
            Stop listening.
            </summary>
        </member>
        <member name="T:GodotEngine.TabContainer">
            <summary>
            Tabbed Container. Contains several children controls, but shows only one at the same time. Clicking on the top tabs allows to change the currently visible one.
            Children controls of this one automatically.
            </summary>
        </member>
        <member name="M:GodotEngine.TabContainer.get_tab_count">
            <summary>
            Return the amount of tabs.
            </summary>
        </member>
        <member name="M:GodotEngine.TabContainer.set_current_tab(System.Int32)">
            <summary>
            Bring a tab (and the Control it represents) to the front, and hide the rest.
            </summary>
        </member>
        <member name="M:GodotEngine.TabContainer.get_current_tab">
            <summary>
            Return the current tab index that is being shown.
            </summary>
        </member>
        <member name="M:GodotEngine.TabContainer.get_previous_tab">
            <summary>
            Return the previous tab index that was being shown.
            </summary>
        </member>
        <member name="M:GodotEngine.TabContainer.get_tab_control(System.Int32)">
            <summary>
            Return the current tab control that is being shown.
            </summary>
        </member>
        <member name="M:GodotEngine.TabContainer.set_tab_align(System.Int32)">
            <summary>
            Set tab alignment, from the ALIGN_* enum. Moves tabs to the left, right or center.
            </summary>
        </member>
        <member name="M:GodotEngine.TabContainer.get_tab_align">
            <summary>
            Return tab alignment, from the ALIGN_* enum.
            </summary>
        </member>
        <member name="M:GodotEngine.TabContainer.set_tabs_visible(System.Boolean)">
            <summary>
            Set whether the tabs should be visible or hidden.
            </summary>
        </member>
        <member name="M:GodotEngine.TabContainer.are_tabs_visible">
            <summary>
            Return whether the tabs should be visible or hidden.
            </summary>
        </member>
        <member name="M:GodotEngine.TabContainer.set_tab_title(System.Int32,System.String)">
            <summary>
            Set a title for the tab. Tab titles are by default the children node name, but this can be overridden.
            </summary>
        </member>
        <member name="M:GodotEngine.TabContainer.get_tab_title(System.Int32)">
            <summary>
            Return the title for the tab. Tab titles are by default the children node name, but this can be overridden.
            </summary>
        </member>
        <member name="M:GodotEngine.TabContainer.set_tab_icon(System.Int32,GodotEngine.Texture)">
            <summary>
            Set an icon for a tab.
            </summary>
        </member>
        <member name="T:GodotEngine.Tabs">
            <summary>
            Simple tabs control, similar to [TabContainer] but is only in charge of drawing tabs, not interact with children.
            </summary>
        </member>
        <member name="M:GodotEngine.Tabs.get_tab_rect(System.Int32)">
            <summary>
            Returns tab [Rect2] with local position and size.
            </summary>
        </member>
        <member name="M:GodotEngine.Tabs.move_tab(System.Int32,System.Int32)">
            <summary>
            Rearrange tab.
            </summary>
        </member>
        <member name="T:GodotEngine.TextEdit">
            <summary>
            TextEdit is meant for editing large, multiline text. It also has facilities for editing code, such as syntax highlighting support and multiple levels of undo/redo.
            </summary>
        </member>
        <member name="F:GodotEngine.TextEdit.SEARCH_MATCH_CASE">
            <summary>
            Match case when searching.
            </summary>
        </member>
        <member name="F:GodotEngine.TextEdit.SEARCH_WHOLE_WORDS">
            <summary>
            Match whole words when searching.
            </summary>
        </member>
        <member name="F:GodotEngine.TextEdit.SEARCH_BACKWARDS">
            <summary>
            Search from end to beginning.
            </summary>
        </member>
        <member name="M:GodotEngine.TextEdit.set_text(System.String)">
            <summary>
            Set the entire text.
            </summary>
        </member>
        <member name="M:GodotEngine.TextEdit.insert_text_at_cursor(System.String)">
            <summary>
            Insert a given text at the cursor position.
            </summary>
        </member>
        <member name="M:GodotEngine.TextEdit.get_line_count">
            <summary>
            Return the amount of total lines in the text.
            </summary>
        </member>
        <member name="M:GodotEngine.TextEdit.get_text">
            <summary>
            Return the whole text.
            </summary>
        </member>
        <member name="M:GodotEngine.TextEdit.get_line(System.Int32)">
            <summary>
            Return the text of a specific line.
            </summary>
        </member>
        <member name="M:GodotEngine.TextEdit.cursor_get_column">
            <summary>
            Return the column the editing cursor is at.
            </summary>
        </member>
        <member name="M:GodotEngine.TextEdit.cursor_get_line">
            <summary>
            Return the line the editing cursor is at.
            </summary>
        </member>
        <member name="M:GodotEngine.TextEdit.cursor_set_blink_enabled(System.Boolean)">
            <summary>
            Set the text editor caret to blink.
            </summary>
        </member>
        <member name="M:GodotEngine.TextEdit.cursor_get_blink_enabled">
            <summary>
            Gets whether the text editor caret is blinking.
            </summary>
        </member>
        <member name="M:GodotEngine.TextEdit.cursor_set_blink_speed(System.Single)">
            <summary>
            Set the text editor caret blink speed. Cannot be less then or equal to 0.
            </summary>
        </member>
        <member name="M:GodotEngine.TextEdit.cursor_get_blink_speed">
            <summary>
            Gets the text editor caret blink speed.
            </summary>
        </member>
        <member name="M:GodotEngine.TextEdit.cursor_set_block_mode(System.Boolean)">
            <summary>
            Set the text editor caret to block mode.
            </summary>
        </member>
        <member name="M:GodotEngine.TextEdit.cursor_is_block_mode">
            <summary>
            Gets whether the text editor caret is in block mode.
            </summary>
        </member>
        <member name="M:GodotEngine.TextEdit.set_readonly(System.Boolean)">
            <summary>
            Set the text editor as read-only. Text can be displayed but not edited.
            </summary>
        </member>
        <member name="M:GodotEngine.TextEdit.set_wrap(System.Boolean)">
            <summary>
            Enable text wrapping when it goes beyond he edge of what is visible.
            </summary>
        </member>
        <member name="M:GodotEngine.TextEdit.set_max_chars(System.Int32)">
            <summary>
            Set the maximum amount of characters editable.
            </summary>
        </member>
        <member name="M:GodotEngine.TextEdit.cut">
            <summary>
            Cut the current selection.
            </summary>
        </member>
        <member name="M:GodotEngine.TextEdit.copy">
            <summary>
            Copy the current selection.
            </summary>
        </member>
        <member name="M:GodotEngine.TextEdit.paste">
            <summary>
            Paste the current selection.
            </summary>
        </member>
        <member name="M:GodotEngine.TextEdit.select_all">
            <summary>
            Select all the text.
            </summary>
        </member>
        <member name="M:GodotEngine.TextEdit.select(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Perform selection, from line/column to line/column.
            </summary>
        </member>
        <member name="M:GodotEngine.TextEdit.is_selection_active">
            <summary>
            Return true if the selection is active.
            </summary>
        </member>
        <member name="M:GodotEngine.TextEdit.get_selection_from_line">
            <summary>
            Return the selection begin line.
            </summary>
        </member>
        <member name="M:GodotEngine.TextEdit.get_selection_from_column">
            <summary>
            Return the selection begin column.
            </summary>
        </member>
        <member name="M:GodotEngine.TextEdit.get_selection_to_line">
            <summary>
            Return the selection end line.
            </summary>
        </member>
        <member name="M:GodotEngine.TextEdit.get_selection_to_column">
            <summary>
            Return the selection end column.
            </summary>
        </member>
        <member name="M:GodotEngine.TextEdit.get_selection_text">
            <summary>
            Return the text inside the selection.
            </summary>
        </member>
        <member name="M:GodotEngine.TextEdit.search(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Perform a search inside the text. Search flags can be specified in the SEARCH_* enum.
            </summary>
        </member>
        <member name="M:GodotEngine.TextEdit.undo">
            <summary>
            Perform undo operation.
            </summary>
        </member>
        <member name="M:GodotEngine.TextEdit.redo">
            <summary>
            Perform redo operation.
            </summary>
        </member>
        <member name="M:GodotEngine.TextEdit.clear_undo_history">
            <summary>
            Clear the undo history.
            </summary>
        </member>
        <member name="M:GodotEngine.TextEdit.set_show_line_numbers(System.Boolean)">
            <summary>
            Set to enable showing line numbers.
            </summary>
        </member>
        <member name="M:GodotEngine.TextEdit.is_show_line_numbers_enabled">
            <summary>
            Returns true if line numbers are enabled.
            </summary>
        </member>
        <member name="M:GodotEngine.TextEdit.set_highlight_all_occurrences(System.Boolean)">
            <summary>
            Set to enable highlighting all occurrences of the current selection.
            </summary>
        </member>
        <member name="M:GodotEngine.TextEdit.is_highlight_all_occurrences_enabled">
            <summary>
            Returns true if highlight all occurrences is enabled.
            </summary>
        </member>
        <member name="M:GodotEngine.TextEdit.set_syntax_coloring(System.Boolean)">
            <summary>
            Set to enable the syntax coloring.
            </summary>
        </member>
        <member name="M:GodotEngine.TextEdit.is_syntax_coloring_enabled">
            <summary>
            Return true if the syntax coloring is enabled.
            </summary>
        </member>
        <member name="M:GodotEngine.TextEdit.add_keyword_color(System.String,GodotEngine.Color)">
            <summary>
            Add a keyword and its color.
            </summary>
        </member>
        <member name="M:GodotEngine.TextEdit.add_color_region(System.String,System.String,GodotEngine.Color,System.Boolean)">
            <summary>
            Add color region (given the delimiters) and its colors.
            </summary>
        </member>
        <member name="M:GodotEngine.TextEdit.clear_colors">
            <summary>
            Clear all the syntax coloring information.
            </summary>
        </member>
        <member name="T:GodotEngine.Texture">
            <summary>
            A texture works by registering an image in the video hardware, which then can be used in 3D models or 2D [Sprite] or GUI [Control].
            </summary>
        </member>
        <member name="F:GodotEngine.Texture.FLAG_MIPMAPS">
            <summary>
            Generate mipmaps, to enable smooth zooming out of the texture.
            </summary>
        </member>
        <member name="F:GodotEngine.Texture.FLAG_REPEAT">
            <summary>
            Repeat (instead of clamp to edge).
            </summary>
        </member>
        <member name="F:GodotEngine.Texture.FLAG_FILTER">
            <summary>
            Turn on magnifying filter, to enable smooth zooming in of the texture.
            </summary>
        </member>
        <member name="F:GodotEngine.Texture.FLAG_VIDEO_SURFACE">
            <summary>
            Texture is a video surface.
            </summary>
        </member>
        <member name="F:GodotEngine.Texture.FLAGS_DEFAULT">
            <summary>
            Default flags. Generate mipmaps, repeat, and filter are enabled.
            </summary>
        </member>
        <member name="M:GodotEngine.Texture.get_width">
            <summary>
            Return the texture width.
            </summary>
        </member>
        <member name="M:GodotEngine.Texture.get_height">
            <summary>
            Return the texture height.
            </summary>
        </member>
        <member name="M:GodotEngine.Texture.get_size">
            <summary>
            Return the texture size.
            </summary>
        </member>
        <member name="M:GodotEngine.Texture.set_flags(System.Int32)">
            <summary>
            Change the texture flags.
            </summary>
        </member>
        <member name="M:GodotEngine.Texture.get_flags">
            <summary>
            Return the current texture flags.
            </summary>
        </member>
        <member name="T:GodotEngine.TextureButton">
            <summary>
            Button that can be themed with textures. This is like a regular [Button] but can be themed by assigning textures to it. This button is intended to be easy to theme, however a regular button can expand (that uses styleboxes) and still be better if the interface is expect to have internationalization of texts.
            Only the normal texture is required, the others are optional.
            </summary>
        </member>
        <member name="T:GodotEngine.TextureProgress">
            <summary>
            [ProgressBar] implementation that is easier to theme (by just passing a few textures).
            </summary>
        </member>
        <member name="T:GodotEngine.TextureRect">
            <summary>
            Control frame that simply draws an assigned texture. It can stretch or not. It's a simple way to just show an image in a UI.
            </summary>
        </member>
        <member name="T:GodotEngine.Theme">
            <summary>
            Theme for skinning controls. Controls can be skinned individually, but for complex applications it's more efficient to just create a global theme that defines everything. This theme can be applied to any [Control], and it and its children will automatically use it.
            Theme resources can be alternatively loaded by writing them in a .theme file, see docs for more info.
            </summary>
        </member>
        <member name="T:GodotEngine.TileMap">
            <summary>
            Node for 2D tile-based games. Tilemaps use a [TileSet] which contain a list of tiles (textures, their rect and a collision) and are used to create complex grid-based maps.
            To optimize drawing and culling (sort of like [GridMap]), you can specify a quadrant size, so chunks of the map will be batched together at drawing time.
            </summary>
        </member>
        <member name="F:GodotEngine.TileMap.INVALID_CELL">
            <summary>
            Returned when a cell doesn't exist.
            </summary>
        </member>
        <member name="F:GodotEngine.TileMap.MODE_SQUARE">
            <summary>
            Orthogonal orientation mode.
            </summary>
        </member>
        <member name="F:GodotEngine.TileMap.MODE_ISOMETRIC">
            <summary>
            Isometric orientation mode.
            </summary>
        </member>
        <member name="F:GodotEngine.TileMap.MODE_CUSTOM">
            <summary>
            Custom orientation mode.
            </summary>
        </member>
        <member name="F:GodotEngine.TileMap.HALF_OFFSET_X">
            <summary>
            Half offset on the X coordinate.
            </summary>
        </member>
        <member name="F:GodotEngine.TileMap.HALF_OFFSET_Y">
            <summary>
            Half offset on the Y coordinate.
            </summary>
        </member>
        <member name="F:GodotEngine.TileMap.HALF_OFFSET_DISABLED">
            <summary>
            Half offset disabled.
            </summary>
        </member>
        <member name="F:GodotEngine.TileMap.TILE_ORIGIN_TOP_LEFT">
            <summary>
            Tile origin at its top-left corner.
            </summary>
        </member>
        <member name="F:GodotEngine.TileMap.TILE_ORIGIN_CENTER">
            <summary>
            Tile origin at its center.
            </summary>
        </member>
        <member name="M:GodotEngine.TileMap.set_tileset(GodotEngine.TileSet)">
            <summary>
            Set the current tileset.
            </summary>
        </member>
        <member name="M:GodotEngine.TileMap.get_tileset">
            <summary>
            Return the current tileset.
            </summary>
        </member>
        <member name="M:GodotEngine.TileMap.set_mode(System.Int32)">
            <summary>
            Set the orientation mode as square, isometric or custom (use MODE_* constants as argument).
            </summary>
        </member>
        <member name="M:GodotEngine.TileMap.get_mode">
            <summary>
            Return the orientation mode.
            </summary>
        </member>
        <member name="M:GodotEngine.TileMap.set_half_offset(System.Int32)">
            <summary>
            Set an half offset on the X coordinate, Y coordinate, or none (use HALF_OFFSET_* constants as argument).
            Half offset sets every other tile off by a half tile size in the specified direction.
            </summary>
        </member>
        <member name="M:GodotEngine.TileMap.get_half_offset">
            <summary>
            Return the current half offset configuration.
            </summary>
        </member>
        <member name="M:GodotEngine.TileMap.set_custom_transform(GodotEngine.Transform2D)">
            <summary>
            Set custom transform matrix, to use in combination with the custom orientation mode.
            </summary>
        </member>
        <member name="M:GodotEngine.TileMap.get_custom_transform">
            <summary>
            Return the custom transform matrix.
            </summary>
        </member>
        <member name="M:GodotEngine.TileMap.set_cell_size(GodotEngine.Vector2)">
            <summary>
            Set the cell size.
            </summary>
        </member>
        <member name="M:GodotEngine.TileMap.get_cell_size">
            <summary>
            Return the cell size.
            </summary>
        </member>
        <member name="M:GodotEngine.TileMap.set_quadrant_size(System.Int32)">
            <summary>
            Set the quadrant size, this optimizes drawing by batching chunks of map at draw/cull time.
            Allowed values are integers ranging from 1 to 128.
            </summary>
        </member>
        <member name="M:GodotEngine.TileMap.get_quadrant_size">
            <summary>
            Return the quadrant size.
            </summary>
        </member>
        <member name="M:GodotEngine.TileMap.set_tile_origin(System.Int32)">
            <summary>
            Set the tile origin to the tile center or its top-left corner (use TILE_ORIGIN_* constants as argument).
            </summary>
        </member>
        <member name="M:GodotEngine.TileMap.get_tile_origin">
            <summary>
            Return the tile origin configuration.
            </summary>
        </member>
        <member name="M:GodotEngine.TileMap.set_center_x(System.Boolean)">
            <summary>
            Set tiles to be centered in x coordinate. (by default this is false and they are drawn from upper left cell corner).
            </summary>
        </member>
        <member name="M:GodotEngine.TileMap.get_center_x">
            <summary>
            Return true if tiles are to be centered in x coordinate (by default this is false and they are drawn from upper left cell corner).
            </summary>
        </member>
        <member name="M:GodotEngine.TileMap.set_center_y(System.Boolean)">
            <summary>
            Set tiles to be centered in y coordinate. (by default this is false and they are drawn from upper left cell corner).
            </summary>
        </member>
        <member name="M:GodotEngine.TileMap.get_center_y">
            <summary>
            Return true if tiles are to be centered in y coordinate (by default this is false and they are drawn from upper left cell corner).
            </summary>
        </member>
        <member name="M:GodotEngine.TileMap.set_y_sort_mode(System.Boolean)">
            <summary>
            Set the Y sort mode. Enabled Y sort mode means that children of the tilemap will be drawn in the order defined by their Y coordinate.
            A tile with a higher Y coordinate will therefore be drawn later, potentially covering up the tile(s) above it if its sprite is higher than its cell size.
            </summary>
        </member>
        <member name="M:GodotEngine.TileMap.is_y_sort_mode_enabled">
            <summary>
            Return the Y sort mode.
            </summary>
        </member>
        <member name="M:GodotEngine.TileMap.set_collision_use_kinematic(System.Boolean)">
            <summary>
            Set the tilemap to handle collisions as a kinematic body (enabled) or a static body (disabled).
            </summary>
        </member>
        <member name="M:GodotEngine.TileMap.get_collision_use_kinematic">
            <summary>
            Return whether the tilemap handles collisions as a kinematic body.
            </summary>
        </member>
        <member name="M:GodotEngine.TileMap.set_collision_layer(System.Int32)">
            <summary>
            Set the collision layer.
            Layers are referenced by binary indexes, so allowable values to describe the 20 available layers range from 0 to 2^20-1.
            </summary>
        </member>
        <member name="M:GodotEngine.TileMap.get_collision_layer">
            <summary>
            Return the collision layer.
            </summary>
        </member>
        <member name="M:GodotEngine.TileMap.set_collision_mask(System.Int32)">
            <summary>
            Set the collision masks.
            Masks are referenced by binary indexes, so allowable values to describe the 20 available masks range from 0 to 2^20-1.
            </summary>
        </member>
        <member name="M:GodotEngine.TileMap.get_collision_mask">
            <summary>
            Return the collision mask.
            </summary>
        </member>
        <member name="M:GodotEngine.TileMap.set_collision_friction(System.Single)">
            <summary>
            Set the collision friction parameter. Allowable values range from 0 to 1.
            </summary>
        </member>
        <member name="M:GodotEngine.TileMap.get_collision_friction">
            <summary>
            Return the collision friction parameter.
            </summary>
        </member>
        <member name="M:GodotEngine.TileMap.set_collision_bounce(System.Single)">
            <summary>
            Set the collision bounce parameter. Allowable values range from 0 to 1.
            </summary>
        </member>
        <member name="M:GodotEngine.TileMap.get_collision_bounce">
            <summary>
            Return the collision bounce parameter.
            </summary>
        </member>
        <member name="M:GodotEngine.TileMap.set_cell(System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Set the tile index for the cell referenced by its grid-based X and Y coordinates.
            A tile index of -1 clears the cell.
            Optionally, the tile can also be flipped over the X and Y coordinates or transposed.
            </summary>
        </member>
        <member name="M:GodotEngine.TileMap.set_cellv(GodotEngine.Vector2,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Set the tile index for the cell referenced by a Vector2 of grid-based coordinates.
            A tile index of -1 clears the cell.
            Optionally, the tile can also be flipped over the X and Y axes or transposed.
            </summary>
        </member>
        <member name="M:GodotEngine.TileMap.get_cell(System.Int32,System.Int32)">
            <summary>
            Return the tile index of the referenced cell.
            </summary>
        </member>
        <member name="M:GodotEngine.TileMap.get_cellv(GodotEngine.Vector2)">
            <summary>
            Return the tile index of the cell referenced by a Vector2.
            </summary>
        </member>
        <member name="M:GodotEngine.TileMap.is_cell_x_flipped(System.Int32,System.Int32)">
            <summary>
            Return whether the referenced cell is flipped over the X axis.
            </summary>
        </member>
        <member name="M:GodotEngine.TileMap.is_cell_y_flipped(System.Int32,System.Int32)">
            <summary>
            Return whether the referenced cell is flipped over the Y axis.
            </summary>
        </member>
        <member name="M:GodotEngine.TileMap.is_cell_transposed(System.Int32,System.Int32)">
            <summary>
            Return whether the referenced cell is transposed, i.e. the X and Y axes are swapped (mirroring with regard to the (1,1) vector).
            </summary>
        </member>
        <member name="M:GodotEngine.TileMap.clear">
            <summary>
            Clear all cells.
            </summary>
        </member>
        <member name="M:GodotEngine.TileMap.get_used_cells">
            <summary>
            Return an array of all cells containing a tile from the tileset (i.e. a tile index different from -1).
            </summary>
        </member>
        <member name="M:GodotEngine.TileMap.map_to_world(GodotEngine.Vector2,System.Boolean)">
            <summary>
            Return the absolute world position corresponding to the tilemap (grid-based) coordinates given as an argument.
            Optionally, the tilemap's potential half offset can be ignored.
            </summary>
        </member>
        <member name="M:GodotEngine.TileMap.world_to_map(GodotEngine.Vector2)">
            <summary>
            Return the tilemap (grid-based) coordinates corresponding to the absolute world position given as an argument.
            </summary>
        </member>
        <member name="T:GodotEngine.TileSet">
            <summary>
            A TileSet is a library of tiles for a [TileMap]. It contains a list of tiles, each consisting of a sprite and optional collision shapes.
            Tiles are referenced by a unique integer ID.
            </summary>
        </member>
        <member name="M:GodotEngine.TileSet.create_tile(System.Int32)">
            <summary>
            Create a new tile which will be referenced by the given ID.
            </summary>
        </member>
        <member name="M:GodotEngine.TileSet.tile_set_name(System.Int32,System.String)">
            <summary>
            Set the name of the tile, for descriptive purposes.
            </summary>
        </member>
        <member name="M:GodotEngine.TileSet.tile_get_name(System.Int32)">
            <summary>
            Return the name of the tile.
            </summary>
        </member>
        <member name="M:GodotEngine.TileSet.tile_set_texture(System.Int32,GodotEngine.Texture)">
            <summary>
            Set the texture of the tile.
            </summary>
        </member>
        <member name="M:GodotEngine.TileSet.tile_get_texture(System.Int32)">
            <summary>
            Return the texture of the tile.
            </summary>
        </member>
        <member name="M:GodotEngine.TileSet.tile_set_material(System.Int32,GodotEngine.ShaderMaterial)">
            <summary>
            Set the material of the tile.
            </summary>
        </member>
        <member name="M:GodotEngine.TileSet.tile_get_material(System.Int32)">
            <summary>
            Return the material of the tile.
            </summary>
        </member>
        <member name="M:GodotEngine.TileSet.tile_set_texture_offset(System.Int32,GodotEngine.Vector2)">
            <summary>
            Set the texture offset of the tile.
            </summary>
        </member>
        <member name="M:GodotEngine.TileSet.tile_get_texture_offset(System.Int32)">
            <summary>
            Return the texture offset of the tile.
            </summary>
        </member>
        <member name="M:GodotEngine.TileSet.tile_set_region(System.Int32,GodotEngine.Rect2)">
            <summary>
            Set the tile sub-region in the texture. This is common in texture atlases.
            </summary>
        </member>
        <member name="M:GodotEngine.TileSet.tile_get_region(System.Int32)">
            <summary>
            Return the tile sub-region in the texture.
            </summary>
        </member>
        <member name="M:GodotEngine.TileSet.tile_set_shapes(System.Int32,System.Object[])">
            <summary>
            Set an array of shapes for the tile, enabling physics to collide with it.
            </summary>
        </member>
        <member name="M:GodotEngine.TileSet.tile_get_shapes(System.Int32)">
            <summary>
            Return the array of shapes of the tile.
            </summary>
        </member>
        <member name="M:GodotEngine.TileSet.tile_set_navigation_polygon(System.Int32,GodotEngine.NavigationPolygon)">
            <summary>
            Set a navigation polygon for the tile.
            </summary>
        </member>
        <member name="M:GodotEngine.TileSet.tile_get_navigation_polygon(System.Int32)">
            <summary>
            Return the navigation polygon of the tile.
            </summary>
        </member>
        <member name="M:GodotEngine.TileSet.tile_set_navigation_polygon_offset(System.Int32,GodotEngine.Vector2)">
            <summary>
            Set an offset for the tile's navigation polygon.
            </summary>
        </member>
        <member name="M:GodotEngine.TileSet.tile_get_navigation_polygon_offset(System.Int32)">
            <summary>
            Return the offset of the tile's navigation polygon.
            </summary>
        </member>
        <member name="M:GodotEngine.TileSet.tile_set_light_occluder(System.Int32,GodotEngine.OccluderPolygon2D)">
            <summary>
            Set a light occluder for the tile.
            </summary>
        </member>
        <member name="M:GodotEngine.TileSet.tile_get_light_occluder(System.Int32)">
            <summary>
            Return the light occluder of the tile.
            </summary>
        </member>
        <member name="M:GodotEngine.TileSet.tile_set_occluder_offset(System.Int32,GodotEngine.Vector2)">
            <summary>
            Set an offset for the tile's light occluder.
            </summary>
        </member>
        <member name="M:GodotEngine.TileSet.tile_get_occluder_offset(System.Int32)">
            <summary>
            Return the offset of the tile's light occluder.
            </summary>
        </member>
        <member name="M:GodotEngine.TileSet.remove_tile(System.Int32)">
            <summary>
            Remove the tile referenced by the given ID.
            </summary>
        </member>
        <member name="M:GodotEngine.TileSet.clear">
            <summary>
            Clear all tiles.
            </summary>
        </member>
        <member name="M:GodotEngine.TileSet.get_last_unused_tile_id">
            <summary>
            Return the ID following the last currently used ID, useful when creating a new tile.
            </summary>
        </member>
        <member name="M:GodotEngine.TileSet.find_tile_by_name(System.String)">
            <summary>
            Find the first tile matching the given name.
            </summary>
        </member>
        <member name="M:GodotEngine.TileSet.get_tiles_ids">
            <summary>
            Return an array of all currently used tile IDs.
            </summary>
        </member>
        <member name="T:GodotEngine.Timer">
            <summary>
            Timer node. This is a simple node that will emit a timeout callback when the timer runs out. It can optionally be set to loop.
            </summary>
        </member>
        <member name="F:GodotEngine.Timer.TIMER_PROCESS_FIXED">
            <summary>
            Update the timer at fixed intervals (framerate processing).
            </summary>
        </member>
        <member name="F:GodotEngine.Timer.TIMER_PROCESS_IDLE">
            <summary>
            Update the timer during the idle time at each frame.
            </summary>
        </member>
        <member name="M:GodotEngine.Timer.set_wait_time(System.Single)">
            <summary>
            Set wait time in seconds. When the time is over, it will emit the timeout signal.
            </summary>
        </member>
        <member name="M:GodotEngine.Timer.get_wait_time">
            <summary>
            Return the wait time in seconds.
            </summary>
        </member>
        <member name="M:GodotEngine.Timer.set_one_shot(System.Boolean)">
            <summary>
            Set as one-shot. If enabled, the timer will stop after timeout, otherwise it will automatically restart.
            </summary>
        </member>
        <member name="M:GodotEngine.Timer.is_one_shot">
            <summary>
            Return true if configured as one-shot.
            </summary>
        </member>
        <member name="M:GodotEngine.Timer.set_autostart(System.Boolean)">
            <summary>
            Set to automatically start when entering the scene.
            </summary>
        </member>
        <member name="M:GodotEngine.Timer.has_autostart">
            <summary>
            Return true if set to automatically start when entering the scene.
            </summary>
        </member>
        <member name="M:GodotEngine.Timer.start">
            <summary>
            Start the timer.
            </summary>
        </member>
        <member name="M:GodotEngine.Timer.stop">
            <summary>
            Stop (cancel) the timer.
            </summary>
        </member>
        <member name="M:GodotEngine.Timer.set_paused(System.Boolean)">
            <summary>
            Set whether the timer is paused or not. A paused timer will be inactive until it is unpaused again.
            </summary>
        </member>
        <member name="M:GodotEngine.Timer.is_paused">
            <summary>
            Return if the timer is paused or not.
            </summary>
        </member>
        <member name="M:GodotEngine.Timer.get_time_left">
            <summary>
            Return the time left for timeout in seconds if the timer is active, 0 otherwise.
            </summary>
        </member>
        <member name="M:GodotEngine.Timer.set_timer_process_mode(System.Int32)">
            <summary>
            Set the timer's processing mode (fixed or idle, use TIMER_PROCESS_* constants as argument).
            </summary>
        </member>
        <member name="M:GodotEngine.Timer.get_timer_process_mode">
            <summary>
            Return the timer's processing mode.
            </summary>
        </member>
        <member name="T:GodotEngine.Translation">
            <summary>
            Translations are resources that can be loaded/unloaded on demand. They map a string to another string.
            </summary>
        </member>
        <member name="M:GodotEngine.Translation.set_locale(System.String)">
            <summary>
            Set the locale of the translation.
            </summary>
        </member>
        <member name="M:GodotEngine.Translation.get_locale">
            <summary>
            Return the locale of the translation.
            </summary>
        </member>
        <member name="M:GodotEngine.Translation.add_message(System.String,System.String)">
            <summary>
            Add a message for translation.
            </summary>
        </member>
        <member name="M:GodotEngine.Translation.get_message(System.String)">
            <summary>
            Return a message for translation.
            </summary>
        </member>
        <member name="M:GodotEngine.Translation.erase_message(System.String)">
            <summary>
            Erase a message.
            </summary>
        </member>
        <member name="M:GodotEngine.Translation.get_message_list">
            <summary>
            Return all the messages (keys).
            </summary>
        </member>
        <member name="T:GodotEngine.Tree">
            <summary>
            This shows a tree of items that can be selected, expanded and collapsed. The tree can have multiple columns with custom controls like text editing, buttons and popups. It can be useful for structural displaying and interactions.
            Trees are built via code, using [TreeItem] objects to create the structure. They have a single root but multiple root can be simulated if a dummy hidden root is added.
            [codeblock]
            func _ready():
            var tree = Tree.new()
            var root = tree.create_item()
            tree.set_hide_root(true)
            var child1 = tree.create_item(root)
            var child2 = tree.create_item(root)
            var subchild1 = tree.create_item(child1)
            subchild1.set_text(0, "Subchild1")
            [/codeblock]
            </summary>
        </member>
        <member name="M:GodotEngine.Tree.clear">
            <summary>
            Clear the tree. This erases all of the items.
            </summary>
        </member>
        <member name="M:GodotEngine.Tree.get_root">
            <summary>
            Get the root item of the tree.
            </summary>
        </member>
        <member name="M:GodotEngine.Tree.set_column_min_width(System.Int32,System.Int32)">
            <summary>
            Set the minimum width of a column.
            </summary>
        </member>
        <member name="M:GodotEngine.Tree.set_column_expand(System.Int32,System.Boolean)">
            <summary>
            Set whether a column will have the "Expand" flag of [Control].
            </summary>
        </member>
        <member name="M:GodotEngine.Tree.get_column_width(System.Int32)">
            <summary>
            Get the width of the given column in pixels.
            </summary>
        </member>
        <member name="M:GodotEngine.Tree.set_hide_root(System.Boolean)">
            <summary>
            Set whether the root of the tree should be hidden.
            </summary>
        </member>
        <member name="M:GodotEngine.Tree.get_selected">
            <summary>
            Get the currently selected item.
            </summary>
        </member>
        <member name="M:GodotEngine.Tree.get_selected_column">
            <summary>
            Get the column number of the current selection.
            </summary>
        </member>
        <member name="M:GodotEngine.Tree.get_pressed_button">
            <summary>
            Get the index of the last pressed button.
            </summary>
        </member>
        <member name="M:GodotEngine.Tree.set_select_mode(System.Int32)">
            <summary>
            Set the selection mode. Use one of the [code]SELECT_*[/code] constants.
            </summary>
        </member>
        <member name="M:GodotEngine.Tree.set_columns(System.Int32)">
            <summary>
            Set the amount of columns.
            </summary>
        </member>
        <member name="M:GodotEngine.Tree.get_columns">
            <summary>
            Get the amount of columns.
            </summary>
        </member>
        <member name="M:GodotEngine.Tree.get_edited">
            <summary>
            Get the current edited item. This is only available for custom cell mode.
            </summary>
        </member>
        <member name="M:GodotEngine.Tree.get_edited_column">
            <summary>
            Get the column of the cell for the current edited icon. This is only available for custom cell mode.
            </summary>
        </member>
        <member name="M:GodotEngine.Tree.get_custom_popup_rect">
            <summary>
            Get the rectangle for custom popups. Helper to create custom cell controls that display a popup. See [method TreeItem.set_cell_mode].
            </summary>
        </member>
        <member name="M:GodotEngine.Tree.get_item_at_pos(GodotEngine.Vector2)">
            <summary>
            Get the tree item at the specified position (relative to the tree origin position).
            </summary>
        </member>
        <member name="M:GodotEngine.Tree.get_column_at_pos(GodotEngine.Vector2)">
            <summary>
            Get the column index under the given point.
            </summary>
        </member>
        <member name="M:GodotEngine.Tree.ensure_cursor_is_visible">
            <summary>
            Make the current selected item visible. This will scroll the tree to make sure the selected item is in sight.
            </summary>
        </member>
        <member name="M:GodotEngine.Tree.set_column_titles_visible(System.Boolean)">
            <summary>
            Set whether the column titles visibility.
            </summary>
        </member>
        <member name="M:GodotEngine.Tree.are_column_titles_visible">
            <summary>
            Get whether the column titles are being shown.
            </summary>
        </member>
        <member name="M:GodotEngine.Tree.set_column_title(System.Int32,System.String)">
            <summary>
            Set the title of a column.
            </summary>
        </member>
        <member name="M:GodotEngine.Tree.get_column_title(System.Int32)">
            <summary>
            Get the title of the given column.
            </summary>
        </member>
        <member name="M:GodotEngine.Tree.get_scroll">
            <summary>
            Get the current scrolling position.
            </summary>
        </member>
        <member name="M:GodotEngine.Tree.set_hide_folding(System.Boolean)">
            <summary>
            Set whether the folding arrow should be hidden.
            </summary>
        </member>
        <member name="M:GodotEngine.Tree.is_folding_hidden">
            <summary>
            Get whether the folding arrow is hidden.
            </summary>
        </member>
        <member name="M:GodotEngine.Tree.set_drop_mode_flags(System.Int32)">
            <summary>
            Set the drop mode as an OR combination of flags. See [code]DROP_MODE_*[/code] constants.
            </summary>
        </member>
        <member name="M:GodotEngine.Tree.get_drop_mode_flags">
            <summary>
            Get the flags of the current drop mode.
            </summary>
        </member>
        <member name="M:GodotEngine.Tree.set_allow_rmb_select(System.Boolean)">
            <summary>
            Set whether or not a right mouse button click can select items.
            </summary>
        </member>
        <member name="M:GodotEngine.Tree.get_allow_rmb_select">
            <summary>
            Get whether a right click can select items.
            </summary>
        </member>
        <member name="M:GodotEngine.Tree.set_single_select_cell_editing_only_when_already_selected(System.Boolean)">
            <summary>
            Set whether the editing of a cell should only happen when it is already selected.
            </summary>
        </member>
        <member name="M:GodotEngine.Tree.get_single_select_cell_editing_only_when_already_selected">
            <summary>
            Get whether the editing of a cell should only happen when it is already selected.
            </summary>
        </member>
        <member name="T:GodotEngine.Tween">
            <summary>
            Node useful for animations with unknown start and end points, procedural animations, making one node follow another, and other simple behavior.
            Because it is easy to get it wrong, here is a quick usage example:
            [codeblock]
            var tween = get_node("Tween")
            tween.interpolate_property(get_node("Node2D_to_move"), "transform/pos", Vector2(0,0), Vector2(100,100), 1, Tween.TRANS_LINEAR, Tween.EASE_IN_OUT)
            tween.start()
            [/codeblock]
            Some of the methods of this class require a property name. You can get the property name by hovering over the property in the inspector of the editor.
            Many of the methods accept [code]trans_type[/code] and [code]ease_type[/code]. The first accepts an TRANS_* constant, and refers to the way the timing of the animation is handled (you might want to see [code]http://easings.net/[/code] for some examples). The second accepts an EASE_* constant, and controls the where [code]trans_type[/code] is applied to the interpolation (in the beginning, the end, or both). If you don't know which transision and easing to pick, you can try different TRANS_* constants with EASE_IN_OUT, and use the one that looks best.
            </summary>
        </member>
        <member name="F:GodotEngine.Tween.TWEEN_PROCESS_FIXED">
            <summary>
            The [Tween] should use [code]_fixed_process[/code] for timekeeping when this is enabled.
            </summary>
        </member>
        <member name="F:GodotEngine.Tween.TWEEN_PROCESS_IDLE">
            <summary>
            The [Tween] should use [code]_process[/code] for timekeeping when this is enabled (default).
            </summary>
        </member>
        <member name="F:GodotEngine.Tween.TRANS_LINEAR">
            <summary>
            Means that the animation is interpolated linearly.
            </summary>
        </member>
        <member name="F:GodotEngine.Tween.TRANS_SINE">
            <summary>
            Means that the animation is interpolated using a sine wave.
            </summary>
        </member>
        <member name="F:GodotEngine.Tween.TRANS_QUINT">
            <summary>
            Means that the animation is interpolated with a quinary (to the power of 5) function.
            </summary>
        </member>
        <member name="F:GodotEngine.Tween.TRANS_QUART">
            <summary>
            Means that the animation is interpolated with a quartic (to the power of 4) function.
            </summary>
        </member>
        <member name="F:GodotEngine.Tween.TRANS_QUAD">
            <summary>
            Means that the animation is interpolated with a quadratic (to the power of 2) function.
            </summary>
        </member>
        <member name="F:GodotEngine.Tween.TRANS_EXPO">
            <summary>
            Means that the animation is interpolated with a exponential (some number to the power of x) function.
            </summary>
        </member>
        <member name="F:GodotEngine.Tween.TRANS_ELASTIC">
            <summary>
            Means that the animation is interpolated with elasticity, wiggling around the edges.
            </summary>
        </member>
        <member name="F:GodotEngine.Tween.TRANS_CUBIC">
            <summary>
            Means that the animation is interpolated with a cubic (to the power of 3) function.
            </summary>
        </member>
        <member name="F:GodotEngine.Tween.TRANS_CIRC">
            <summary>
            Means that the animation is interpolated with a function using square roots.
            </summary>
        </member>
        <member name="F:GodotEngine.Tween.TRANS_BOUNCE">
            <summary>
            Means that the animation is interpolated by bouncing at, but never surpassing, the end.
            </summary>
        </member>
        <member name="F:GodotEngine.Tween.TRANS_BACK">
            <summary>
            Means that the animation is interpolated backing out at edges.
            </summary>
        </member>
        <member name="F:GodotEngine.Tween.EASE_IN">
            <summary>
            Signifies that the interpolation should be focused in the beginning.
            </summary>
        </member>
        <member name="F:GodotEngine.Tween.EASE_OUT">
            <summary>
            Signifies that the interpolation should be focused in the end.
            </summary>
        </member>
        <member name="F:GodotEngine.Tween.EASE_IN_OUT">
            <summary>
            Signifies that the interpolation should be focused in both ends.
            </summary>
        </member>
        <member name="F:GodotEngine.Tween.EASE_OUT_IN">
            <summary>
            Signifies that the interpolation should be focused in both ends, but they should be switched (a bit hard to explain, try it for yourself to be sure).
            </summary>
        </member>
        <member name="M:GodotEngine.Tween.is_active">
            <summary>
            Returns true if any tweens are currently running, and false otherwise. Note that this method doesn't consider tweens that have ended.
            </summary>
        </member>
        <member name="M:GodotEngine.Tween.set_active(System.Boolean)">
            <summary>
            Activate/deactivate the tween. You can use this for pausing animations, though [method stop_all] and [method resume_all] might be more fit for this.
            </summary>
        </member>
        <member name="M:GodotEngine.Tween.is_repeat">
            <summary>
            Returns true if repeat has been set from editor GUI or [method set_repeat].
            </summary>
        </member>
        <member name="M:GodotEngine.Tween.set_repeat(System.Boolean)">
            <summary>
            Make the tween repeat after all tweens have finished.
            </summary>
        </member>
        <member name="M:GodotEngine.Tween.set_speed_scale(System.Single)">
            <summary>
            Set the speed multiplier of the tween. Set it to 1 for normal speed, 2 for two times nromal speed, and 0.5 for half of the normal speed. Setting it to 0 would pause the animation, but you might consider using [method set_active] or [method stop_all] and [method resume_all] for this.
            </summary>
        </member>
        <member name="M:GodotEngine.Tween.get_speed_scale">
            <summary>
            Returns the speed that has been set from editor GUI or [method set_repeat].
            </summary>
        </member>
        <member name="M:GodotEngine.Tween.set_tween_process_mode(System.Int32)">
            <summary>
            Set whether the Tween uses [code]_process[/code] or [code]_fixed_process[/code] (accepts TWEEN_PROCESS_IDLE and TWEEN_PROCESS_FIXED constants, respectively).
            </summary>
        </member>
        <member name="M:GodotEngine.Tween.get_tween_process_mode">
            <summary>
            Returns the process mode that has been set from editor GUI or [method set_tween_process_mode]
            </summary>
        </member>
        <member name="M:GodotEngine.Tween.start">
            <summary>
            Start the tween node. You can define tweens both before and after this.
            </summary>
        </member>
        <member name="M:GodotEngine.Tween.reset(GodotEngine.Object,System.String)">
            <summary>
            Resets a tween to the initial value (the one given, not the one before the tween), given its object and property/method pair. Passing empty String as key will reset all tweens for given object.
            </summary>
        </member>
        <member name="M:GodotEngine.Tween.reset_all">
            <summary>
            Resets all tweens to their initial values (the ones given, not those before the tween).
            </summary>
        </member>
        <member name="M:GodotEngine.Tween.stop(GodotEngine.Object,System.String)">
            <summary>
            Stop animating a tween, given its object and property/method pair. Passing empty String as key will stop all tweens for given object.
            </summary>
        </member>
        <member name="M:GodotEngine.Tween.stop_all">
            <summary>
            Stop animating all tweens.
            </summary>
        </member>
        <member name="M:GodotEngine.Tween.resume(GodotEngine.Object,System.String)">
            <summary>
            Continue animating a stopped tween, given its object and property/method pair. Passing empty String as key will resume all tweens for given object.
            </summary>
        </member>
        <member name="M:GodotEngine.Tween.resume_all">
            <summary>
            Continue animating all stopped tweens.
            </summary>
        </member>
        <member name="M:GodotEngine.Tween.remove(GodotEngine.Object,System.String)">
            <summary>
            Stop animating and completely remove a tween, given its object and property/method pair. Passing empty String as key will remove all tweens for given object.
            </summary>
        </member>
        <member name="M:GodotEngine.Tween.remove_all">
            <summary>
            Stop animating and completely remove all tweens.
            </summary>
        </member>
        <member name="M:GodotEngine.Tween.seek(System.Single)">
            <summary>
            Seek the animation to the given [code]time[/code] in seconds.
            </summary>
        </member>
        <member name="M:GodotEngine.Tween.tell">
            <summary>
            Returns the current time of the tween.
            </summary>
        </member>
        <member name="M:GodotEngine.Tween.get_runtime">
            <summary>
            Returns the time needed for all tweens to end in seconds, measured from the start. Thus, if you have two tweens, one ending 10 seconds after the start and the other - 20 seconds, it would return 20 seconds, as by that time all tweens would have finished.
            </summary>
        </member>
        <member name="M:GodotEngine.Tween.interpolate_property(GodotEngine.Object,System.String,System.Object,System.Object,System.Single,System.Int32,System.Int32,System.Single)">
            <summary>
            Animate [code]property[/code] of [code]object[/code] from [code]initial_val[/code] to [code]final_val[/code] for [code]duration[/code] seconds, [code]delay[/code] seconds later.
            [code]trans_type[/code] accepts TRANS_* constants, and is the way the animation is interpolated, while [code]ease_type[/code] accepts EASE_* constants, and controls the place of the interpolation (the beginning, the end, or both). You can read more about them in the class description.
            </summary>
        </member>
        <member name="M:GodotEngine.Tween.interpolate_method(GodotEngine.Object,System.String,System.Object,System.Object,System.Single,System.Int32,System.Int32,System.Single)">
            <summary>
            Animate [code]method[/code] of [code]object[/code] from [code]initial_val[/code] to [code]final_val[/code] for [code]duration[/code] seconds, [code]delay[/code] seconds later. Methods are animated by calling them with consecuitive values.
            [code]trans_type[/code] accepts TRANS_* constants, and is the way the animation is interpolated, while [code]ease_type[/code] accepts EASE_* constants, and controls the place of the interpolation (the beginning, the end, or both). You can read more about them in the class description.
            </summary>
        </member>
        <member name="M:GodotEngine.Tween.interpolate_callback(GodotEngine.Object,System.Single,System.String,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Call [code]callback[/code] of [code]object[/code] after [code]duration[/code]. [code]arg1[/code]-[code]arg5[/code] are arguments to be passed to the callback.
            </summary>
        </member>
        <member name="M:GodotEngine.Tween.interpolate_deferred_callback(GodotEngine.Object,System.Single,System.String,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Call [code]callback[/code] of [code]object[/code] after [code]duration[/code] on the main thread (similar to [methog Object.call_deferred). [code]arg1[/code]-[code]arg5[/code] are arguments to be passed to the callback.
            </summary>
        </member>
        <member name="M:GodotEngine.Tween.follow_property(GodotEngine.Object,System.String,System.Object,GodotEngine.Object,System.String,System.Single,System.Int32,System.Int32,System.Single)">
            <summary>
            Follow [code]property[/code] of [code]object[/code] and apply it on [code]target_property[/code] of [code]target[/code], beginning from [code]initial_val[/code] for [code]duration[/code] seconds, [code]delay[/code] seconds later. Note that [code]target:target_property[/code] would equal [code]object:property[/code] at the end of the tween.
            [code]trans_type[/code] accepts TRANS_* constants, and is the way the animation is interpolated, while [code]ease_type[/code] accepts EASE_* constants, and controls the place of the interpolation (the beginning, the end, or both). You can read more about them in the class description.
            </summary>
        </member>
        <member name="M:GodotEngine.Tween.follow_method(GodotEngine.Object,System.String,System.Object,GodotEngine.Object,System.String,System.Single,System.Int32,System.Int32,System.Single)">
            <summary>
            Follow [code]method[/code] of [code]object[/code] and apply the returned value on [code]target_method[/code] of [code]target[/code], beginning from [code]initial_val[/code] for [code]duration[/code] seconds, [code]delay[/code] later. Methods are animated by calling them with consequitive values.
            [code]trans_type[/code] accepts TRANS_* constants, and is the way the animation is interpolated, while [code]ease_type[/code] accepts EASE_* constants, and controls the place of the interpolation (the beginning, the end, or both). You can read more about them in the class description.
            </summary>
        </member>
        <member name="M:GodotEngine.Tween.targeting_property(GodotEngine.Object,System.String,GodotEngine.Object,System.String,System.Object,System.Single,System.Int32,System.Int32,System.Single)">
            <summary>
            Animate [code]property[/code] of [code]object[/code] from the current value of the [code]initial_val[/code] property of [code]initial[/code] to [code]final_val[/code] for [code]duration[/code] seconds, [code]delay[/code] seconds later.
            [code]trans_type[/code] accepts TRANS_* constants, and is the way the animation is interpolated, while [code]ease_type[/code] accepts EASE_* constants, and controls the place of the interpolation (the beginning, the end, or both). You can read more about them in the class description.
            </summary>
        </member>
        <member name="M:GodotEngine.Tween.targeting_method(GodotEngine.Object,System.String,GodotEngine.Object,System.String,System.Object,System.Single,System.Int32,System.Int32,System.Single)">
            <summary>
            Animate [code]method[/code] of [code]object[/code] from the value returned by [code]initial.initial_method[/code] to [code]final_val[/code] for [code]duration[/code] seconds, [code]delay[/code] seconds later. Methods are animated by calling them with consecuitive values.
            [code]trans_type[/code] accepts TRANS_* constants, and is the way the animation is interpolated, while [code]ease_type[/code] accepts EASE_* constants, and controls the place of the interpolation (the beginning, the end, or both). You can read more about them in the class description.
            </summary>
        </member>
        <member name="T:GodotEngine.UndoRedo">
            <summary>
            Helper to manage UndoRedo in the editor or custom tools. It works by storing calls to functions in both 'do' an 'undo' lists.
            Common behavior is to create an action, then add do/undo calls to functions or property changes, then committing the action.
            </summary>
        </member>
        <member name="M:GodotEngine.UndoRedo.create_action(System.String,System.Int32)">
            <summary>
            Create a new action. After this is called, do all your calls to [method add_do_method], [method add_undo_method], [method add_do_property] and [method add_undo_property].
            </summary>
        </member>
        <member name="M:GodotEngine.UndoRedo.commit_action">
            <summary>
            Commit the action. All 'do' methods/properties are called/set when this function is called.
            </summary>
        </member>
        <member name="M:GodotEngine.UndoRedo.add_do_property(GodotEngine.Object,System.String,System.Object)">
            <summary>
            Set a property with a custom value.
            </summary>
        </member>
        <member name="M:GodotEngine.UndoRedo.add_undo_property(GodotEngine.Object,System.String,System.Object)">
            <summary>
            Undo setting of a property with a custom value.
            </summary>
        </member>
        <member name="M:GodotEngine.UndoRedo.add_do_reference(GodotEngine.Object)">
            <summary>
            Add a 'do' reference that will be erased if the 'do' history is lost. This is useful mostly for new nodes created for the 'do' call. Do not use for resources.
            </summary>
        </member>
        <member name="M:GodotEngine.UndoRedo.add_undo_reference(GodotEngine.Object)">
            <summary>
            Add an 'undo' reference that will be erased if the 'undo' history is lost. This is useful mostly for nodes removed with the 'do' call (not the 'undo' call!).
            </summary>
        </member>
        <member name="M:GodotEngine.UndoRedo.clear_history">
            <summary>
            Clear the undo/redo history and associated references.
            </summary>
        </member>
        <member name="M:GodotEngine.UndoRedo.get_current_action_name">
            <summary>
            Get the name of the current action.
            </summary>
        </member>
        <member name="M:GodotEngine.UndoRedo.get_version">
            <summary>
            Get the version, each time a new action is committed, the version number of the UndoRedo is increased automatically.
            This is useful mostly to check if something changed from a saved version.
            </summary>
        </member>
        <member name="T:GodotEngine.VBoxContainer">
            <summary>
            Vertical box container. See [BoxContainer].
            </summary>
        </member>
        <member name="T:GodotEngine.VSeparator">
            <summary>
            Vertical version of [Separator]. It is used to separate objects horizontally, though (but it looks vertical!).
            </summary>
        </member>
        <member name="T:GodotEngine.VSlider">
            <summary>
            Vertical slider. See [Slider]. This one goes from left (min) to right (max).
            </summary>
        </member>
        <member name="T:GodotEngine.VSplitContainer">
            <summary>
            Vertical split container. See [SplitContainer]. This goes from left to right.
            </summary>
        </member>
        <member name="M:GodotEngine.VehicleBody.set_steering(System.Single)">
            <summary>
            Set the steering angle (in radians).
            </summary>
        </member>
        <member name="M:GodotEngine.VehicleBody.get_steering">
            <summary>
            Return the steering angle (in radians).
            </summary>
        </member>
        <member name="M:GodotEngine.VehicleBody.get_linear_velocity">
            <summary>
            Returns the VehicleBody's velocity vector. To get the absolute speed in scalar value, get the length of the return vector in pixels/second. Example:
            [codeblock]
            # vehicle is an instance of VehicleBody
            var speed = vehicle.get_linear_velocity().length()
            [/codeblock]
            </summary>
        </member>
        <member name="T:GodotEngine.VideoPlayer">
            <summary>
            This control has the ability to play video streams. The only format accepted is the OGV Theora, so any other format must be converted before using in a project.
            </summary>
        </member>
        <member name="M:GodotEngine.VideoPlayer.set_stream(GodotEngine.VideoStream)">
            <summary>
            Set the video stream for this player.
            </summary>
        </member>
        <member name="M:GodotEngine.VideoPlayer.get_stream">
            <summary>
            Get the video stream.
            </summary>
        </member>
        <member name="M:GodotEngine.VideoPlayer.play">
            <summary>
            Start the video playback.
            </summary>
        </member>
        <member name="M:GodotEngine.VideoPlayer.stop">
            <summary>
            Stop the video playback.
            </summary>
        </member>
        <member name="M:GodotEngine.VideoPlayer.is_playing">
            <summary>
            Get whether or not the video is playing.
            </summary>
        </member>
        <member name="M:GodotEngine.VideoPlayer.set_paused(System.Boolean)">
            <summary>
            Set whether the video should pause the playback.
            </summary>
        </member>
        <member name="M:GodotEngine.VideoPlayer.is_paused">
            <summary>
            Get whether or not the video is paused.
            </summary>
        </member>
        <member name="M:GodotEngine.VideoPlayer.set_volume(System.Single)">
            <summary>
            Set the audio volume as a linear value.
            </summary>
        </member>
        <member name="M:GodotEngine.VideoPlayer.get_volume">
            <summary>
            Get the volume of the audio track as a linear value.
            </summary>
        </member>
        <member name="M:GodotEngine.VideoPlayer.set_volume_db(System.Single)">
            <summary>
            Set the audio volume in decibels.
            </summary>
        </member>
        <member name="M:GodotEngine.VideoPlayer.get_volume_db">
            <summary>
            Get the volume of the audio track in decibels.
            </summary>
        </member>
        <member name="M:GodotEngine.VideoPlayer.set_audio_track(System.Int32)">
            <summary>
            Set the audio track (for multitrack videos).
            </summary>
        </member>
        <member name="M:GodotEngine.VideoPlayer.get_audio_track">
            <summary>
            Get the selected audio track (for multitrack videos).
            </summary>
        </member>
        <member name="M:GodotEngine.VideoPlayer.get_stream_name">
            <summary>
            Get the name of the video stream.
            </summary>
        </member>
        <member name="M:GodotEngine.VideoPlayer.get_stream_pos">
            <summary>
            Get the current position of the stream, in seconds.
            </summary>
        </member>
        <member name="M:GodotEngine.VideoPlayer.set_autoplay(System.Boolean)">
            <summary>
            Set whether this node should start playing automatically.
            </summary>
        </member>
        <member name="M:GodotEngine.VideoPlayer.has_autoplay">
            <summary>
            Get whether or not the video is set as autoplay.
            </summary>
        </member>
        <member name="M:GodotEngine.VideoPlayer.set_expand(System.Boolean)">
            <summary>
            Set the expand property. If enabled, the video will grow or shrink to fit the player size, otherwise it will play at the stream resolution.
            </summary>
        </member>
        <member name="M:GodotEngine.VideoPlayer.has_expand">
            <summary>
            Get whether or not the expand property is set.
            </summary>
        </member>
        <member name="M:GodotEngine.VideoPlayer.set_buffering_msec(System.Int32)">
            <summary>
            Set the amount of miliseconds to buffer during playback.
            </summary>
        </member>
        <member name="M:GodotEngine.VideoPlayer.get_buffering_msec">
            <summary>
            Get the amount of miliseconds to store in buffer while playing.
            </summary>
        </member>
        <member name="M:GodotEngine.VideoPlayer.get_video_texture">
            <summary>
            Get the current frame of the video as a [Texture].
            </summary>
        </member>
        <member name="T:GodotEngine.Viewport">
            <summary>
            A Viewport creates a different view into the screen, or a sub-view inside another viewport. Children 2D Nodes will display on it, and children Camera 3D nodes will render on it too.
            Optionally, a viewport can have its own 2D or 3D world, so they don't share what they draw with other viewports.
            If a viewport is a child of a [Control], it will automatically take up its same rect and position, otherwise they must be set manually.
            Viewports can also choose to be audio listeners, so they generate positional audio depending on a 2D or 3D camera child of it.
            Also, viewports can be assigned to different screens in case the devices have multiple screens.
            Finally, viewports can also behave as render targets, in which case they will not be visible unless the associated texture is used to draw.
            </summary>
        </member>
        <member name="F:GodotEngine.Viewport.UPDATE_DISABLED">
            <summary>
            Do not update the render target.
            </summary>
        </member>
        <member name="F:GodotEngine.Viewport.UPDATE_ONCE">
            <summary>
            Update the render target once, then switch to [code]UPDATE_DISABLED[/code]
            </summary>
        </member>
        <member name="F:GodotEngine.Viewport.UPDATE_WHEN_VISIBLE">
            <summary>
            Update the render target only when it is visible. This is the default value.
            </summary>
        </member>
        <member name="M:GodotEngine.Viewport.set_size(GodotEngine.Vector2)">
            <summary>
            Set the size of the viewport.
            </summary>
        </member>
        <member name="M:GodotEngine.Viewport.get_size">
            <summary>
            Return the viewport rect. If the viewport is child of a control, it will use the same rect as the parent. Otherwise, if the rect is empty, the viewport will use all the allowed space.
            </summary>
        </member>
        <member name="M:GodotEngine.Viewport.get_world_2d">
            <summary>
            Return the 2D world of the viewport.
            </summary>
        </member>
        <member name="M:GodotEngine.Viewport.find_world_2d">
            <summary>
            Return the 2D world of the viewport.
            </summary>
        </member>
        <member name="M:GodotEngine.Viewport.set_world(GodotEngine.World)">
            <summary>
            Change the 3D world of the viewport.
            </summary>
        </member>
        <member name="M:GodotEngine.Viewport.get_world">
            <summary>
            Return the 3D world of the viewport.
            </summary>
        </member>
        <member name="M:GodotEngine.Viewport.find_world">
            <summary>
            Return the 3D world of the viewport, or if no such present, the one of the parent viewport.
            </summary>
        </member>
        <member name="M:GodotEngine.Viewport.set_canvas_transform(GodotEngine.Transform2D)">
            <summary>
            Set the canvas transform of the viewport, useful for changing the on-screen positions of all child [CanvasItem]\ s. This is relative to the global canvas transform of the viewport.
            </summary>
        </member>
        <member name="M:GodotEngine.Viewport.get_canvas_transform">
            <summary>
            Get the canvas transform of the viewport.
            </summary>
        </member>
        <member name="M:GodotEngine.Viewport.set_global_canvas_transform(GodotEngine.Transform2D)">
            <summary>
            Set the global canvas transform of the viewport. The canvas transform is relative to this.
            </summary>
        </member>
        <member name="M:GodotEngine.Viewport.get_global_canvas_transform">
            <summary>
            Get the global canvas transform of the viewport.
            </summary>
        </member>
        <member name="M:GodotEngine.Viewport.get_final_transform">
            <summary>
            Get the total transform of the viewport.
            </summary>
        </member>
        <member name="M:GodotEngine.Viewport.get_visible_rect">
            <summary>
            Return the final, visible rect in global screen coordinates.
            </summary>
        </member>
        <member name="M:GodotEngine.Viewport.set_transparent_background(System.Boolean)">
            <summary>
            If this viewport is a child of another viewport, keep the previously drawn background visible.
            </summary>
        </member>
        <member name="M:GodotEngine.Viewport.has_transparent_background">
            <summary>
            Return whether the viewport lets whatever is behind it to show.
            </summary>
        </member>
        <member name="M:GodotEngine.Viewport.set_size_override(System.Boolean,System.Nullable{GodotEngine.Vector2},System.Nullable{GodotEngine.Vector2})">
            <summary>
            Set the size override of the viewport. If the enable parameter is true, it would use the override, otherwise it would use the default size. If the size parameter is equal to [code](-1, -1)[/code], it won't update the size.
            <param name="size">If the param is null, then the default value is new Vector2(-1, -1)</param>
            <param name="margin">If the param is null, then the default value is new Vector2(0, 0)</param>
            </summary>
        </member>
        <member name="M:GodotEngine.Viewport.get_size_override">
            <summary>
            Get the size override set with [method set_size_override].
            </summary>
        </member>
        <member name="M:GodotEngine.Viewport.is_size_override_enabled">
            <summary>
            Get the enabled status of the size override set with [method set_size_override].
            </summary>
        </member>
        <member name="M:GodotEngine.Viewport.set_size_override_stretch(System.Boolean)">
            <summary>
            Set whether the size override affects stretch as well.
            </summary>
        </member>
        <member name="M:GodotEngine.Viewport.is_size_override_stretch_enabled">
            <summary>
            Get the enabled status of the size strech override set with [method set_size_override_stretch].
            </summary>
        </member>
        <member name="M:GodotEngine.Viewport.set_vflip(System.Boolean)">
            <summary>
            Set whether the viewport is flipped on the Y axis.
            </summary>
        </member>
        <member name="M:GodotEngine.Viewport.get_vflip">
            <summary>
            Set whether the render target is flipped on the Y axis.
            </summary>
        </member>
        <member name="M:GodotEngine.Viewport.get_clear_on_new_frame">
            <summary>
            Return whether automatic clearing of the render target on each frame is enabled.
            </summary>
        </member>
        <member name="M:GodotEngine.Viewport.clear">
            <summary>
            Clear the viewport manually.
            </summary>
        </member>
        <member name="M:GodotEngine.Viewport.set_update_mode(System.Int32)">
            <summary>
            Set when the render target would be updated, using the [code]UPDATE_*[/code] constants
            </summary>
        </member>
        <member name="M:GodotEngine.Viewport.get_update_mode">
            <summary>
            Get when the viewport would be updated, will be one of the [code]UPDATE_*[/code] constants.
            </summary>
        </member>
        <member name="M:GodotEngine.Viewport.get_hdr">
            <summary>
            Get whether the rendered texture has filters enabled.
            </summary>
        </member>
        <member name="M:GodotEngine.Viewport.get_texture">
            <summary>
            Get the viewport's texture, for use with various objects that you want to texture with the viewport.
            </summary>
        </member>
        <member name="M:GodotEngine.Viewport.set_physics_object_picking(System.Boolean)">
            <summary>
            Enable/disable picking for all physics objects inside the viewport.
            </summary>
        </member>
        <member name="M:GodotEngine.Viewport.get_physics_object_picking">
            <summary>
            Get whether picking for all physics objects inside the viewport is enabled.
            </summary>
        </member>
        <member name="M:GodotEngine.Viewport.get_viewport_rid">
            <summary>
            Get the viewport RID from the [VisualServer].
            </summary>
        </member>
        <member name="M:GodotEngine.Viewport.update_worlds">
            <summary>
            Force update of the 2D and 3D worlds.
            </summary>
        </member>
        <member name="M:GodotEngine.Viewport.set_use_own_world(System.Boolean)">
            <summary>
            Make the viewport use a world separate from the parent viewport's world.
            </summary>
        </member>
        <member name="M:GodotEngine.Viewport.is_using_own_world">
            <summary>
            Return whether the viewport is using a world separate from the parent viewport's world.
            </summary>
        </member>
        <member name="M:GodotEngine.Viewport.get_camera">
            <summary>
            Return the active 3D camera.
            </summary>
        </member>
        <member name="M:GodotEngine.Viewport.set_as_audio_listener(System.Boolean)">
            <summary>
            Makes the viewport send sounds to the speakers.
            </summary>
        </member>
        <member name="M:GodotEngine.Viewport.is_audio_listener">
            <summary>
            Returns whether the viewport sends sounds to the speakers.
            </summary>
        </member>
        <member name="M:GodotEngine.Viewport.set_as_audio_listener_2d(System.Boolean)">
            <summary>
            Makes the viewport send sounds from 2D emitters to the speakers.
            </summary>
        </member>
        <member name="M:GodotEngine.Viewport.is_audio_listener_2d">
            <summary>
            Returns whether the viewport sends soundsfrom 2D emitters to the speakers.
            </summary>
        </member>
        <member name="M:GodotEngine.Viewport.get_mouse_position">
            <summary>
            Get the mouse position, relative to the viewport.
            </summary>
        </member>
        <member name="M:GodotEngine.Viewport.warp_mouse(GodotEngine.Vector2)">
            <summary>
            Warp the mouse to a position, relative to the viewport.
            </summary>
        </member>
        <member name="M:GodotEngine.Viewport.gui_has_modal_stack">
            <summary>
            Returs whether there are shown modals on-screen.
            </summary>
        </member>
        <member name="M:GodotEngine.Viewport.gui_get_drag_data">
            <summary>
            Returs the drag data from the GUI, that was previously returned by [method Control.get_drag_data].
            </summary>
        </member>
        <member name="M:GodotEngine.Viewport.set_disable_input(System.Boolean)">
            <summary>
            Set whether input to the viewport is disabled.
            </summary>
        </member>
        <member name="M:GodotEngine.Viewport.is_input_disabled">
            <summary>
            Return whether input to the viewport is disabled.
            </summary>
        </member>
        <member name="T:GodotEngine.VisibilityEnabler">
            <summary>
            The VisibilityEnabler will disable [RigidBody] and [AnimationPlayer] nodes when they are not visible. It will only affect other nodes within the same scene as the VisibilityEnabler itself.
            </summary>
        </member>
        <member name="F:GodotEngine.VisibilityEnabler.ENABLER_FREEZE_BODIES">
            <summary>
            This enabler will freeze [RigidBody] nodes.
            </summary>
        </member>
        <member name="F:GodotEngine.VisibilityEnabler.ENABLER_PAUSE_ANIMATIONS">
            <summary>
            This enabler will pause [AnimationPlayer] nodes.
            </summary>
        </member>
        <member name="M:GodotEngine.VisibilityEnabler.set_enabler(System.Int32,System.Boolean)">
            <summary>
            Set an enabler to true for all nodes of its type to be disabled when the VisibilityEnabler is not in view. See the constants for enablers and what they affect.
            </summary>
        </member>
        <member name="M:GodotEngine.VisibilityEnabler.is_enabler_enabled(System.Int32)">
            <summary>
            Returns whether the specified enabler was set to true or not.
            </summary>
        </member>
        <member name="T:GodotEngine.VisibilityEnabler2D">
            <summary>
            The VisibilityEnabler2D will disable [RigidBody2D], [AnimationPlayer], and other nodes when they are not visible. It will only affect other nodes within the same scene as the VisibilityEnabler2D itself.
            </summary>
        </member>
        <member name="F:GodotEngine.VisibilityEnabler2D.ENABLER_FREEZE_BODIES">
            <summary>
            This enabler will freeze [RigidBody2D] nodes.
            </summary>
        </member>
        <member name="F:GodotEngine.VisibilityEnabler2D.ENABLER_PAUSE_ANIMATIONS">
            <summary>
            This enabler will pause [AnimationPlayer] nodes.
            </summary>
        </member>
        <member name="F:GodotEngine.VisibilityEnabler2D.ENABLER_PAUSE_PARTICLES">
            <summary>
            This enabler will stop [Particles2D] nodes.
            </summary>
        </member>
        <member name="F:GodotEngine.VisibilityEnabler2D.ENABLER_PARENT_PROCESS">
            <summary>
            This enabler will stop the parent's _process function.
            </summary>
        </member>
        <member name="F:GodotEngine.VisibilityEnabler2D.ENABLER_PARENT_FIXED_PROCESS">
            <summary>
            This enabler will stop the parent's _fixed_process function.
            </summary>
        </member>
        <member name="M:GodotEngine.VisibilityEnabler2D.set_enabler(System.Int32,System.Boolean)">
            <summary>
            Set an enabler to true for all nodes of its type to be disabled when the VisibilityEnabler2D is not in view. See the constants for enablers and what they affect.
            </summary>
        </member>
        <member name="M:GodotEngine.VisibilityEnabler2D.is_enabler_enabled(System.Int32)">
            <summary>
            Returns whether the specified enabler was set to true or not.
            </summary>
        </member>
        <member name="T:GodotEngine.VisibilityNotifier">
            <summary>
            The VisibilityNotifier is used to notify when its bounding box enters the screen, is visible on the screen, or when it exits the screen.
            </summary>
        </member>
        <member name="M:GodotEngine.VisibilityNotifier.set_aabb(GodotEngine.Rect3)">
            <summary>
            Set the visibility bounding box of the VisibilityNotifier.
            </summary>
        </member>
        <member name="M:GodotEngine.VisibilityNotifier.get_aabb">
            <summary>
            Return the visibility bounding box of the VisibilityNotifier.
            </summary>
        </member>
        <member name="M:GodotEngine.VisibilityNotifier.is_on_screen">
            <summary>
            Return true if any part of the bounding box is on the screen.
            </summary>
        </member>
        <member name="T:GodotEngine.VisibilityNotifier2D">
            <summary>
            The VisibilityNotifier2D is used to notify when its bounding rectangle enters the screen, is visible on the screen, or when it exits the screen.
            </summary>
        </member>
        <member name="M:GodotEngine.VisibilityNotifier2D.set_rect(GodotEngine.Rect2)">
            <summary>
            Set the visibility bounding rectangle of the VisibilityNotifier2D.
            </summary>
        </member>
        <member name="M:GodotEngine.VisibilityNotifier2D.get_rect">
            <summary>
            Return the visibility bounding rectangle of the VisibilityNotifier2D.
            </summary>
        </member>
        <member name="M:GodotEngine.VisibilityNotifier2D.is_on_screen">
            <summary>
            Return true if any part of the bounding rectangle is on the screen.
            </summary>
        </member>
        <member name="T:GodotEngine.VisualServer">
            <summary>
            Server for anything visible. The visual server is the API backend for everything visible. The whole scene system mounts on it to display.
            The visual server is completely opaque, the internals are entirely implementation specific and cannot be accessed.
            </summary>
        </member>
        <member name="T:GodotEngine.WeakRef">
            <summary>
            A weakref can hold a [Reference], without contributing to the reference counter. A weakref can be created from an [Object] using [method @GDScript.weakref]. If this object is not a reference, weakref still works, however, it does not have any effect on the object. Weakrefs are useful in cases where multiple classes have variables that refer to eachother. Without weakrefs, using these classes could lead to memory leaks, since both references keep eachother from being released. Making part of the variables a weakref can prevent this cyclic dependency, and allows the references to be released.
            </summary>
        </member>
        <member name="M:GodotEngine.WeakRef.get_ref">
            <summary>
            Returns the [Object] this weakref is referring to.
            </summary>
        </member>
        <member name="T:GodotEngine.WindowDialog">
            <summary>
            Windowdialog is the base class for all window-based dialogs. It's a by-default toplevel [Control] that draws a window decoration and allows motion and resizing.
            </summary>
        </member>
        <member name="M:GodotEngine.WindowDialog.set_title(System.String)">
            <summary>
            Set the title of the window.
            </summary>
        </member>
        <member name="M:GodotEngine.WindowDialog.get_title">
            <summary>
            Return the title of the window.
            </summary>
        </member>
        <member name="M:GodotEngine.WindowDialog.get_close_button">
            <summary>
            Return the close [TextureButton].
            </summary>
        </member>
        <member name="T:GodotEngine.World">
            <summary>
            Class that has everything pertaining to a world. A physics space, a visual scenario and a sound space. Spatial nodes register their resources into the current world.
            </summary>
        </member>
        <member name="T:GodotEngine.World2D">
            <summary>
            Class that has everything pertaining to a 2D world. A physics space, a visual scenario and a sound space. 2D nodes register their resources into the current 2D world.
            </summary>
        </member>
        <member name="M:GodotEngine.World2D.get_canvas">
            <summary>
            Retrieve the [RID] of this world's canvas resource. Used by the [VisualServer] for 2D drawing.
            </summary>
        </member>
        <member name="M:GodotEngine.World2D.get_space">
            <summary>
            Retrieve the [RID] of this world's physics space resource. Used by the [Physics2DServer] for 2D physics, treating it as both a space and an area.
            </summary>
        </member>
        <member name="M:GodotEngine.World2D.get_direct_space_state">
            <summary>
            Retrieve the state of this world's physics space. This allows arbitrary querying for collision.
            </summary>
        </member>
        <member name="T:GodotEngine.WorldEnvironment">
            <summary>
            The [WorldEnvironment] node can be added to a scene in order to set default [Environment] variables for the scene. The [WorldEnvironment] can be overridden by an [Environment] node set on the current [Camera]. Additionally, only one [WorldEnvironment] may be instanced in a given scene at a time. The [WorldEnvironment] allows the user to specify default lighting parameters (e.g. ambient lighting), various post-processing effects (e.g. SSAO, DOF, Tonemapping), and how to draw the background (e.g. solid color, skybox).
            </summary>
        </member>
        <member name="M:GodotEngine.WorldEnvironment.set_environment(GodotEngine.Environment)">
            <summary>
            Set the currently bound [Environment] to the one specified.
            </summary>
        </member>
        <member name="M:GodotEngine.WorldEnvironment.get_environment">
            <summary>
            Return the [Environment] currently bound.
            </summary>
        </member>
        <member name="T:GodotEngine.XMLParser">
            <summary>
            This class can serve as base to make custom XML parsers. Since XML is a very flexible standard, this interface is low level so it can be applied to any possible schema.
            </summary>
        </member>
        <member name="F:GodotEngine.XMLParser.NODE_NONE">
            <summary>
            There's no node (no file or buffer opened)
            </summary>
        </member>
        <member name="F:GodotEngine.XMLParser.NODE_ELEMENT">
            <summary>
            Element (tag)
            </summary>
        </member>
        <member name="F:GodotEngine.XMLParser.NODE_ELEMENT_END">
            <summary>
            End of element
            </summary>
        </member>
        <member name="F:GodotEngine.XMLParser.NODE_TEXT">
            <summary>
            Text node
            </summary>
        </member>
        <member name="F:GodotEngine.XMLParser.NODE_COMMENT">
            <summary>
            Comment node
            </summary>
        </member>
        <member name="F:GodotEngine.XMLParser.NODE_CDATA">
            <summary>
            CDATA content
            </summary>
        </member>
        <member name="F:GodotEngine.XMLParser.NODE_UNKNOWN">
            <summary>
            Unknown node
            </summary>
        </member>
        <member name="M:GodotEngine.XMLParser.read">
            <summary>
            Read the next node of the file. This returns an error code.
            </summary>
        </member>
        <member name="M:GodotEngine.XMLParser.get_node_type">
            <summary>
            Get the type of the current node. Compare with [code]NODE_*[/code] constants.
            </summary>
        </member>
        <member name="M:GodotEngine.XMLParser.get_node_name">
            <summary>
            Get the name of the current element node. This will raise an error if the current node type is not [code]NODE_ELEMENT[/code] nor [code]NODE_ELEMENT_END[/code]
            </summary>
        </member>
        <member name="M:GodotEngine.XMLParser.get_node_data">
            <summary>
            Get the contents of a text node. This will raise an error in any other type of node.
            </summary>
        </member>
        <member name="M:GodotEngine.XMLParser.get_node_offset">
            <summary>
            Get the byte offset of the current node since the beginning of the file or buffer.
            </summary>
        </member>
        <member name="M:GodotEngine.XMLParser.get_attribute_count">
            <summary>
            Get the amount of attributes in the current element.
            </summary>
        </member>
        <member name="M:GodotEngine.XMLParser.get_attribute_name(System.Int32)">
            <summary>
            Get the name of the attribute specified by the index in [code]idx[/code] argument.
            </summary>
        </member>
        <member name="M:GodotEngine.XMLParser.get_attribute_value(System.Int32)">
            <summary>
            Get the value of the attribute specified by the index in [code]idx[/code] argument.
            </summary>
        </member>
        <member name="M:GodotEngine.XMLParser.has_attribute(System.String)">
            <summary>
            Check whether or not the current element has a certain attribute.
            </summary>
        </member>
        <member name="M:GodotEngine.XMLParser.get_named_attribute_value(System.String)">
            <summary>
            Get the value of a certain attribute of the current element by name. This will raise an error if the element has no such attribute.
            </summary>
        </member>
        <member name="M:GodotEngine.XMLParser.get_named_attribute_value_safe(System.String)">
            <summary>
            Get the value of a certain attribute of the current element by name. This will return an empty [String] if the attribute is not found.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:GodotEngine.XMLParser.is_empty" -->
        <member name="M:GodotEngine.XMLParser.get_current_line">
            <summary>
            Get the current line in the parsed file (currently not implemented).
            </summary>
        </member>
        <member name="M:GodotEngine.XMLParser.skip_section">
            <summary>
            Skips the current section. If the node contains other elements, they will be ignored and the cursor will go to the closing of the current element.
            </summary>
        </member>
        <member name="M:GodotEngine.XMLParser.seek(System.Int32)">
            <summary>
            Move the buffer cursor to a certain offset (since the beginning) and read the next node there. This returns an error code.
            </summary>
        </member>
        <member name="M:GodotEngine.XMLParser.open(System.String)">
            <summary>
            Open a XML file for parsing. This returns an error code.
            </summary>
        </member>
        <member name="M:GodotEngine.XMLParser.open_buffer(System.Byte[])">
            <summary>
            Open a XML raw buffer for parsing. This returns an error code.
            </summary>
        </member>
        <member name="T:GodotEngine.YSort">
            <summary>
            Sort all child nodes based on their Y positions. The child node must inherit from [CanvasItem] for it to be sorted. Nodes that have a higher Y position will be drawn later, so they will appear on top of nodes that have a lower Y position.
            </summary>
        </member>
        <member name="M:GodotEngine.YSort.set_sort_enabled(System.Boolean)">
            <summary>
            Set whether the children nodes are sorted or not. (default true)
            </summary>
        </member>
        <member name="M:GodotEngine.YSort.is_sort_enabled">
            <summary>
            Returns true if the children nodes are being sorted.
            </summary>
        </member>
        <member name="T:GodotEngine.Directory">
            <summary>
            Directory type. It is used to manage directories and their content (not restricted to the project folder).
            Here is an example on how to iterate through the files of a directory:
            [codeblock]
            func dir_contents(path):
            var dir = Directory.new()
            if dir.open(path) == OK:
            dir.list_dir_begin()
            var file_name = dir.get_next()
            while (file_name != ""):
            if dir.current_is_dir():
            print("Found directory: " + file_name)
            else:
            print("Found file: " + file_name)
            file_name = dir.get_next()
            else:
            print("An error occurred when trying to access the path.")
            [/codeblock]
            </summary>
        </member>
        <member name="M:GodotEngine.Directory.open(System.String)">
            <summary>
            Open an existing directory of the filesystem. The [i]path[/i] argument can be within the project tree ([code]res://folder[/code]), the user directory ([code]user://folder[/code]) or an absolute path of the user filesystem (e.g. [code]/tmp/folder[/code] or [code]C:\tmp\folder[/code]).
            The method returns one of the error code constants defined in [@Global Scope] (OK or ERR_*).
            </summary>
        </member>
        <member name="M:GodotEngine.Directory.list_dir_begin(System.Boolean,System.Boolean)">
            <summary>
            Initialise the stream used to list all files and directories using the [method get_next] function, closing the current opened stream if needed. Once the stream has been processed, it should typically be closed with [method list_dir_end].
            If you pass [code]skip_navigational[/code], then [code].[/code] and [code]..[/code] would be filtered out.
            If you pass [code]skip_hidden[/code], then hidden files would be filtered out.
            </summary>
        </member>
        <member name="M:GodotEngine.Directory.get_next">
            <summary>
            Return the next element (file or directory) in the current directory (including [code].[/code] and [code]..[/code], unless [code]skip_navigational[/code] was given to [method list_dir_begin]).
            The name of the file or directory is returned (and not its full path). Once the stream has been fully processed, the method returns an empty String and closes the stream automatically (i.e. [method list_dir_end] would not be mandatory in such a case).
            </summary>
        </member>
        <member name="M:GodotEngine.Directory.current_is_dir">
            <summary>
            Return whether the current item processed with the last [method get_next] call is a directory ([code].[/code] and [code]..[/code] are considered directories).
            </summary>
        </member>
        <member name="M:GodotEngine.Directory.list_dir_end">
            <summary>
            Close the current stream opened with [method list_dir_begin] (whether it has been fully processed with [method get_next] or not does not matter).
            </summary>
        </member>
        <member name="M:GodotEngine.Directory.get_drive_count">
            <summary>
            On Windows, return the number of drives (partitions) mounted on the current filesystem. On other platforms, the method returns 0.
            </summary>
        </member>
        <member name="M:GodotEngine.Directory.get_drive(System.Int32)">
            <summary>
            On Windows, return the name of the drive (partition) passed as an argument (e.g. [code]C:[/code]). On other platforms, or if the requested drive does not existed, the method returns an empty String.
            </summary>
        </member>
        <member name="M:GodotEngine.Directory.change_dir(System.String)">
            <summary>
            Change the currently opened directory to the one passed as an argument. The argument can be relative to the current directory (e.g. [code]newdir[/code] or [code]../newdir[/code]), or an absolute path (e.g. [code]/tmp/newdir[/code] or [code]res://somedir/newdir[/code]).
            The method returns one of the error code constants defined in [@Global Scope] (OK or ERR_*).
            </summary>
        </member>
        <member name="M:GodotEngine.Directory.get_current_dir">
            <summary>
            Return the absolute path to the currently opened directory (e.g. [code]res://folder[/code] or [code]C:\tmp\folder[/code]).
            </summary>
        </member>
        <member name="M:GodotEngine.Directory.make_dir(System.String)">
            <summary>
            Create a directory. The argument can be relative to the current directory, or an absolute path. The target directory should be placed in an already existing directory (to create the full path recursively, see [method make_dir_recursive]).
            The method returns one of the error code constants defined in [@Global Scope] (OK, FAILED or ERR_*).
            </summary>
        </member>
        <member name="M:GodotEngine.Directory.make_dir_recursive(System.String)">
            <summary>
            Create a target directory and all necessary intermediate directories in its path, by calling [method make_dir] recursively. The argument can be relative to the current directory, or an absolute path.
            Return one of the error code constants defined in [@Global Scope] (OK, FAILED or ERR_*).
            </summary>
        </member>
        <member name="M:GodotEngine.Directory.file_exists(System.String)">
            <summary>
            Return whether the target file exists. The argument can be relative to the current directory, or an absolute path.
            </summary>
        </member>
        <member name="M:GodotEngine.Directory.dir_exists(System.String)">
            <summary>
            Return whether the target directory exists. The argument can be relative to the current directory, or an absolute path.
            </summary>
        </member>
        <member name="M:GodotEngine.Directory.get_space_left">
            <summary>
            On Unix desktop systems, return the available space on the current directory's disk. On other platforms, this information is not available and the method returns 0 or -1.
            </summary>
        </member>
        <member name="M:GodotEngine.Directory.copy(System.String,System.String)">
            <summary>
            Copy the [i]from[/i] file to the [i]to[/i] destination. Both arguments should be paths to files, either relative or absolute. If the destination file exists and is not access-protected, it will be overwritten.
            Returns one of the error code constants defined in [@Global Scope] (OK, FAILED or ERR_*).
            </summary>
        </member>
        <member name="M:GodotEngine.Directory.rename(System.String,System.String)">
            <summary>
            Rename (move) the [i]from[/i] file to the [i]to[/i] destination. Both arguments should be paths to files, either relative or absolute. If the destination file exists and is not access-protected, it will be overwritten.
            Return one of the error code constants defined in [@Global Scope] (OK or FAILED).
            </summary>
        </member>
        <member name="M:GodotEngine.Directory.remove(System.String)">
            <summary>
            Delete the target file or an empty directory. The argument can be relative to the current directory, or an absolute path. If the target directory is not empty, the operation will fail.
            Return one of the error code constants defined in [@Global Scope] (OK or FAILED).
            </summary>
        </member>
        <member name="M:GodotEngine.Engine.set_iterations_per_second(System.Int32)">
            <summary>
            Set the amount of fixed iterations per second (for fixed process and physics).
            </summary>
        </member>
        <member name="M:GodotEngine.Engine.get_iterations_per_second">
            <summary>
            Return the amount of fixed iterations per second (for fixed process and physics).
            </summary>
        </member>
        <member name="M:GodotEngine.Engine.get_custom_level">
            <summary>
            Returns the value of the commandline argument "-level".
            </summary>
        </member>
        <member name="M:GodotEngine.Engine.get_frames_drawn">
            <summary>
            Return the total amount of frames drawn.
            </summary>
        </member>
        <member name="M:GodotEngine.Engine.get_frames_per_second">
            <summary>
            Returns the frames per second of the running game.
            </summary>
        </member>
        <member name="M:GodotEngine.Engine.get_main_loop">
            <summary>
            Return the main loop object (see [MainLoop] and [SceneTree]).
            </summary>
        </member>
        <member name="M:GodotEngine.Engine.get_version_info">
            <summary>
            Returns the current engine version information in a Dictionary.
            "major"    - Holds the major version number as a String
            "minor"    - Holds the minor version number as a String
            "patch"    - Holds the patch version number as a String
            "status"   - Holds the status (e.g. "beta", "rc1", "rc2", ... "stable") as a String
            "revision" - Holds the revision (e.g. "custom-build") as a String
            "string"   - major + minor + patch + status + revision in a single String
            </summary>
        </member>
        <member name="T:GodotEngine.File">
            <summary>
            File type. This is used to permanently store data into the user device's file system and to read from it. This can be used to store game save data or player configuration files, for example.
            Here's a sample on how to write and read from a file:
            [codeblock]
            func save(content):
            var file = File.new()
            file.open("user://save_game.dat", file.WRITE)
            file.store_string(content)
            file.close()
            func load():
            var file = File.new()
            file.open("user://save_game.dat", file.READ)
            var content = file.get_as_text()
            file.close()
            return content
            [/codeblock]
            </summary>
        </member>
        <member name="F:GodotEngine.File.READ">
            <summary>
            Open the file for reading.
            </summary>
        </member>
        <member name="F:GodotEngine.File.WRITE">
            <summary>
            Open the file for writing. Create it if the file not exists and truncate if it exists.
            </summary>
        </member>
        <member name="F:GodotEngine.File.READ_WRITE">
            <summary>
            Open the file for reading and writing, without truncating the file.
            </summary>
        </member>
        <member name="F:GodotEngine.File.WRITE_READ">
            <summary>
            Open the file for reading and writing. Create it if the file not exists and truncate if it exists.
            </summary>
        </member>
        <member name="F:GodotEngine.File.COMPRESSION_FASTLZ">
            <summary>
            Use the FastLZ compression method.
            </summary>
        </member>
        <member name="F:GodotEngine.File.COMPRESSION_DEFLATE">
            <summary>
            Use the Deflate compression method.
            </summary>
        </member>
        <member name="F:GodotEngine.File.COMPRESSION_ZSTD">
            <summary>
            Use the Zstd compression method.
            </summary>
        </member>
        <member name="M:GodotEngine.File.open_encrypted(System.String,System.Int32,System.Byte[])">
            <summary>
            Open an encrypted file in write or read mode. You need to pass a binary key to encrypt/decrypt it.
            </summary>
        </member>
        <member name="M:GodotEngine.File.open_encrypted_with_pass(System.String,System.Int32,System.String)">
            <summary>
            Open an encrypted file in write or read mode. You need to pass a password to encrypt/decrypt it.
            </summary>
        </member>
        <member name="M:GodotEngine.File.open_compressed(System.String,System.Int32,System.Int32)">
            <summary>
            Open a compressed file for reading or writing. The compression_mode can be set as one of the COMPRESSION_* constants.
            </summary>
        </member>
        <member name="M:GodotEngine.File.open(System.String,System.Int32)">
            <summary>
            Open the file for writing or reading, depending on the flags.
            </summary>
        </member>
        <member name="M:GodotEngine.File.close">
            <summary>
            Close the currently opened file.
            </summary>
        </member>
        <member name="M:GodotEngine.File.is_open">
            <summary>
            Return whether the file is currently opened.
            </summary>
        </member>
        <member name="M:GodotEngine.File.seek(System.Int32)">
            <summary>
            Change the file reading/writing cursor to the specified position (in bytes from the beginning of the file).
            </summary>
        </member>
        <member name="M:GodotEngine.File.seek_end(System.Int32)">
            <summary>
            Change the file reading/writing cursor to the specified position (in bytes from the end of the file). Note that this is an offset, so you should use negative numbers or the cursor will be at the end of the file.
            </summary>
        </member>
        <member name="M:GodotEngine.File.get_pos">
            <summary>
            Return the file cursor position.
            </summary>
        </member>
        <member name="M:GodotEngine.File.get_len">
            <summary>
            Return the size of the file in bytes.
            </summary>
        </member>
        <member name="M:GodotEngine.File.eof_reached">
            <summary>
            Return whether the file cursor reached the end of the file.
            </summary>
        </member>
        <member name="M:GodotEngine.File.get_8">
            <summary>
            Get the next 8 bits from the file as an integer.
            </summary>
        </member>
        <member name="M:GodotEngine.File.get_16">
            <summary>
            Get the next 16 bits from the file as an integer.
            </summary>
        </member>
        <member name="M:GodotEngine.File.get_32">
            <summary>
            Get the next 32 bits from the file as an integer.
            </summary>
        </member>
        <member name="M:GodotEngine.File.get_64">
            <summary>
            Get the next 64 bits from the file as an integer.
            </summary>
        </member>
        <member name="M:GodotEngine.File.get_float">
            <summary>
            Get the next 32 bits from the file as a floating point number.
            </summary>
        </member>
        <member name="M:GodotEngine.File.get_double">
            <summary>
            Get the next 64 bits from the file as a floating point number.
            </summary>
        </member>
        <member name="M:GodotEngine.File.get_real">
            <summary>
            Get the next bits from the file as a floating point number.
            </summary>
        </member>
        <member name="M:GodotEngine.File.get_buffer(System.Int32)">
            <summary>
            Get next len bytes of the file as a [PoolByteArray].
            </summary>
        </member>
        <member name="M:GodotEngine.File.get_line">
            <summary>
            Get the next line of the file as a [String].
            </summary>
        </member>
        <member name="M:GodotEngine.File.get_as_text">
            <summary>
            Get the whole file as a [String].
            </summary>
        </member>
        <member name="M:GodotEngine.File.get_md5(System.String)">
            <summary>
            Return a md5 String representing the file at the given path or an empty [String] on failure.
            </summary>
        </member>
        <member name="M:GodotEngine.File.get_sha256(System.String)">
            <summary>
            Return a sha256 String representing the file at the given path or an empty [String] on failure.
            </summary>
        </member>
        <member name="M:GodotEngine.File.get_endian_swap">
            <summary>
            Get whether endian swap is enabled for this file.
            </summary>
        </member>
        <member name="M:GodotEngine.File.set_endian_swap(System.Boolean)">
            <summary>
            Set whether to swap the endianness of the file. Enable this if you're dealing with files written in big endian machines.
            Note that this is about the file format, not CPU type. This is always reseted to [code]false[/code] whenever you open the file.
            </summary>
        </member>
        <member name="M:GodotEngine.File.get_error">
            <summary>
            Get the last error that happened when trying to perform operations. Compare with the [code]ERR_FILE_*[/code] constants from [@Global Scope].
            </summary>
        </member>
        <member name="M:GodotEngine.File.get_var">
            <summary>
            Get the next Variant value from the file.
            </summary>
        </member>
        <member name="M:GodotEngine.File.get_csv_line(System.String)">
            <summary>
            Get the next value of the file in CSV (Comma Separated Values) format. You can pass a different delimiter to use other than the default "," (comma).
            </summary>
        </member>
        <member name="M:GodotEngine.File.store_8(System.Int32)">
            <summary>
            Store an integer as 8 bits in the file.
            </summary>
        </member>
        <member name="M:GodotEngine.File.store_16(System.Int32)">
            <summary>
            Store an integer as 16 bits in the file.
            </summary>
        </member>
        <member name="M:GodotEngine.File.store_32(System.Int32)">
            <summary>
            Store an integer as 32 bits in the file.
            </summary>
        </member>
        <member name="M:GodotEngine.File.store_64(System.Int32)">
            <summary>
            Store an integer as 64 bits in the file.
            </summary>
        </member>
        <member name="M:GodotEngine.File.store_float(System.Single)">
            <summary>
            Store a floating point number as 32 bits in the file.
            </summary>
        </member>
        <member name="M:GodotEngine.File.store_double(System.Single)">
            <summary>
            Store a floating point number as 64 bits in the file.
            </summary>
        </member>
        <member name="M:GodotEngine.File.store_real(System.Single)">
            <summary>
            Store a floating point number in the file.
            </summary>
        </member>
        <member name="M:GodotEngine.File.store_buffer(System.Byte[])">
            <summary>
            Store the given array of bytes in the file.
            </summary>
        </member>
        <member name="M:GodotEngine.File.store_line(System.String)">
            <summary>
            Store the given [String] as a line in the file.
            </summary>
        </member>
        <member name="M:GodotEngine.File.store_string(System.String)">
            <summary>
            Store the given [String] in the file.
            </summary>
        </member>
        <member name="M:GodotEngine.File.store_var(System.Object)">
            <summary>
            Store any Variant value in the file.
            </summary>
        </member>
        <member name="M:GodotEngine.File.store_pascal_string(System.String)">
            <summary>
            Store the given [String] as a line in the file in Pascal format (i.e. also store the length of the string).
            </summary>
        </member>
        <member name="M:GodotEngine.File.get_pascal_string">
            <summary>
            Get a [String] saved in Pascal format from the file.
            </summary>
        </member>
        <member name="M:GodotEngine.File.file_exists(System.String)">
            <summary>
            Get whether or not the file in the specified path exists.
            </summary>
        </member>
        <member name="T:GodotEngine.Mutex">
            <summary>
            A synchronization Mutex. Element used in multi-threadding. Basically a binary [Semaphore]. Guarantees that only one thread has this lock, can be used to protect a critical section.
            </summary>
        </member>
        <member name="M:GodotEngine.Mutex.lock">
            <summary>
            Lock this [Mutex], blocks until it is unlocked by the current owner.
            </summary>
        </member>
        <member name="M:GodotEngine.Mutex.try_lock">
            <summary>
            Try locking this [Mutex], does not block. Returns [OK] on success else [ERR_BUSY].
            </summary>
        </member>
        <member name="M:GodotEngine.Mutex.unlock">
            <summary>
            Unlock this [Mutex], leaving it to others threads.
            </summary>
        </member>
        <member name="T:GodotEngine.OS">
            <summary>
            Operating System functions. OS Wraps the most common functionality to communicate with the host Operating System, such as: mouse grabbing, mouse cursors, clipboard, video mode, date and time, timers, environment variables, execution of binaries, command line, etc.
            </summary>
        </member>
        <member name="M:GodotEngine.OS.set_clipboard(System.String)">
            <summary>
            Set clipboard to the OS.
            </summary>
        </member>
        <member name="M:GodotEngine.OS.get_clipboard">
            <summary>
            Get clipboard from the host OS.
            </summary>
        </member>
        <member name="M:GodotEngine.OS.get_screen_count">
            <summary>
            Returns the number of displays attached to the host machine
            </summary>
        </member>
        <member name="M:GodotEngine.OS.get_current_screen">
            <summary>
            Returns the current screen index (0 padded).
            </summary>
        </member>
        <member name="M:GodotEngine.OS.get_screen_size(System.Int32)">
            <summary>
            Returns the dimensions in pixels of the specified screen.
            </summary>
        </member>
        <member name="M:GodotEngine.OS.get_screen_dpi(System.Int32)">
            <summary>
            Returns the dots per inch density of the specified screen.
            On Android Devices, the actual screen densities are grouped into six generalized densities:
            ldpi    - 120 dpi
            mdpi    - 160 dpi
            hdpi    - 240 dpi
            xhdpi   - 320 dpi
            xxhdpi  - 480 dpi
            xxxhdpi - 640 dpi
            </summary>
        </member>
        <member name="M:GodotEngine.OS.get_window_position">
            <summary>
            Returns the window position relative to the screen, the origin is the top left corner, +Y axis goes to the bottom and +X axis goes to the right.
            </summary>
        </member>
        <member name="M:GodotEngine.OS.set_window_position(GodotEngine.Vector2)">
            <summary>
            Sets the position of the window to the specified position (this function could be restricted by the window manager, meaning that there could be some unreachable areas of the screen).
            </summary>
        </member>
        <member name="M:GodotEngine.OS.get_window_size">
            <summary>
            Returns the size of the window (without counting window manager decorations).
            </summary>
        </member>
        <member name="M:GodotEngine.OS.set_window_size(GodotEngine.Vector2)">
            <summary>
            Sets the window size to the specified size.
            </summary>
        </member>
        <member name="M:GodotEngine.OS.set_window_fullscreen(System.Boolean)">
            <summary>
            Sets window fullscreen mode to the [i]enabled[/i] argument, [i]enabled[/i] is a toggle for the fullscreen mode, calling the function with [i]enabled[/i] true when the screen is not on fullscreen mode will cause the screen to go to fullscreen mode, calling the function with [i]enabled[/i] false when the screen is in fullscreen mode will cause the window to exit the fullscreen mode.
            </summary>
        </member>
        <member name="M:GodotEngine.OS.is_window_fullscreen">
            <summary>
            Returns whether the window is in fullscreen mode or not.
            </summary>
        </member>
        <member name="M:GodotEngine.OS.set_window_resizable(System.Boolean)">
            <summary>
            Set the window resizable state, if the window is not resizable it will preserve the dimensions specified in the project settings.
            </summary>
        </member>
        <member name="M:GodotEngine.OS.is_window_resizable">
            <summary>
            Returns whether the window is resizable or not.
            </summary>
        </member>
        <member name="M:GodotEngine.OS.set_window_minimized(System.Boolean)">
            <summary>
            Set whether the window is minimized.
            </summary>
        </member>
        <member name="M:GodotEngine.OS.is_window_minimized">
            <summary>
            Return true if the window is minimized.
            </summary>
        </member>
        <member name="M:GodotEngine.OS.set_window_maximized(System.Boolean)">
            <summary>
            Set the window size to maximized.
            </summary>
        </member>
        <member name="M:GodotEngine.OS.is_window_maximized">
            <summary>
            Return true if the window is maximized.
            </summary>
        </member>
        <member name="M:GodotEngine.OS.request_attention">
            <summary>
            Request the user attention to the window. It'll flash the taskbar button on Windows or bounce the dock icon on OSX.
            </summary>
        </member>
        <member name="M:GodotEngine.OS.get_borderless_window">
            <summary>
            Returns true if the current window is borderless.
            </summary>
        </member>
        <member name="M:GodotEngine.OS.set_screen_orientation(System.Int32)">
            <summary>
            Sets the current screen orientation, the argument value must be one of the SCREEN_ORIENTATION constants in this class.
            </summary>
        </member>
        <member name="M:GodotEngine.OS.get_screen_orientation">
            <summary>
            Returns the current screen orientation, the return value will be one of the SCREEN_ORIENTATION constants in this class.
            </summary>
        </member>
        <member name="M:GodotEngine.OS.set_keep_screen_on(System.Boolean)">
            <summary>
            Set keep screen on if true, or goes to sleep by device setting if false. (for Android/iOS)
            </summary>
        </member>
        <member name="M:GodotEngine.OS.is_keep_screen_on">
            <summary>
            Returns whether the screen is being kept on or not.
            </summary>
        </member>
        <member name="M:GodotEngine.OS.set_window_title(System.String)">
            <summary>
            Sets the window title to the specified string.
            </summary>
        </member>
        <member name="M:GodotEngine.OS.set_low_processor_usage_mode(System.Boolean)">
            <summary>
            Set to true to enable the low cpu usage mode. In this mode, the screen only redraws when there are changes, and a considerable sleep time is inserted between frames. This way, editors using the engine UI only use very little cpu.
            </summary>
        </member>
        <member name="M:GodotEngine.OS.is_in_low_processor_usage_mode">
            <summary>
            Return true if low cpu usage mode is enabled.
            </summary>
        </member>
        <member name="M:GodotEngine.OS.get_processor_count">
            <summary>
            Returns the number of cores available in the host machine.
            </summary>
        </member>
        <member name="M:GodotEngine.OS.get_executable_path">
            <summary>
            Return the path to the current engine executable.
            </summary>
        </member>
        <member name="M:GodotEngine.OS.execute(System.String,System.String[],System.Boolean,System.Object[])">
            <summary>
            Execute the binary file in given path, optionally blocking until it returns. A process ID is returned.
            <param name="output">If the param is null, then the default value is new object[] {}</param>
            </summary>
        </member>
        <member name="M:GodotEngine.OS.kill(System.Int32)">
            <summary>
            Kill a process ID (this method can be used to kill processes that were not spawned by the game).
            </summary>
        </member>
        <member name="M:GodotEngine.OS.get_process_id">
            <summary>
            Returns the game process ID
            </summary>
        </member>
        <member name="M:GodotEngine.OS.get_environment(System.String)">
            <summary>
            Return an environment variable.
            </summary>
        </member>
        <member name="M:GodotEngine.OS.has_environment(System.String)">
            <summary>
            Return true if an environment variable exists.
            </summary>
        </member>
        <member name="M:GodotEngine.OS.get_name">
            <summary>
            Return the name of the host OS. Possible values are: "Android", "Haiku", "iOS", "HTML5", "OSX", "Server", "Windows", "UWP", "X11".
            </summary>
        </member>
        <member name="M:GodotEngine.OS.get_cmdline_args">
            <summary>
            Return the commandline passed to the engine.
            </summary>
        </member>
        <member name="M:GodotEngine.OS.get_datetime(System.Boolean)">
            <summary>
            Returns current datetime as a dictionary of keys: year, month, day, weekday, dst (daylight savings time), hour, minute, second.
            </summary>
        </member>
        <member name="M:GodotEngine.OS.get_date(System.Boolean)">
            <summary>
            Returns current date as a dictionary of keys: year, month, day, weekday, dst (daylight savings time).
            </summary>
        </member>
        <member name="M:GodotEngine.OS.get_time(System.Boolean)">
            <summary>
            Returns current time as a dictionary of keys: hour, minute, second
            </summary>
        </member>
        <member name="M:GodotEngine.OS.get_unix_time">
            <summary>
            Return	the current unix timestamp.
            </summary>
        </member>
        <member name="M:GodotEngine.OS.get_datetime_from_unix_time(System.Int32)">
            <summary>
            Get a dictionary of time values when given epoch time.
            Dictionary Time values will be a union of values from [method get_time] and [method get_date] dictionaries (with the exception of dst = day light standard time, as it cannot be determined from epoch).
            </summary>
        </member>
        <member name="M:GodotEngine.OS.get_unix_time_from_datetime(System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Get an epoch time value from a dictionary of time values.
            [code]datetime[/code] must be populated with the following keys: year, month, day, hour, minute, second.
            You can pass the output from [method get_datetime_from_unix_time] directly into this function. Daylight savings time (dst), if present, is ignored.
            </summary>
        </member>
        <member name="M:GodotEngine.OS.delay_usec(System.Int32)">
            <summary>
            Delay executing of the current thread by given microseconds.
            </summary>
        </member>
        <member name="M:GodotEngine.OS.delay_msec(System.Int32)">
            <summary>
            Delay executing of the current thread by given milliseconds.
            </summary>
        </member>
        <member name="M:GodotEngine.OS.get_ticks_msec">
            <summary>
            Return the amount of time passed in milliseconds since the engine started.
            </summary>
        </member>
        <member name="M:GodotEngine.OS.get_locale">
            <summary>
            Return the host OS locale.
            </summary>
        </member>
        <member name="M:GodotEngine.OS.get_latin_keyboard_variant">
            <summary>
            Returns the current latin keyboard variant as a String.
            Possible return values are: "QWERTY", "AZERTY", "QZERTY", "DVORAK", "NEO" or "ERROR"
            </summary>
        </member>
        <member name="M:GodotEngine.OS.get_model_name">
            <summary>
            Returns the model name of the current device.
            </summary>
        </member>
        <member name="M:GodotEngine.OS.can_draw">
            <summary>
            Return true if the host OS allows drawing.
            </summary>
        </member>
        <member name="M:GodotEngine.OS.is_stdout_verbose">
            <summary>
            Return true if the engine was executed with -v (verbose stdout).
            </summary>
        </member>
        <member name="M:GodotEngine.OS.can_use_threads">
            <summary>
            Returns if the current host platform is using multiple threads.
            </summary>
        </member>
        <member name="M:GodotEngine.OS.dump_memory_to_file(System.String)">
            <summary>
            Dumps the memory allocation ringlist to a file (only works in debug).
            Entry format per line: "Address - Size - Description"
            </summary>
        </member>
        <member name="M:GodotEngine.OS.dump_resources_to_file(System.String)">
            <summary>
            Dumps all used resources to file (only works in debug).
            Entry format per line: "Resource Type : Resource Location"
            At the end of the file is a statistic of all used Resource Types.
            </summary>
        </member>
        <member name="M:GodotEngine.OS.has_virtual_keyboard">
            <summary>
            Returns true if the platform has a virtual keyboard, false otherwise.
            </summary>
        </member>
        <member name="M:GodotEngine.OS.show_virtual_keyboard(System.String)">
            <summary>
            Shows the virtual keyboard if the platform has one. The [i]existing_text[/i] parameter is useful for implementing your own LineEdit, as it tells the virtual keyboard what text has already been typed (the virtual keyboard uses it for auto-correct and predictions).
            </summary>
        </member>
        <member name="M:GodotEngine.OS.hide_virtual_keyboard">
            <summary>
            Hides the virtual keyboard if it is shown, does nothing otherwise.
            </summary>
        </member>
        <member name="M:GodotEngine.OS.get_static_memory_peak_usage">
            <summary>
            Return the max amount of static memory used (only works in debug).
            </summary>
        </member>
        <member name="M:GodotEngine.OS.get_dynamic_memory_usage">
            <summary>
            Return the total amount of dynamic memory used (only works in debug).
            </summary>
        </member>
        <member name="M:GodotEngine.OS.get_data_dir">
            <summary>
            Return the absolute directory path of user data path([user://]).
            </summary>
        </member>
        <member name="M:GodotEngine.OS.get_scancode_string(System.Int32)">
            <summary>
            Returns the given scancode as a string (e.g. Return values: "Escape", "Shift+Escape").
            </summary>
        </member>
        <member name="M:GodotEngine.OS.find_scancode_from_string(System.String)">
            <summary>
            Returns the scancode of the given string (e.g. "Escape")
            </summary>
        </member>
        <member name="M:GodotEngine.OS.alert(System.String,System.String)">
            <summary>
            Displays a modal dialog box utilizing the host OS.
            </summary>
        </member>
        <member name="T:GodotEngine.ResourceLoader">
            <summary>
            Resource Loader. This is a static object accessible as [ResourceLoader]. GDScript has a simplified load() function, though.
            </summary>
        </member>
        <member name="M:GodotEngine.ResourceLoader.load_interactive(System.String,System.String)">
            <summary>
            Load a resource interactively, the returned object allows to load with high granularity.
            </summary>
        </member>
        <member name="M:GodotEngine.ResourceLoader.get_recognized_extensions_for_type(System.String)">
            <summary>
            Return the list of recognized extensions for a resource type.
            </summary>
        </member>
        <member name="M:GodotEngine.ResourceLoader.set_abort_on_missing_resources(System.Boolean)">
            <summary>
            Change the behavior on missing sub-resources. Default is to abort load.
            </summary>
        </member>
        <member name="T:GodotEngine.ResourceSaver">
            <summary>
            Resource Saving Interface. This interface is used for saving resources to disk.
            </summary>
        </member>
        <member name="M:GodotEngine.ResourceSaver.save(System.String,GodotEngine.Resource,System.Int32)">
            <summary>
            Save a resource to disk, to a given path.
            </summary>
        </member>
        <member name="T:GodotEngine.Semaphore">
            <summary>
            A synchronization Semaphore. Element used in multi-threadding. Initialized to zero on creation.
            </summary>
        </member>
        <member name="M:GodotEngine.Semaphore.wait">
            <summary>
            Tries to wait for the [Semaphore], if its value is zero, blocks until non-zero.
            </summary>
        </member>
        <member name="M:GodotEngine.Semaphore.post">
            <summary>
            Lowers the [Semaphore], allowing one more thread in.
            </summary>
        </member>
        <member name="T:GodotEngine.Thread">
            <summary>
            A unit of execution in a process. Can run methods on [Object]\ s simultaneously. The use of synchronization via [Mutex], [Semaphore] is advised if working with shared objects.
            </summary>
        </member>
        <member name="M:GodotEngine.Thread.start(GodotEngine.Object,System.String,System.Object,System.Int32)">
            <summary>
            Start a new [Thread], it will run "method" on object "instance" using "userdata" as an argument and running with "priority", one of PRIORITY_* enum.
            Returns OK on success, or ERR_CANT_CREATE on failure.
            </summary>
        </member>
        <member name="M:GodotEngine.Thread.get_id">
            <summary>
            Return the id of the thread, uniquely identifying it among all threads.
            </summary>
        </member>
        <member name="M:GodotEngine.Thread.is_active">
            <summary>
            Whether this thread is currently active, an active Thread cannot start work on a new method but can be joined with [method wait_to_finish].
            </summary>
        </member>
        <member name="M:GodotEngine.Thread.wait_to_finish">
            <summary>
            Joins the [Thread] and waits for it to finish. Returns what the method called returned.
            </summary>
        </member>
        <member name="F:GodotEngine.Godot.MARGIN_LEFT">
            <summary>Left margin</summary>
        </member>
        <member name="F:GodotEngine.Godot.MARGIN_TOP">
            <summary>Top margin</summary>
        </member>
        <member name="F:GodotEngine.Godot.MARGIN_RIGHT">
            <summary>Right margin</summary>
        </member>
        <member name="F:GodotEngine.Godot.MARGIN_BOTTOM">
            <summary>Bottom margin</summary>
        </member>
        <member name="F:GodotEngine.Godot.VERTICAL">
            <summary>General vertical alignment</summary>
        </member>
        <member name="F:GodotEngine.Godot.HORIZONTAL">
            <summary>General horizontal alignment</summary>
        </member>
        <member name="F:GodotEngine.Godot.HALIGN_LEFT">
            <summary>Horizontal left alignment</summary>
        </member>
        <member name="F:GodotEngine.Godot.HALIGN_CENTER">
            <summary>Horizontal center alignment</summary>
        </member>
        <member name="F:GodotEngine.Godot.HALIGN_RIGHT">
            <summary>Horizontal right alignment</summary>
        </member>
        <member name="F:GodotEngine.Godot.VALIGN_TOP">
            <summary>Vertical top alignment</summary>
        </member>
        <member name="F:GodotEngine.Godot.VALIGN_CENTER">
            <summary>Vertical center alignment</summary>
        </member>
        <member name="F:GodotEngine.Godot.VALIGN_BOTTOM">
            <summary>Vertical bottom alignment</summary>
        </member>
        <member name="F:GodotEngine.Godot.SPKEY">
            <summary>Scancodes with this bit applied are non printable.</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_ESCAPE">
            <summary>Escape Key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_TAB">
            <summary>Tab Key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_BACKTAB">
            <summary>Shift-Tab Key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_BACKSPACE">
            <summary>Backspace Key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_RETURN">
            <summary>Return Key (On Main Keyboard)</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_ENTER">
            <summary>Enter Key (On Numpad)</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_INSERT">
            <summary>Insert Key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_DELETE">
            <summary>Delete Key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_PAUSE">
            <summary>Pause Key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_PRINT">
            <summary>Printscreen Key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_HOME">
            <summary>Home Key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_END">
            <summary>End Key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_LEFT">
            <summary>Left Arrow Key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_UP">
            <summary>Up Arrow Key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_RIGHT">
            <summary>Right Arrow Key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_DOWN">
            <summary>Down Arrow Key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_PAGEUP">
            <summary>Pageup Key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_PAGEDOWN">
            <summary>Pagedown Key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_SHIFT">
            <summary>Shift Key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_CONTROL">
            <summary>Control Key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_ALT">
            <summary>Alt Key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_CAPSLOCK">
            <summary>Capslock Key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_NUMLOCK">
            <summary>Numlock Key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_SCROLLLOCK">
            <summary>Scrolllock Key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_F1">
            <summary>F1 Key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_F2">
            <summary>F2 Key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_F3">
            <summary>F3 Key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_F4">
            <summary>F4 Key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_F5">
            <summary>F5 Key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_F6">
            <summary>F6 Key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_F7">
            <summary>F7 Key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_F8">
            <summary>F8 Key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_F9">
            <summary>F9 Key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_F10">
            <summary>F10 Key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_F11">
            <summary>F11 Key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_F12">
            <summary>F12 Key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_F13">
            <summary>F13 Key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_F14">
            <summary>F14 Key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_F15">
            <summary>F15 Key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_F16">
            <summary>F16 Key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_KP_ENTER">
            <summary>Enter Key on Numpad</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_KP_MULTIPLY">
            <summary>Multiply Key on Numpad</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_KP_DIVIDE">
            <summary>Divide Key on Numpad</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_KP_SUBTRACT">
            <summary>Subtract Key on Numpad</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_KP_PERIOD">
            <summary>Period Key on Numpad</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_KP_ADD">
            <summary>Add Key on Numpad</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_KP_0">
            <summary>Number 0 on Numpad</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_KP_1">
            <summary>Number 1 on Numpad</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_KP_2">
            <summary>Number 2 on Numpad</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_KP_3">
            <summary>Number 3 on Numpad</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_KP_4">
            <summary>Number 4 on Numpad</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_KP_5">
            <summary>Number 5 on Numpad</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_KP_6">
            <summary>Number 6 on Numpad</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_KP_7">
            <summary>Number 7 on Numpad</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_KP_8">
            <summary>Number 8 on Numpad</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_KP_9">
            <summary>Number 9 on Numpad</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_SUPER_L">
            <summary>Super Left key (windows key)</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_SUPER_R">
            <summary>Super Left key (windows key)</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_MENU">
            <summary>Context menu key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_HELP">
            <summary>Help key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_BACK">
            <summary>Back key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_FORWARD">
            <summary>Forward key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_STOP">
            <summary>Stop key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_REFRESH">
            <summary>Refresh key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_VOLUMEDOWN">
            <summary>Volume down key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_VOLUMEMUTE">
            <summary>Mute volume key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_VOLUMEUP">
            <summary>Volume up key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_MEDIAPLAY">
            <summary>Media play key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_MEDIASTOP">
            <summary>Media stop key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_MEDIAPREVIOUS">
            <summary>Previous song key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_MEDIANEXT">
            <summary>Next song key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_MEDIARECORD">
            <summary>Media record key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_HOMEPAGE">
            <summary>Home page key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_FAVORITES">
            <summary>Favorites key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_SEARCH">
            <summary>Search key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_SPACE">
            <summary>Space Key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_EXCLAM">
            <summary>! key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_QUOTEDBL">
            <summary>" key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_NUMBERSIGN">
            <summary># key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_DOLLAR">
            <summary>$ key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_PERCENT">
            <summary>% key</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:GodotEngine.Godot.KEY_AMPERSAND" -->
        <member name="F:GodotEngine.Godot.KEY_APOSTROPHE">
            <summary>' key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_PARENLEFT">
            <summary>( key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_PARENRIGHT">
            <summary>) key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_ASTERISK">
            <summary>* key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_PLUS">
            <summary>+ key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_COMMA">
            <summary></summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_MINUS">
            <summary>- key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_PERIOD">
            <summary>. key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_SLASH">
            <summary>/ key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_0">
            <summary>Number 0</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_1">
            <summary>Number 1</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_2">
            <summary>Number 2</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_3">
            <summary>Number 3</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_4">
            <summary>Number 4</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_5">
            <summary>Number 5</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_6">
            <summary>Number 6</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_7">
            <summary>Number 7</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_8">
            <summary>Number 8</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_9">
            <summary>Number 9</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_COLON">
            <summary>: key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_SEMICOLON">
            <summary></summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_LESS">
            <summary>Lower than key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_EQUAL">
            <summary>= key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_GREATER">
            <summary>Greater than key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_QUESTION">
            <summary>? key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_AT">
            <summary>@ key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_A">
            <summary>A Key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_B">
            <summary>B Key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_C">
            <summary>C Key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_D">
            <summary>D Key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_E">
            <summary>E Key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_F">
            <summary>F Key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_G">
            <summary>G Key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_H">
            <summary>H Key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_I">
            <summary>I Key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_J">
            <summary>J Key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_K">
            <summary>K Key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_L">
            <summary>L Key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_M">
            <summary>M Key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_N">
            <summary>N Key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_O">
            <summary>O Key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_P">
            <summary>P Key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_Q">
            <summary>Q Key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_R">
            <summary>R Key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_S">
            <summary>S Key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_T">
            <summary>T Key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_U">
            <summary>U Key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_V">
            <summary>V Key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_W">
            <summary>W Key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_X">
            <summary>X Key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_Y">
            <summary>Y Key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_Z">
            <summary>Z Key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_BRACKETLEFT">
            <summary>[ key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_BACKSLASH">
            <summary>\ key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_BRACKETRIGHT">
            <summary>] key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_ASCIICIRCUM">
            <summary>^ key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_UNDERSCORE">
            <summary>_ key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_BRACELEFT">
            <summary>{ key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_BAR">
            <summary>| key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_BRACERIGHT">
            <summary>} key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_ASCIITILDE">
            <summary>~ key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_CENT">
            <summary>¢ key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_BROKENBAR">
            <summary>¦ key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_SECTION">
            <summary>§ key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_DIAERESIS">
            <summary>¨ key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_COPYRIGHT">
            <summary>© key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_GUILLEMOTLEFT">
            <summary>« key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_NOTSIGN">
            <summary>» key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_HYPHEN">
            <summary>- key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_REGISTERED">
            <summary>® key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_DEGREE">
            <summary>° key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_PLUSMINUS">
            <summary>± key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_TWOSUPERIOR">
            <summary>² key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_THREESUPERIOR">
            <summary>³ key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_ACUTE">
            <summary>´ key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_MU">
            <summary>µ key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_PERIODCENTERED">
            <summary>· key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_CEDILLA">
            <summary>¬ key</summary>
        </member>
        <member name="F:GodotEngine.Godot.KEY_ONEHALF">
            <summary>½ key</summary>
        </member>
        <member name="F:GodotEngine.Godot.BUTTON_LEFT">
            <summary>Left Mouse Button</summary>
        </member>
        <member name="F:GodotEngine.Godot.BUTTON_RIGHT">
            <summary>Right Mouse Button</summary>
        </member>
        <member name="F:GodotEngine.Godot.BUTTON_MIDDLE">
            <summary>Middle Mouse Button</summary>
        </member>
        <member name="F:GodotEngine.Godot.BUTTON_WHEEL_UP">
            <summary>Mouse wheel up</summary>
        </member>
        <member name="F:GodotEngine.Godot.BUTTON_WHEEL_DOWN">
            <summary>Mouse wheel down</summary>
        </member>
        <member name="F:GodotEngine.Godot.BUTTON_WHEEL_LEFT">
            <summary>Mouse wheel left button</summary>
        </member>
        <member name="F:GodotEngine.Godot.BUTTON_WHEEL_RIGHT">
            <summary>Mouse wheel right button</summary>
        </member>
        <member name="F:GodotEngine.Godot.JOY_BUTTON_0">
            <summary>Joystick Button 0</summary>
        </member>
        <member name="F:GodotEngine.Godot.JOY_BUTTON_1">
            <summary>Joystick Button 1</summary>
        </member>
        <member name="F:GodotEngine.Godot.JOY_BUTTON_2">
            <summary>Joystick Button 2</summary>
        </member>
        <member name="F:GodotEngine.Godot.JOY_BUTTON_3">
            <summary>Joystick Button 3</summary>
        </member>
        <member name="F:GodotEngine.Godot.JOY_BUTTON_4">
            <summary>Joystick Button 4</summary>
        </member>
        <member name="F:GodotEngine.Godot.JOY_BUTTON_5">
            <summary>Joystick Button 5</summary>
        </member>
        <member name="F:GodotEngine.Godot.JOY_BUTTON_6">
            <summary>Joystick Button 6</summary>
        </member>
        <member name="F:GodotEngine.Godot.JOY_BUTTON_7">
            <summary>Joystick Button 7</summary>
        </member>
        <member name="F:GodotEngine.Godot.JOY_BUTTON_8">
            <summary>Joystick Button 8</summary>
        </member>
        <member name="F:GodotEngine.Godot.JOY_BUTTON_9">
            <summary>Joystick Button 9</summary>
        </member>
        <member name="F:GodotEngine.Godot.JOY_BUTTON_10">
            <summary>Joystick Button 10</summary>
        </member>
        <member name="F:GodotEngine.Godot.JOY_BUTTON_11">
            <summary>Joystick Button 11</summary>
        </member>
        <member name="F:GodotEngine.Godot.JOY_BUTTON_12">
            <summary>Joystick Button 12</summary>
        </member>
        <member name="F:GodotEngine.Godot.JOY_BUTTON_13">
            <summary>Joystick Button 13</summary>
        </member>
        <member name="F:GodotEngine.Godot.JOY_BUTTON_14">
            <summary>Joystick Button 14</summary>
        </member>
        <member name="F:GodotEngine.Godot.JOY_BUTTON_15">
            <summary>Joystick Button 15</summary>
        </member>
        <member name="F:GodotEngine.Godot.JOY_BUTTON_MAX">
            <summary>Joystick Button 16</summary>
        </member>
        <member name="F:GodotEngine.Godot.JOY_SNES_A">
            <summary>Super Nintendo Entertaiment System controller A button</summary>
        </member>
        <member name="F:GodotEngine.Godot.JOY_SNES_B">
            <summary>Super Nintendo Entertaiment System controller B button</summary>
        </member>
        <member name="F:GodotEngine.Godot.JOY_SNES_X">
            <summary>Super Nintendo Entertaiment System controller X button</summary>
        </member>
        <member name="F:GodotEngine.Godot.JOY_SNES_Y">
            <summary>Super Nintendo Entertaiment System controller Y button</summary>
        </member>
        <member name="F:GodotEngine.Godot.JOY_SONY_CIRCLE">
            <summary>DUALSHOCK circle button</summary>
        </member>
        <member name="F:GodotEngine.Godot.JOY_SONY_X">
            <summary>DUALSHOCK X button</summary>
        </member>
        <member name="F:GodotEngine.Godot.JOY_SONY_SQUARE">
            <summary>DUALSHOCK square button</summary>
        </member>
        <member name="F:GodotEngine.Godot.JOY_SONY_TRIANGLE">
            <summary>DUALSHOCK triangle button</summary>
        </member>
        <member name="F:GodotEngine.Godot.JOY_SEGA_B">
            <summary>SEGA controller B button</summary>
        </member>
        <member name="F:GodotEngine.Godot.JOY_SEGA_A">
            <summary>SEGA controller A button</summary>
        </member>
        <member name="F:GodotEngine.Godot.JOY_SEGA_X">
            <summary>SEGA controller X button</summary>
        </member>
        <member name="F:GodotEngine.Godot.JOY_SEGA_Y">
            <summary>SEGA controller Y button</summary>
        </member>
        <member name="F:GodotEngine.Godot.JOY_XBOX_B">
            <summary>XBOX controller B button</summary>
        </member>
        <member name="F:GodotEngine.Godot.JOY_XBOX_A">
            <summary>XBOX controller A button</summary>
        </member>
        <member name="F:GodotEngine.Godot.JOY_XBOX_X">
            <summary>XBOX controller X button</summary>
        </member>
        <member name="F:GodotEngine.Godot.JOY_XBOX_Y">
            <summary>XBOX controller Y button</summary>
        </member>
        <member name="F:GodotEngine.Godot.JOY_SELECT">
            <summary>Joystick Button Select</summary>
        </member>
        <member name="F:GodotEngine.Godot.JOY_START">
            <summary>Joystick Button Start</summary>
        </member>
        <member name="F:GodotEngine.Godot.JOY_DPAD_UP">
            <summary>Joystick DPad Up</summary>
        </member>
        <member name="F:GodotEngine.Godot.JOY_DPAD_DOWN">
            <summary>Joystick DPad Down</summary>
        </member>
        <member name="F:GodotEngine.Godot.JOY_DPAD_LEFT">
            <summary>Joystick DPad Left</summary>
        </member>
        <member name="F:GodotEngine.Godot.JOY_DPAD_RIGHT">
            <summary>Joystick DPad Right</summary>
        </member>
        <member name="F:GodotEngine.Godot.JOY_L">
            <summary>Joystick Left Shoulder Button</summary>
        </member>
        <member name="F:GodotEngine.Godot.JOY_L2">
            <summary>Joystick Left Trigger</summary>
        </member>
        <member name="F:GodotEngine.Godot.JOY_L3">
            <summary>Joystick Left Stick Click</summary>
        </member>
        <member name="F:GodotEngine.Godot.JOY_R">
            <summary>Joystick Right Shoulder Button</summary>
        </member>
        <member name="F:GodotEngine.Godot.JOY_R2">
            <summary>Joystick Right Trigger</summary>
        </member>
        <member name="F:GodotEngine.Godot.JOY_R3">
            <summary>Joystick Right Stick Click</summary>
        </member>
        <member name="F:GodotEngine.Godot.JOY_AXIS_0">
            <summary>Joystick Left Stick Horizontal Axis</summary>
        </member>
        <member name="F:GodotEngine.Godot.JOY_AXIS_1">
            <summary>Joystick Left Stick Vertical Axis</summary>
        </member>
        <member name="F:GodotEngine.Godot.JOY_AXIS_2">
            <summary>Joystick Right Stick Horizontal Axis</summary>
        </member>
        <member name="F:GodotEngine.Godot.JOY_AXIS_3">
            <summary>Joystick Right Stick Vertical Axis</summary>
        </member>
        <member name="F:GodotEngine.Godot.JOY_AXIS_6">
            <summary>Joystick Left Trigger Analog Axis</summary>
        </member>
        <member name="F:GodotEngine.Godot.JOY_AXIS_7">
            <summary>Joystick Right Trigger Analog Axis</summary>
        </member>
        <member name="F:GodotEngine.Godot.JOY_ANALOG_0_X">
            <summary>Joystick Left Stick Horizontal Axis</summary>
        </member>
        <member name="F:GodotEngine.Godot.JOY_ANALOG_0_Y">
            <summary>Joystick Left Stick Vertical Axis</summary>
        </member>
        <member name="F:GodotEngine.Godot.JOY_ANALOG_1_X">
            <summary>Joystick Right Stick Horizontal Axis</summary>
        </member>
        <member name="F:GodotEngine.Godot.JOY_ANALOG_1_Y">
            <summary>Joystick Right Stick Vertical Axis</summary>
        </member>
        <member name="F:GodotEngine.Godot.PROPERTY_HINT_NONE">
            <summary>No hint for edited property.</summary>
        </member>
        <member name="F:GodotEngine.Godot.PROPERTY_HINT_RANGE">
            <summary>Hints that the string is a range</summary>
        </member>
        <member name="F:GodotEngine.Godot.PROPERTY_HINT_EXP_RANGE">
            <summary>Hints that the string is an exponential range</summary>
        </member>
        <member name="F:GodotEngine.Godot.PROPERTY_HINT_ENUM">
            <summary>Property hint for an enumerated value</summary>
        </member>
        <member name="F:GodotEngine.Godot.PROPERTY_HINT_FLAGS">
            <summary>Property hint for a bitmask description</summary>
        </member>
        <member name="F:GodotEngine.Godot.PROPERTY_HINT_ALL_FLAGS">
            <summary>Property hint for a bitmask description that covers all 32 bits. Valid only for integers.</summary>
        </member>
        <member name="F:GodotEngine.Godot.PROPERTY_HINT_FILE">
            <summary>String property is a file (so pop up a file dialog when edited). Hint string can be a set of wildcards like "*.doc".</summary>
        </member>
        <member name="F:GodotEngine.Godot.PROPERTY_HINT_DIR">
            <summary>String property is a directory (so pop up a file dialog when edited).</summary>
        </member>
        <member name="F:GodotEngine.Godot.PROPERTY_HINT_RESOURCE_TYPE">
            <summary>String property is a resource</summary>
        </member>
        <member name="F:GodotEngine.Godot.PROPERTY_USAGE_STORAGE">
            <summary>Property will be used as storage (default).</summary>
        </member>
        <member name="F:GodotEngine.Godot.PROPERTY_USAGE_EDITOR">
            <summary>Property will be visible in editor (default).</summary>
        </member>
        <member name="F:GodotEngine.Godot.PROPERTY_USAGE_DEFAULT">
            <summary>Default usage (storage and editor).</summary>
        </member>
        <member name="F:GodotEngine.Godot.TYPE_NIL">
            <summary>Variable is of type nil (only applied for null).</summary>
        </member>
        <member name="F:GodotEngine.Godot.TYPE_BOOL">
            <summary>Variable is of type bool.</summary>
        </member>
        <member name="F:GodotEngine.Godot.TYPE_INT">
            <summary>Variable is of type int.</summary>
        </member>
        <member name="F:GodotEngine.Godot.TYPE_REAL">
            <summary>Variable is of type float/real.</summary>
        </member>
        <member name="F:GodotEngine.Godot.TYPE_STRING">
            <summary>Variable is of type String.</summary>
        </member>
        <member name="F:GodotEngine.Godot.TYPE_VECTOR2">
            <summary>Variable is of type Vector2.</summary>
        </member>
        <member name="F:GodotEngine.Godot.TYPE_RECT2">
            <summary>Variable is of type Rect2.</summary>
        </member>
        <member name="F:GodotEngine.Godot.TYPE_VECTOR3">
            <summary>Variable is of type Vector3.</summary>
        </member>
        <member name="F:GodotEngine.Godot.TYPE_MATRIX32">
            <summary>Variable is of type Transform2D.</summary>
        </member>
        <member name="F:GodotEngine.Godot.TYPE_PLANE">
            <summary>Variable is of type Plane.</summary>
        </member>
        <member name="F:GodotEngine.Godot.TYPE_QUAT">
            <summary>Variable is of type Quat.</summary>
        </member>
        <member name="F:GodotEngine.Godot.TYPE_Rect3">
            <summary>Variable is of type Rect3.</summary>
        </member>
        <member name="F:GodotEngine.Godot.TYPE_MATRIX3">
            <summary>Variable is of type Basis.</summary>
        </member>
        <member name="F:GodotEngine.Godot.TYPE_TRANSFORM">
            <summary>Variable is of type Transform.</summary>
        </member>
        <member name="F:GodotEngine.Godot.TYPE_COLOR">
            <summary>Variable is of type Color.</summary>
        </member>
        <member name="F:GodotEngine.Godot.TYPE_IMAGE">
            <summary>Variable is of type Image.</summary>
        </member>
        <member name="F:GodotEngine.Godot.TYPE_NODE_PATH">
            <summary>Variable is of type NodePath.</summary>
        </member>
        <member name="F:GodotEngine.Godot.TYPE_RID">
            <summary>Variable is of type RID.</summary>
        </member>
        <member name="F:GodotEngine.Godot.TYPE_OBJECT">
            <summary>Variable is of type Object.</summary>
        </member>
        <member name="F:GodotEngine.Godot.TYPE_INPUT_EVENT">
            <summary>Variable is of type InputEvent.</summary>
        </member>
        <member name="F:GodotEngine.Godot.TYPE_DICTIONARY">
            <summary>Variable is of type Dictionary.</summary>
        </member>
        <member name="F:GodotEngine.Godot.TYPE_ARRAY">
            <summary>Variable is of type Array.</summary>
        </member>
        <member name="M:GodotEngine.StringExtensions.length(System.String)">
            <summary>
            Return the length of the string in characters.
            </summary>
        </member>
    </members>
</doc>
